{"type": "STATE", "value": {}}
{"type": "SCHEMA", "stream": "stargazers", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"_sdc_repository": {"type": ["string"]}, "user": {"type": ["null", "object"], "additionalProperties": false, "properties": {"id": {"type": ["null", "integer"]}}}, "starred_at": {"type": ["null", "string"], "format": "date-time"}, "user_id": {"type": ["null", "integer"]}}}, "key_properties": ["user_id"]}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-08-08T13:41:05.000000Z", "user": {"id": 39645324}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 39645324}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-10-16T00:42:10.000000Z", "user": {"id": 322665}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 322665}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-10-16T01:24:02.000000Z", "user": {"id": 41018734}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 41018734}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-10-29T20:46:34.000000Z", "user": {"id": 3846080}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 3846080}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-11-02T16:50:18.000000Z", "user": {"id": 325848}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 325848}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-11-13T21:31:04.000000Z", "user": {"id": 3885029}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 3885029}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-11-25T10:15:26.000000Z", "user": {"id": 507482}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 507482}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2018-12-28T21:29:45.000000Z", "user": {"id": 418136}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 418136}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-01-09T15:01:22.000000Z", "user": {"id": 171371}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 171371}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-01-14T17:57:27.000000Z", "user": {"id": 4550411}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 4550411}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-01-27T22:48:40.000000Z", "user": {"id": 1789921}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 1789921}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-01-31T22:49:39.000000Z", "user": {"id": 948118}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 948118}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-02-22T10:56:32.000000Z", "user": {"id": 9384129}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 9384129}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-02-23T10:43:18.000000Z", "user": {"id": 6345269}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 6345269}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-02-26T01:47:40.000000Z", "user": {"id": 20669799}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 20669799}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-03-19T16:55:52.000000Z", "user": {"id": 24799706}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 24799706}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-03-29T22:10:48.000000Z", "user": {"id": 1812196}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 1812196}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-04-03T14:15:59.000000Z", "user": {"id": 23472325}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 23472325}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-05-21T03:27:09.000000Z", "user": {"id": 59479}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 59479}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-05-21T09:15:31.000000Z", "user": {"id": 20048168}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 20048168}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-05-27T09:26:38.000000Z", "user": {"id": 4965}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 4965}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-06-01T02:34:40.000000Z", "user": {"id": 8600215}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 8600215}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-06-11T02:42:34.000000Z", "user": {"id": 666683}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 666683}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-06-19T12:37:17.000000Z", "user": {"id": 588}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 588}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-06-25T05:16:03.000000Z", "user": {"id": 9503187}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 9503187}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-06-28T06:52:09.000000Z", "user": {"id": 1797812}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 1797812}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-07-06T01:58:38.000000Z", "user": {"id": 51210588}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 51210588}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-07-11T03:09:55.000000Z", "user": {"id": 17966884}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 17966884}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-07-16T20:06:14.000000Z", "user": {"id": 23650}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 23650}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-07-17T02:34:48.000000Z", "user": {"id": 48837589}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 48837589}, "time_extracted": "2019-08-12T18:12:33.413347Z"}
{"type": "RECORD", "stream": "stargazers", "record": {"starred_at": "2019-07-26T11:08:05.000000Z", "user": {"id": 11238}, "_sdc_repository": "datamill-co/target-postgres", "user_id": 11238}, "time_extracted": "2019-08-12T18:12:33.567936Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}}}}}
{"type": "SCHEMA", "stream": "assignees", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"login": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}, "url": {"type": ["null", "string"]}, "type": {"type": ["null", "string"]}, "_sdc_repository": {"type": ["string"]}}}, "key_properties": ["id"]}
{"type": "RECORD", "stream": "assignees", "record": {"login": "AlexanderMann", "id": 3885029, "url": "https://api.github.com/users/AlexanderMann", "type": "User", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:33.661657Z"}
{"type": "RECORD", "stream": "assignees", "record": {"login": "awm33", "id": 3846080, "url": "https://api.github.com/users/awm33", "type": "User", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:33.661657Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}, "assignees": {"since": "2019-08-12T18:12:33.661657Z"}}}}}
{"type": "SCHEMA", "stream": "issues", "schema": {"selected": true, "properties": {"state": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "labels": {"type": ["null", "array"], "items": {"type": "object", "properties": {"id": {"type": ["null", "integer"]}, "node_id": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "name": {"type": ["null", "string"]}, "description": {"type": ["null", "string"]}, "color": {"type": ["null", "string"]}, "default": {"type": ["null", "boolean"]}}}}, "repository_url": {"type": ["null", "string"]}, "number": {"type": ["null", "integer"]}, "labels_url": {"type": ["null", "string"]}, "title": {"type": ["null", "string"]}, "assignee": {"type": ["null", "object"], "properties": {}}, "updated_at": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "author_association": {"type": ["null", "string"]}, "locked": {"type": ["null", "boolean"]}, "events_url": {"type": ["null", "string"]}, "pull_request": {"properties": {"diff_url": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "patch_url": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}}, "type": ["null", "object"]}, "node_id": {"type": ["null", "string"]}, "body": {"type": ["null", "string"]}, "comments": {"type": ["null", "integer"]}, "created_at": {"type": ["null", "string"]}, "_sdc_repository": {"type": ["string"]}, "user": {"properties": {"repos_url": {"type": ["null", "string"]}, "starred_url": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "received_events_url": {"type": ["null", "string"]}, "site_admin": {"type": ["null", "boolean"]}, "gravatar_id": {"type": ["null", "string"]}, "following_url": {"type": ["null", "string"]}, "avatar_url": {"type": ["null", "string"]}, "events_url": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}, "login": {"type": ["null", "string"]}, "organizations_url": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "type": {"type": ["null", "string"]}, "subscriptions_url": {"type": ["null", "string"]}, "node_id": {"type": ["null", "string"]}, "followers_url": {"type": ["null", "string"]}, "gists_url": {"type": ["null", "string"]}}, "type": ["null", "object"]}, "id": {"type": ["null", "integer"]}, "comments_url": {"type": ["null", "string"]}}, "type": ["null", "object"]}, "key_properties": ["id"]}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/5", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/5/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/5/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/5", "id": 375191743, "node_id": "MDU6SXNzdWUzNzUxOTE3NDM=", "number": 5, "title": "Performance Testing", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-10-29T20:01:25Z", "updated_at": "2018-10-29T20:01:25Z", "author_association": "MEMBER", "body": "Ideally, we would have a script/CLI that could test / simulate different loads\r\n\r\n- Testing for load size in rows (10k, 100k, 1m, 10m etc rows)\r\n- Testing for load currency in number of tables (as well as num rows)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/3", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/3/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/3/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/3", "id": 375189498, "node_id": "MDU6SXNzdWUzNzUxODk0OTg=", "number": 3, "title": "Setup continuous integration", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-10-29T19:55:43Z", "updated_at": "2018-11-01T14:35:14Z", "author_association": "MEMBER", "body": "Setup continuous integration using CircleCI, TravisCI, or another cloud hosted CI platform.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/9", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/9/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/9/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/9", "id": 376152773, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3NDM1Nzk5", "number": 9, "title": "Improve documentation", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-10-31T20:45:03Z", "updated_at": "2018-11-01T14:46:13Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/9", "html_url": "https://github.com/datamill-co/target-postgres/pull/9", "diff_url": "https://github.com/datamill-co/target-postgres/pull/9.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/9.patch"}, "body": "# Motivation\r\nWhile working on https://github.com/datamill-co/target-postgres/pull/8 I noticed some documentation oversights. Most of the issues I saw I took the opportunity to improve via code (ie, better `setup.py` etc.).\r\n\r\n## Notes\r\nThe link to the badge is _technically_ broken right now because I pointed it at the non-building-non-existent DataMill repo instead of my personal fork where all the work was done. It'll work once DataMill is building.\r\n\r\n## TODO\r\nBetter _how to run locally_.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/wallowsmusic/these-days", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/10", "id": 376435323, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3NjUyNzM3", "number": 10, "title": "Fix/json schema type annotations string and array", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2018-11-01T15:12:01Z", "updated_at": "2018-11-05T16:27:43Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "html_url": "https://github.com/datamill-co/target-postgres/pull/10", "diff_url": "https://github.com/datamill-co/target-postgres/pull/10.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/10.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/7\r\n\r\nPresently the JSON Schema format allows for arrays OR strings to be present in the `type` field. This codebase doesn't quite like the latter...\r\n\r\n## Notes\r\nPlease read below rationale and next steps as they offer some other ideas I think could be pulled off quickly.\r\n\r\n## Rationale to Approach\r\n`target-postgres` leverages many of the benefits of mutability. As such, it can become quite difficult to know where a value is being set/handled/coming from.\r\n\r\nI first approached this problem by trying to pull the JSON Schema out into it's own class and proceeding in a very OO forward fashion. The diff for this was incredibly large. Instead of continuing down that path, I instead decided to highlight the places where we are playing with the `type` attr. by explicitly referencing only one helper function. This will make updating any related code around this much simpler in the future.\r\n\r\n## Next Steps\r\nI think there are some logical next steps that _could_ be taken here, but are now non-pressing (aside from code readability etc.):\r\n- move all schema helper fns over into the `json_schema` file\r\n  - things like `to_sql` `from_sql` etc.\r\n- upon passing the schema into the process (ie, in `main`), make it immutable to have the testing highlight all of the places where we are either making assumptions or munging data\r\n- move all conditional checks about the schema over into `json_schema` as helpers (ie, `is_nullable`) etc. so that the underlying structure can be changed at any point in the future\r\n  - make these actually handle the logic they are supposed to, and ignore whether values are `arrays` or `strings`\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/rjd2-official/see-you-leave", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/16", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/16/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/16/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/16", "id": 377500554, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4NDI4ODk5", "number": 16, "title": "Feature/docker compose development setup", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-05T17:19:36Z", "updated_at": "2018-11-06T02:46:08Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/16", "html_url": "https://github.com/datamill-co/target-postgres/pull/16", "diff_url": "https://github.com/datamill-co/target-postgres/pull/16.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/16.patch"}, "body": "# Motivation\r\nLocal dev setup could be simpler. Additionally, there is a slight divergence between what is running in CI and what is running locally.\r\n\r\n## Testing\r\n### Functional\r\n- [x] run `docker-compose up -d --build` followed by shelling in and confirming `python setup.py pytest` works as expected\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/deathfromabove1979/nomad?in=deathfromabove1979/sets/outrage-is-now", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/22", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/22/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/22/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/22", "id": 378007277, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4ODE0NDU3", "number": 22, "title": "Add Singer data collection and sponsorship info", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-06T19:51:29Z", "updated_at": "2018-11-06T20:01:14Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/22", "html_url": "https://github.com/datamill-co/target-postgres/pull/22", "diff_url": "https://github.com/datamill-co/target-postgres/pull/22.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/22.patch"}, "body": "", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/11", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/11/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/11/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/11", "id": 376435649, "node_id": "MDU6SXNzdWUzNzY0MzU2NDk=", "number": 11, "title": "Add Stitch/Singer Anonymous Tracking", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-01T15:12:40Z", "updated_at": "2018-11-06T20:12:57Z", "author_association": "MEMBER", "body": "We would like to get `target-postgres` released on [singer.io](singer.io). In order to do that, we need to add the Stitch/Singer anonymous tracking code.\r\n\r\nTracking code\r\nhttps://github.com/singer-io/target-csv/blob/master/target_csv.py#L103\r\n\r\nRunning it in a separate thread to not affect other code\r\nhttps://github.com/singer-io/target-csv/blob/master/target_csv.py#L137\r\n\r\nWe should also add a section to the README describing the tracking code and how to disable it. It does record the IP, but I believe that is used to determine unique(ish) users.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/17", "id": 377657117, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4NTQ4NzU4", "number": 17, "title": "Feature/json schema ref support", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 3, "created_at": "2018-11-06T01:39:28Z", "updated_at": "2018-11-06T23:36:07Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "html_url": "https://github.com/datamill-co/target-postgres/pull/17", "diff_url": "https://github.com/datamill-co/target-postgres/pull/17.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/17.patch"}, "body": "# Motivation\r\nThis tackles a couple things:\r\n- https://github.com/datamill-co/target-postgres/issues/7\r\n- https://github.com/datamill-co/target-postgres/issues/13\r\n\r\nAdditionally, this does a lite bit of refactoring, moving pure functions over to the `json_schema` file structure.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/sylvanesso/radio", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/13", "id": 376443264, "node_id": "MDU6SXNzdWUzNzY0NDMyNjQ=", "number": 13, "title": "JSON Schema $ref is not supported", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2018-11-01T15:30:13Z", "updated_at": "2018-11-09T03:37:05Z", "author_association": "MEMBER", "body": "- Add support for self referencing `$ref` (reference is within the same document).\r\n- Identify level of effort for resolving HTTP(S) `$ref`s. Then comment and collaborate to determine if level of effort meets benefit.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/24", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/24/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/24/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/24", "id": 379888356, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwMjE5Mzc1", "number": 24, "title": "Feature/validate streamed data against known json schema", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-12T17:52:55Z", "updated_at": "2018-11-13T02:05:21Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "html_url": "https://github.com/datamill-co/target-postgres/pull/24", "diff_url": "https://github.com/datamill-co/target-postgres/pull/24.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/24.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/21\r\n\r\n## Notes\r\nAttempting to _persist_ a record even though validation failed is not something I worked on in this pr. I initially attempted to provide this level of configuration, however, this introduces a number of...fun...intricacies.\r\n\r\nFor the time being, records which _do not_ meet validation standards are placed into (effectively) a dead letter queue, whose size is configurable.\r\n\r\nAn open question is on whether we should be flushing those records in the same manner as the other buffers (as they too can fill up and cause problems for memory etc.). I'm awaiting input from a reviewer as to what to do in this vein.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/talkingheads/take-me-to-the-river-live?in=talkingheads/sets/stop-making-sense-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/26", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/26/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/26/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/26", "id": 380027325, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwMzI1NzYw", "number": 26, "title": "Feature/primary key changes fail", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-13T02:11:44Z", "updated_at": "2018-11-13T02:24:46Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/26", "html_url": "https://github.com/datamill-co/target-postgres/pull/26", "diff_url": "https://github.com/datamill-co/target-postgres/pull/26.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/26.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/15\r\n\r\nSimple PR to identify PK changes in a target table from a given stream.\r\n\r\n## Suggested Musical Pairing\r\nCoffee Shop Sounds", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/21", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/21/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/21/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/21", "id": 377944136, "node_id": "MDU6SXNzdWUzNzc5NDQxMzY=", "number": 21, "title": "Optionally validate data using JSON Schema", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-06T17:03:12Z", "updated_at": "2018-11-13T02:30:07Z", "author_association": "MEMBER", "body": "As records stream in, validate them against their JSON Schema using a python JSON Schema library.\r\n\r\nThis validation should be optional and turned on/off via CLI flag or config JSON.\r\n\r\nWe may want to optionally allow for a certain number of records that would error and reject, similar to Redshift loading. ex allow for 5 erroneous documents.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/20", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/20/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/20/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/20", "id": 377942933, "node_id": "MDU6SXNzdWUzNzc5NDI5MzM=", "number": 20, "title": "Validate incoming JSON Schema", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-06T17:00:28Z", "updated_at": "2018-11-13T02:30:14Z", "author_association": "MEMBER", "body": "Validate incoming JSON Schema using a JSON Schema python library. Log a warning or throw an exception if the JSON Schema is not valid.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/15", "id": 377479672, "node_id": "MDU6SXNzdWUzNzc0Nzk2NzI=", "number": 15, "title": "Handle PK changes", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 6, "created_at": "2018-11-05T16:31:37Z", "updated_at": "2018-11-13T02:41:02Z", "author_association": "MEMBER", "body": "The only thing we may be able to do is warn and update it, or fail hard. PK changes could be an actual source change, or more likely the using had it wrong in the Singer stream.\r\n\r\nhttps://github.com/datamill-co/target-postgres/blob/master/target_postgres/postgres.py#L65", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/27", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/27/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/27/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/27", "id": 380392764, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNjAyMDgy", "number": 27, "title": "Housekeeping/supported versions", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-13T19:45:23Z", "updated_at": "2018-11-13T21:26:09Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/27", "html_url": "https://github.com/datamill-co/target-postgres/pull/27", "diff_url": "https://github.com/datamill-co/target-postgres/pull/27.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/27.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/19\r\n\r\nExplicitly layout which versions of Postgres and JSON Schema we are supporting.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/grizzlybearband/two-weeks", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/25", "id": 379930799, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwMjUxNzAw", "number": 25, "title": "Update README with best practices", "user": {"login": "timvisher", "id": 34676, "node_id": "MDQ6VXNlcjM0Njc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisher", "html_url": "https://github.com/timvisher", "followers_url": "https://api.github.com/users/timvisher/followers", "following_url": "https://api.github.com/users/timvisher/following{/other_user}", "gists_url": "https://api.github.com/users/timvisher/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisher/subscriptions", "organizations_url": "https://api.github.com/users/timvisher/orgs", "repos_url": "https://api.github.com/users/timvisher/repos", "events_url": "https://api.github.com/users/timvisher/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 8, "created_at": "2018-11-12T20:00:59Z", "updated_at": "2018-11-13T21:28:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "html_url": "https://github.com/datamill-co/target-postgres/pull/25", "diff_url": "https://github.com/datamill-co/target-postgres/pull/25.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/25.patch"}, "body": "Motivation\r\n----------\r\n\r\nThe README had a smill spelling error and also suggested running the\r\n`target` and `tap` in the same virtualenv. This updates it to be a bit\r\nmore in keeping with current best practices.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/19", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/19/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/19/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/19", "id": 377879973, "node_id": "MDU6SXNzdWUzNzc4Nzk5NzM=", "number": 19, "title": "Supported Versions of :all-the-things:", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-06T14:48:57Z", "updated_at": "2018-11-13T21:40:14Z", "author_association": "COLLABORATOR", "body": "# Problem\r\nPresently we offer no guidance as to what versions of any of our dependencies we support/rely on.\r\n\r\nThe two which come to mind most readily:\r\n- PostgreSQL\r\n- JSON Schema\r\n\r\nThere are significant differences between each version of PSQL and each draft of JSON Schema.\r\n\r\n## Suggestion\r\nFor JSON Schema we pick a _single_ version we support. For PSQL, I think that supporting multiple versions is reasonable and should be as simple as updating our CI to fan out over various versions of PSQL.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/sylvanesso/hskt", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/30", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/30/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/30/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/30", "id": 380857320, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwOTU4NDI1", "number": 30, "title": "Feature/type collision", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-14T19:44:26Z", "updated_at": "2018-11-14T22:46:47Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/30", "html_url": "https://github.com/datamill-co/target-postgres/pull/30", "diff_url": "https://github.com/datamill-co/target-postgres/pull/30.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/30.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\n\r\nSimple pr to start detecting column type changes.\r\n\r\n## Notes\r\nFuture work on this will follow the plan laid out in #12. Presently, we need a hook/location to be able to alert about the type change. Following that we can `add_column('name__type')` and `drop_column` etc.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/phoenix/lisztomania", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/31", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/31/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/31/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/31", "id": 380891352, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwOTg1MzMw", "number": 31, "title": "Fix/null default", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-14T21:19:55Z", "updated_at": "2018-11-14T23:05:16Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "html_url": "https://github.com/datamill-co/target-postgres/pull/31", "diff_url": "https://github.com/datamill-co/target-postgres/pull/31.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/31.patch"}, "body": "# Motivation\r\nJSONSchema defines a `default` field to hint to validators, etc., that the given property does not need to meet it's `not null` constraint, and that if this failure case is reached, to simply use the default instead.\r\n\r\nPresently, we do not handle a couple things:\r\n- create a table with defaults\r\n- our persist method doesn't play nice with default values in general\r\n  - even if the column has a default set in SQL, it will not utilize that when the copy places `null`\r\n  - this becomes especially tricky when you have mixed null/not-null values in a csv column...\r\n\r\n## Notes\r\nIf there is a simple solution to get the CSV copy to play nicely, then I think we should use that.\r\n\r\nThis brute force approach works though.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/ugly-casanova/barnacles", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/32", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/32/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/32/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/32", "id": 381170913, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMjAyMDk4", "number": 32, "title": "Fix/empty string", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-15T13:54:11Z", "updated_at": "2018-11-15T14:43:09Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/32", "html_url": "https://github.com/datamill-co/target-postgres/pull/32", "diff_url": "https://github.com/datamill-co/target-postgres/pull/32.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/32.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/7#issuecomment-438861733\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/planned_obsolescence/mixed-bizness", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/34", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/34/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/34/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/34", "id": 381191429, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMjE4Mjg1", "number": 34, "title": "Housekeeping/logger warn is deprecated", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-15T14:42:39Z", "updated_at": "2018-11-15T16:29:54Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/34", "html_url": "https://github.com/datamill-co/target-postgres/pull/34", "diff_url": "https://github.com/datamill-co/target-postgres/pull/34.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/34.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/33\r\n\r\n## Notes\r\nThis looks much better in the testing output!\r\n\r\n```\r\n=========================================================================================== test session starts ============================================================================================\r\nplatform linux -- Python 3.7.1, pytest-3.9.3, py-1.7.0, pluggy-0.8.0\r\nrootdir: /code, inifile: pytest.ini\r\ncollected 35 items                                                                                                                                                                                         \r\n\r\ntests/test_BufferedSingerStream.py .....                                                                                                                                                             [ 14%]\r\ntests/test_json_schema.py ............                                                                                                                                                               [ 48%]\r\ntests/test_postgres.py ..................                                                                                                                                                            [100%]\r\n\r\n======================================================================================== 35 passed in 6.73 seconds =========================================================================================\r\n```\r\n\r\nNamely:\r\n\r\n> ====== 35 passed in 6.73 seconds ========\r\n\r\nUsually that was littered with various warnings and whatnot.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/ugly-casanova/barnacles", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/35", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/35/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/35/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/35", "id": 381236152, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMjUzNDkx", "number": 35, "title": "Housekeeping/development improvements docker", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-15T16:20:11Z", "updated_at": "2018-11-15T16:30:17Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/35", "html_url": "https://github.com/datamill-co/target-postgres/pull/35", "diff_url": "https://github.com/datamill-co/target-postgres/pull/35.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/35.patch"}, "body": "# Motivation\r\nA portion of my time is spent typing out `python setup.py pytest`. Additionally, whenever docker has to restart, or I do anything which fumbles the eggs etc., I have to re-download the world.\r\n\r\nThis pr aims to do three simple things:\r\n- suggest shelling into the container using `bash` instead of `sh`\r\n  - our container supports this, and it makes life easier (history! autocomplete! hurrah!)\r\n- setup alias for the `pytest` command\r\n  - due to the above as well, you get autocomplete for it, yahtzee!\r\n- cache python files based on whether or not `setup.py` has changed in the Docker build step\r\n  - this means that the container _itself_ actually caches these values\r\n\r\n## Testing\r\n```sh\r\n$ docker-compose up -d --build\r\n...\r\nBest match: pytz 2018.7\r\nProcessing pytz-2018.7-py2.py3-none-any.whl\r\nInstalling pytz-2018.7-py2.py3-none-any.whl to /usr/local/lib/python3.7/site-packages\r\nAdding pytz 2018.7 to easy-install.pth file\r\n\r\nInstalled /usr/local/lib/python3.7/site-packages/pytz-2018.7-py3.7.egg\r\nFinished processing dependencies for target-postgres==0.0.1\r\nRemoving intermediate container 5ffdbc7c0a65\r\n ---> f82310941dcb\r\nStep 6/6 : ENTRYPOINT [\"./docker-entrypoint.sh\"]\r\n ---> Running in e9601b0b87d9\r\nRemoving intermediate container e9601b0b87d9\r\n ---> 98d30d87c548\r\nSuccessfully built 98d30d87c548\r\nSuccessfully tagged target-postgres_target-postgres:latest\r\nCreating target-postgres_target-postgres_1 ... done\r\nCreating target-postgres_db_1              ... done\r\n\r\n$ bash -c \"clear && docker exec -it target-postgres_target-postgres_1 bash\"\r\n\r\nroot@be07c3b690d3:/code# pytest\r\n...\r\n============== 35 passed, 26 warnings in 8.84 seconds ==================\r\n```\r\n\r\n## Suggested Musical Pairing\r\nCoffee shop sounds\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/36", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/36/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/36/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/36", "id": 381240357, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMjU2NzY2", "number": 36, "title": "Housekeeping/pylint  object useless", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-15T16:29:35Z", "updated_at": "2018-11-15T16:33:45Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/36", "html_url": "https://github.com/datamill-co/target-postgres/pull/36", "diff_url": "https://github.com/datamill-co/target-postgres/pull/36.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/36.patch"}, "body": "# Motivation\r\n\r\nFor kicks, I downloaded `pylint` to see what state our repo is in. There are some glaring trickier issues, but one of the low hanging fruits are a couple of problems which `pylint` tags (loosely) as `.*useless.*`.\r\n\r\nI tidied those few things up.\r\n\r\n## Testing\r\n### Before\r\n\r\n```sh\r\nroot@be07c3b690d3:/code# pylint target_postgres/ | grep useless\r\ntarget_postgres/postgres.py:12:0: C0414: Import alias does not rename original package (useless-import-alias)\r\ntarget_postgres/postgres.py:31:0: R0205: Class 'TransformStream' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\ntarget_postgres/postgres.py:38:0: R0205: Class 'PostgresTarget' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\ntarget_postgres/singer_stream.py:22:0: R0205: Class 'BufferedSingerStream' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\n```\r\n\r\n### After\r\n\r\n```sh\r\nroot@be07c3b690d3:/code# pylint target_postgres/ | grep useless\r\n```\r\n\r\n## Suggested Musical Pairing\r\nKeyboard typing", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/33", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/33/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/33/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/33", "id": 381172724, "node_id": "MDU6SXNzdWUzODExNzI3MjQ=", "number": 33, "title": "Housekeeping: Logger", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-15T13:58:38Z", "updated_at": "2018-11-15T16:35:07Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\nNoticed this lil' tidbit in some output recently:\r\n\r\n>   /code/target_postgres/postgres.py:584: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead\r\n\r\nLooks like `warn` has been deprecated [for some time](https://stackoverflow.com/a/15655674)\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/jefferson-airplane-official/white-rabbit-4\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/37", "id": 381828806, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxNzA3MTk3", "number": 37, "title": "Refactor/no more sql column defaults", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 3, "created_at": "2018-11-17T05:02:31Z", "updated_at": "2018-11-19T17:27:18Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/37", "html_url": "https://github.com/datamill-co/target-postgres/pull/37", "diff_url": "https://github.com/datamill-co/target-postgres/pull/37.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/37.patch"}, "body": "# Motivation\r\n\r\nIn the wake of working on column type changes, and hence column splitting, I encountered that our handling of sql defaults actually never _quite_ worked as we anticipated.\r\n\r\nTables manually created in PSQL to have various defaults were not correctly deserialized due to the type of the `information_schema.column_default` column to be `character_data`:\r\n\r\n```\r\n{'name': 'foo',\r\n 'type': 'TABLE_SCHEMA',\r\n 'schema': {'properties': \r\n   {'id': {'type': ['integer', 'null']},\r\n    'bar': {'type': ['string'], 'default': \"''::text\"}}}}\r\n```\r\n\r\nAfter a conversation, @awm33 and I came to the conclusion that \"prefilling\"/\"backfilling\" data is actually not really in keeping with the spirit of providing a streaming data tool. The previous data _did not have_ the values we're trying to assign to it, so we're actually breaking history.\r\n\r\n## Notes\r\n\r\nThere was a conversation about making _all columns_ nullable, however I think that's probably overboard for what we want/have to provide at the moment.\r\n\r\nI think that if a column _becomes_ nullable, we should probably \"expand\" the column to handle that, but if your schema has 5 non nullable columns...and never changes, the user experience will be far superior to have the non null constraints in place.\r\n\r\nThe above is also a smaller changeset. I think if we want to go _further_ down the path of making every column nullable, we should make a pr _just_ for that.\r\n\r\nThis was my spike pr: https://github.com/datamill-co/target-postgres/compare/master...AlexanderMann:scratchwork/column-type-renames?expand=1\r\n\r\n## Suggested Musical Pairing\r\n\r\nWind.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/38", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/38/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/38/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/38", "id": 382337424, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyMDY4NzEx", "number": 38, "title": "Feature/column type splitting", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-19T18:20:56Z", "updated_at": "2018-11-19T22:12:52Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "html_url": "https://github.com/datamill-co/target-postgres/pull/38", "diff_url": "https://github.com/datamill-co/target-postgres/pull/38.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/38.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\n\r\nPresently if a column comes to us with a type change, we are unable to handle the type change. The work done in this pr:\r\n\r\n- detects the type change\r\n- creates two new columns:\r\n  - `<original-column-name>__<existing-type:sql-type-shortand>`\r\n  - `<original-column-name>__<new-type:sql-type-shortand>`\r\n- migrates the data from `<original-column-name>` to `<original-column-name>__<existing-type:sql-type-shortand>`\r\n- drops `<original-column-name>`\r\n\r\n## Notes\r\n\r\n- This lays some groundwork for future `$any` support\r\n- This lays some groundwork for future `regular-type -> null-type` support but does not implement the work to do this\r\n\r\n## Suggested Musical Pairing\r\n\r\nDog sleeping.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/29", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/29/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/29/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/29", "id": 380842749, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwOTQ3MDA0", "number": 29, "title": "Refactor/sql schema", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-14T19:04:30Z", "updated_at": "2018-11-21T15:37:57Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/29", "html_url": "https://github.com/datamill-co/target-postgres/pull/29", "diff_url": "https://github.com/datamill-co/target-postgres/pull/29.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/29.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/28\r\nhttps://github.com/datamill-co/target-postgres/issues/4\r\n\r\nIn light of a recent pr, it seems like we're butting up against the essential core of generic-SQL, Postgres, and Redshift sections of this codebase. Due to this, this PR aims to provide some groundwork to be able to abstract out the core SQL operations, vs the more Postgres specific.\r\n\r\n## Notes\r\n\r\nThis PR introduces no _new_ functionality.\r\n\r\nTo reduce scope, the only classes/objects this PR creates are related to Schema.\r\n\r\n## Proposed Next Steps\r\n\r\nThe proposed next steps along this trajectory are:\r\n- pull table version info and logic into `SQLSchema`\r\n- expose functions and move functionality for schema collision/upsert/remote-fetch into `SQLSchema`/`TableSchema`\r\n- introduce table/column name canonicalization and error detection\r\n- introduce a `SQLPersistence` (name pending) class which moves base persistence functionality (like de-nesting records etc.) into a new class\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/pondling/man-it-feels-like-space-again", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/39", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/39/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/39/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/39", "id": 382363023, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyMDg4NDYy", "number": 39, "title": "Feature/nullable column handling", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-19T19:37:07Z", "updated_at": "2018-11-21T16:34:52Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/39", "html_url": "https://github.com/datamill-co/target-postgres/pull/39", "diff_url": "https://github.com/datamill-co/target-postgres/pull/39.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/39.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\nhttps://github.com/datamill-co/target-postgres/pull/38\r\n\r\nExisting columns cannot be made nullable.\r\n\r\n## Suggested Musical Pairing\r\nDog chewing.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/40", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/40/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/40/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/40", "id": 382382504, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyMTAzNjc5", "number": 40, "title": "Feature/pk type change detection", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-19T20:34:42Z", "updated_at": "2018-11-21T16:43:57Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/40", "html_url": "https://github.com/datamill-co/target-postgres/pull/40", "diff_url": "https://github.com/datamill-co/target-postgres/pull/40.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/40.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\nhttps://github.com/datamill-co/target-postgres/pull/39\r\n\r\nPK types changes are v bad.\r\n\r\n## Suggested Musical Pairing\r\n\r\nWind.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/12", "id": 376442059, "node_id": "MDU6SXNzdWUzNzY0NDIwNTk=", "number": 12, "title": "Types cannot change / mixed types", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 7, "created_at": "2018-11-01T15:27:33Z", "updated_at": "2018-11-21T16:46:20Z", "author_association": "MEMBER", "body": "If a column type changes, the target should be able to handle that. There is no Singer standard for handling this, so we could look to Stitches standard. Though I think we can use JSON Schema to our advantage, since at least for now, we are assuming it is always available, and not handling any given JSON.\r\n\r\nI think this comes down to:\r\n- Identify a set of rules for handling data type changes. Try to maximize user experience, and minimize negative consequences of changing the schema.\r\n- Implement those rules and create tests around each combination of type change cases.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.064811Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/41", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/41/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/41/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/41", "id": 383176829, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyNzA5NTg5", "number": 41, "title": "Refactor/rbdms base", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-21T15:42:08Z", "updated_at": "2018-11-26T15:28:47Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "html_url": "https://github.com/datamill-co/target-postgres/pull/41", "diff_url": "https://github.com/datamill-co/target-postgres/pull/41.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/41.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/projects/1#card-14578993\r\nhttps://github.com/datamill-co/target-postgres/pull/29\r\n\r\nIn this PR we introduce `RDBMSInterface`. This is aimed at being the base class for generic relational database targets.\r\n\r\nThe work for building out a full `RDBMSInterface` is loosely scheduled as:\r\n- schema updates/schema processing\r\n- batch denesting/batch writing\r\n- version updates\r\n\r\nThis PR only aims to start tackling:\r\n- initialization/bones of RDBMSInterface\r\n- schema processing\r\n\r\n# Notes\r\n\r\nAble to be reviewed commit by commit.\r\n\r\nAs noted in `rdbms_base`:\r\n\r\n```py\r\n# RDBMS Base\r\n## This module is the base implementation for Singer RDBMS target support.\r\n## Expected usage of this module is to create a class representing your given\r\n## RDBMS Target which overrides RDBMSInterface.\r\n#\r\n# Transition\r\n## The given implementation here is in transition as we expand and add various\r\n## targets. As such, there are many private helper functions which are providing\r\n## the real support.\r\n##\r\n## The expectation is that these functions will be added to RDBMSInterface as we\r\n## better understand how to make adding new targets simpler.\r\n#\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/santigold/disparate-youth\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/4", "id": 375190522, "node_id": "MDU6SXNzdWUzNzUxOTA1MjI=", "number": 4, "title": "Decision - When / how to split off Redshift", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 8, "created_at": "2018-10-29T19:58:15Z", "updated_at": "2018-11-27T15:23:54Z", "author_association": "MEMBER", "body": "When is the best time to split off the codebase into:\r\n- datamill-co/singer-sql-target-tools (better names welcome)\r\n- datamill-co/target-redshift\r\n\r\nA lot of the issues / features to be worked on overlap, but may require branching logic based on posgres vs redshift.\r\n\r\nIs it best to do this after more work is done on postgres?\r\n\r\nHow best to do this?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/28", "id": 380475529, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNjY1Mjc3", "number": 28, "title": "Feature/canonicalize column names", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 3, "created_at": "2018-11-13T23:51:29Z", "updated_at": "2018-11-27T17:30:47Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/28", "html_url": "https://github.com/datamill-co/target-postgres/pull/28", "diff_url": "https://github.com/datamill-co/target-postgres/pull/28.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/28.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/18\r\n\r\nThis is the first pr in a series. Proper handling of PSQL names involves non-latin characters, unicode, and general madness. As such, I've tried to split this work up into the following passes:\r\n\r\n- detect invalid names (ASCII only)\r\n- normalize names (leverage PSQL comments to store information about schema etc.)\r\n- quotes support (?)\r\n- unicode support (?)\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/starfucker_usa/golden-light-1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/43", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/43/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/43/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/43", "id": 384553105, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMzNzI5Mjg0", "number": 43, "title": "Refactor/sql persist", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-26T23:22:10Z", "updated_at": "2018-11-27T19:14:42Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "html_url": "https://github.com/datamill-co/target-postgres/pull/43", "diff_url": "https://github.com/datamill-co/target-postgres/pull/43.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/43.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/projects/1#card-14578993\r\n\r\nFollow up to the work done in #41. This PR seeks to start tackling the commonality of `write_batch` for `SQLInterface`.\r\n\r\n## Notes\r\nThis pr moves the following functionality over to `sql_base`:\r\n- records denesting per table\r\n- records serialization preparation for remote persistence\r\n\r\nThis pr _removes_ the following functionality from `sql_base`:\r\n- bulk/entire schema updating for remote\r\n  - it leaves in place updating _individual_ tables\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/subpop/rolling-blackouts-julies-place", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/14", "id": 376444093, "node_id": "MDU6SXNzdWUzNzY0NDQwOTM=", "number": 14, "title": "JSON Schema combinations such as \"anyOf\" and \"allOf\" are not supported", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 4, "created_at": "2018-11-01T15:32:11Z", "updated_at": "2018-11-30T02:39:39Z", "author_association": "MEMBER", "body": "Allow for [combining schemas](https://json-schema.org/understanding-json-schema/reference/combining.html)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/45", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/45/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/45/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/45", "id": 385026775, "node_id": "MDU6SXNzdWUzODUwMjY3NzU=", "number": 45, "title": "Can only split a column once", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-27T23:04:19Z", "updated_at": "2018-11-30T17:04:49Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nWhile working on #18 I found an overlooked bug in the column splitting logic. If you attempt to split a column over _multiple_ types (ie, `str, int, bool`) our current logic will fail. Whereas, it _should_ simply add the new column and mapping and call it a day.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/wmi/metronomy-04-love-letters-2?in=metronomy/sets/love-letters-19", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/47", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/47/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/47/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/47", "id": 386294841, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1MDcyMTQ1", "number": 47, "title": "Fix/table name validation detection", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-30T18:11:49Z", "updated_at": "2018-11-30T20:14:06Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/47", "html_url": "https://github.com/datamill-co/target-postgres/pull/47", "diff_url": "https://github.com/datamill-co/target-postgres/pull/47.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/47.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/18#issuecomment-443284112\r\n\r\n```\r\ntarget_postgres_test=# create table cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2 ();\r\nNOTICE:  identifier \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2\" will be truncated to \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af7\"\r\nCREATE TABLE\r\n\r\n```\r\n\r\nThat's the name of one of the temp tables we generate. That just _happens_ to work right now. This pr removes the variability in temp table name generation length and instead just uses a `uuid` to uniquely identify tmps.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/unknownmortalorchestra/hunnybee", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/46", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/46/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/46/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/46", "id": 385032222, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM0MDk2NjU1", "number": 46, "title": "Feature/invalid identifier names", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-11-27T23:25:00Z", "updated_at": "2018-11-30T21:07:10Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "html_url": "https://github.com/datamill-co/target-postgres/pull/46", "diff_url": "https://github.com/datamill-co/target-postgres/pull/46.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/46.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/18\r\n\r\nWhen we get an identifier for a column/table which is invalid for PostgreSQL we presently don't do anything intelligent and simply try to persist it to the remote target.\r\n\r\nThis PR aims to do a few things:\r\n- alert users with a fine grained description of the problem by both detecting when there could be a problem and also by detecting when a problem has occurred in the remote and providing details\r\n- map invalid _column_ names to valid names by:\r\n  - lowercasing all names\r\n  - stripping invalid characters and replacing them with `_`\r\n- start building out the usage of `mappings` and exploring commonality of this mechanism\r\n  - my _guess_ is that we will want to make this a universal `SQLInterface` type thing, but for the time being we can leave this alone and keep this a feature specific pr\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/wmi/metronomy-04-love-letters-2?in=metronomy/sets/love-letters-19", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/18", "id": 377663951, "node_id": "MDU6SXNzdWUzNzc2NjM5NTE=", "number": 18, "title": "Column name normalization and error handling", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 11, "created_at": "2018-11-06T02:14:21Z", "updated_at": "2018-12-04T16:42:37Z", "author_association": "MEMBER", "body": "Currently, target-postgres blindly uses the JSON Schema property name as the column name https://github.com/datamill-co/target-postgres/blob/master/target_postgres/postgres.py#L597\r\n\r\nHowever, postgres (and redshift) have limitations on what characters can be used in column names, and the length of a column name.\r\n\r\nThe target should attempt to normalize and shorten a column, and detect conflicts with other columns after doing so, throwing an exception if a conflict us detected.\r\n\r\nFrom https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\r\n```\r\nSQL identifiers and key words must begin with a letter (a-z, but also letters with diacritical marks and non-Latin letters) or an underscore (_). Subsequent characters in an identifier or key word can be letters, underscores, digits (0-9), or dollar signs ($). Note that dollar signs are not allowed in identifiers according to the letter of the SQL standard, so their use might render applications less portable. The SQL standard will not define a key word that contains digits or starts or ends with an underscore, so identifiers of this form are safe against possible conflict with future extensions of the standard.\r\n\r\nThe system uses no more than NAMEDATALEN-1 bytes of an identifier; longer names can be written in commands, but they will be truncated. By default, NAMEDATALEN is 64 so the maximum identifier length is 63 bytes. If this limit is problematic, it can be raised by changing the NAMEDATALEN constant in src/include/pg_config_manual.h.\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/48", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/48/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/48/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/48", "id": 386350813, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1MTE1NzQy", "number": 48, "title": "Refactor/sql base merge schemas", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-30T21:08:52Z", "updated_at": "2018-12-04T19:04:10Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/48", "html_url": "https://github.com/datamill-co/target-postgres/pull/48", "diff_url": "https://github.com/datamill-co/target-postgres/pull/48.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/48.patch"}, "body": "# Motivation\r\n\r\nIn introducing logic into `merge_put_schemas`, it's become clear that the implementing classes can be dramatically simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/orionsun/test-experimental-tape", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/53", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/53/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/53/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/53", "id": 387378291, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1ODgwMDA2", "number": 53, "title": "Feature/column name normalization  length", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T16:43:40Z", "updated_at": "2018-12-04T19:04:27Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/53", "html_url": "https://github.com/datamill-co/target-postgres/pull/53", "diff_url": "https://github.com/datamill-co/target-postgres/pull/53.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/53.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/50\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/littledragon/pretty-girls", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/54", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/54/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/54/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/54", "id": 387378687, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1ODgwMzEw", "number": 54, "title": "Feature/column name normalization  collision", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T16:44:29Z", "updated_at": "2018-12-04T19:04:48Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/54", "html_url": "https://github.com/datamill-co/target-postgres/pull/54", "diff_url": "https://github.com/datamill-co/target-postgres/pull/54.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/54.patch"}, "body": "# Motivation\r\n\r\n#51 \r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lcd-soundsystem/north-american-scum", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/50", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/50/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/50/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/50", "id": 387366642, "node_id": "MDU6SXNzdWUzODczNjY2NDI=", "number": 50, "title": "Column Name Normalization: Length", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T16:20:03Z", "updated_at": "2018-12-04T19:22:25Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nSplit out from: https://github.com/datamill-co/target-postgres/issues/18\r\n\r\nPresently when we attempt to canonicalize a column, we DO NOT handle truncation/length issues.\r\n\r\nIt has been decided that for any columns which encounter truncation issues will be:\r\n- truncated\r\n- if no successful mapping can be reached, hard fail\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/bombay-bicycle-club/how-can-you-swallow-so-much-1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/51", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/51/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/51/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/51", "id": 387370458, "node_id": "MDU6SXNzdWUzODczNzA0NTg=", "number": 51, "title": "Column Name Normalization: Collision", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-12-04T16:27:39Z", "updated_at": "2018-12-04T19:40:05Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nSplit out from: https://github.com/datamill-co/target-postgres/issues/18\r\n\r\nPresently when we attempt to canonicalize a column, we DO NOT handle collision issues. ie, column `Aa` and column `aA` will both canonicalize to `aa`. When this happens, we hard fail. Instead, we can make a best case attempt to resolve this issue.\r\n\r\nIt has been decided that for any columns which encounter collision issues will be:\r\n- if colliding, truncated further and suffixed with: `__0`,`__1`, ...\r\n- if no successful mapping can be reached, hard fail\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/phoenix/too-young", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/56", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/56/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/56/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/56", "id": 387435419, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1OTI0NTMw", "number": 56, "title": "Feature/column name normalization  collision", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T19:05:35Z", "updated_at": "2018-12-04T20:41:59Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/56", "html_url": "https://github.com/datamill-co/target-postgres/pull/56", "diff_url": "https://github.com/datamill-co/target-postgres/pull/56.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/56.patch"}, "body": "# Motivation\r\n\r\n#51 \r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lcd-soundsystem/north-american-scum", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/49", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/49/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/49/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/49", "id": 387123681, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1NjgyMTYz", "number": 49, "title": "Feature/column name truncation", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T05:12:29Z", "updated_at": "2018-12-04T20:42:02Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/49", "html_url": "https://github.com/datamill-co/target-postgres/pull/49", "diff_url": "https://github.com/datamill-co/target-postgres/pull/49.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/49.patch"}, "body": "# Motivation\r\n\r\nWIP", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/23", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/23/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/23/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/23", "id": 378876832, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI5NDc3NjE1", "number": 23, "title": "Feature/validate json schema", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-11-08T19:13:09Z", "updated_at": "2018-12-04T20:42:04Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "html_url": "https://github.com/datamill-co/target-postgres/pull/23", "diff_url": "https://github.com/datamill-co/target-postgres/pull/23.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/23.patch"}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/20\r\n\r\nThe user experience for a broken JSON Schema is fairly poor. This PR seeks to improve the overall experience for the end user by detecting broken/invalid schemas and aborting immediately instead of trying to swallow exceptions etc.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/talkingheads/stay-up-late-remastered?in=talkingheads/sets/once-in-a-lifetime-the-talking", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/8", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/8/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/8/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/8", "id": 376151672, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3NDM0OTI1", "number": 8, "title": "Housekeeping/ci setup", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-10-31T20:42:02Z", "updated_at": "2018-12-04T20:42:09Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/8", "html_url": "https://github.com/datamill-co/target-postgres/pull/8", "diff_url": "https://github.com/datamill-co/target-postgres/pull/8.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/8.patch"}, "body": "# Motivation\r\nNo CI was setup for Target Postgres. As this is typically the single biggest thing one can do (aside from having tests in the first place) to improve speed long term, I used this as my first step into understanding the code base better.\r\n\r\nhttps://circleci.com/gh/AlexanderMann/target-postgres/25 is the corresponding successful build in CCI.\r\n\r\n## Notes\r\nPLEASE NOTE: This will require work from an admin (or maybe just a member?) in the Data Mill org to actually go in to CircleCI projects and start building.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/sylvanesso/parad-w-m-e ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/55", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/55/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/55/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/55", "id": 387410974, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1OTA1NTQ1", "number": 55, "title": "Feature: init DECISIONS.md", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T18:00:51Z", "updated_at": "2018-12-04T21:17:20Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "html_url": "https://github.com/datamill-co/target-postgres/pull/55", "diff_url": "https://github.com/datamill-co/target-postgres/pull/55.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/55.patch"}, "body": "# Motivation\r\n\r\nWhile some of these decisions around more complicated functionality in `target-postgres`/`target-sql` are fresh, write em down.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/of-montreal/oslo-in-the-summertime", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/62", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/62/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/62/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/62", "id": 388840913, "node_id": "MDU6SXNzdWUzODg4NDA5MTM=", "number": 62, "title": "SQL Base/Interface: Use CRUD naming", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "open", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-12-07T22:46:30Z", "updated_at": "2018-12-11T16:23:29Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nPresently `SQLInterface` is using mainly the following words for it's non-major API actions:\r\n\r\n- `upsert`\r\n- `add`\r\n- `drop`\r\n- `get`\r\n- `serialize`\r\n- `canonicalize`\r\n- `make`\r\n- `migrate`\r\n\r\nI'd like to propose we tidy this up a bit and try to use something like CRUD naming to make each operation more atomic sounding in nature.\r\n\r\nI think this would make on-boarding for someone new simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/groove-armada-1/at-the-river-3", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/60", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/60/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/60/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/60", "id": 388830689, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3MDA2NzQ5", "number": 60, "title": "Feature/table name normalization", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-07T22:05:17Z", "updated_at": "2018-12-12T20:03:17Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "html_url": "https://github.com/datamill-co/target-postgres/pull/60", "diff_url": "https://github.com/datamill-co/target-postgres/pull/60.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/60.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/57\r\n\r\nHandles table name normalization:\r\n- invalid names get mapped to valid ones\r\n  - handles truncation\r\n- name collisions are dealt with by:\r\n  - truncating\r\n  - appending an incrementing number till no collision is detected\r\n\r\nAfter a table has been mapped, it continues to persist data to the mapped name.\r\n\r\nAll data is stored on the `root_table` so that `activate_version` remains simple. This can easily be documented in `RATIONALIZATIONS.md`.\r\n\r\n## Notes\r\n\r\nDOES NOT handle root table name mapping, but does put in place validation to make sure root table name is able to be persisted.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/limes-3/saucin-w-h-e-r-b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/57", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/57/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/57/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/57", "id": 387512759, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1OTg1NTc4", "number": 57, "title": "Feature/table name normalization", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T22:43:02Z", "updated_at": "2018-12-12T22:39:21Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/57", "html_url": "https://github.com/datamill-co/target-postgres/pull/57", "diff_url": "https://github.com/datamill-co/target-postgres/pull/57.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/57.patch"}, "body": "# WIP", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/59", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/59/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/59/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/59", "id": 388332805, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM2NjIyMTk3", "number": 59, "title": "Feature/table name normalization  non colliding", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-06T18:06:43Z", "updated_at": "2018-12-12T22:41:11Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/59", "html_url": "https://github.com/datamill-co/target-postgres/pull/59", "diff_url": "https://github.com/datamill-co/target-postgres/pull/59.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/59.patch"}, "body": "# Motivation\r\n\r\n#57 \r\n\r\nHandles table name normalization which _does not_ result in collisions.\r\n\r\nEasily reviewed commit by commit.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/limes-3/saucin-w-h-e-r-b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/63", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/63/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/63/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/63", "id": 388864369, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3MDMwOTQ2", "number": 63, "title": "Fix/nested tables", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-12-08T00:44:47Z", "updated_at": "2018-12-14T16:55:29Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "html_url": "https://github.com/datamill-co/target-postgres/pull/63", "diff_url": "https://github.com/datamill-co/target-postgres/pull/63.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/63.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/7\r\nhttps://github.com/datamill-co/target-postgres/issues/42\r\nhttps://github.com/datamill-co/target-postgres/issues/58\r\nhttps://github.com/datamill-co/target-postgres/issues/61\r\n\r\nNested table issues. Each known failing problem has been added as a commit.\r\n\r\n## Notes\r\n\r\nThis is pseudo-branched off of https://github.com/datamill-co/target-postgres/pull/60 due to needing more complex `db_cleanup` logic.\r\n\r\nAs such there _is_ a failing test kicking around in here which is _not_ related to the problems this pr will _ultimately_ be addressing.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/phoenix/heatwave", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/64", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/64/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/64/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/64", "id": 390897336, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM4NTYwNDYw", "number": 64, "title": "Fix/multiple types per column in single batch", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-13T22:59:43Z", "updated_at": "2018-12-14T17:36:03Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/64", "html_url": "https://github.com/datamill-co/target-postgres/pull/64", "diff_url": "https://github.com/datamill-co/target-postgres/pull/64.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/64.patch"}, "body": "# Motivation\r\n\r\nFollowup to #63.\r\n\r\nMultiple column types can come over in the same batch. To handle this, we need a different paradigm for identifying columns (same as how we identified tables), ie, use the _path_ to the column.\r\n\r\nEasiest to review commit by commit.\r\n\r\n## Suggested Musical Pairing\r\n\r\nCoffee shop.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/58", "id": 388320015, "node_id": "MDU6SXNzdWUzODgzMjAwMTU=", "number": 58, "title": "Denesting arrays assumes items are not literals", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 10, "created_at": "2018-12-06T17:31:29Z", "updated_at": "2018-12-14T17:41:55Z", "author_association": "MEMBER", "body": "At some points the code is assuming array items cannot be literals / scalar values. Currently it is failing to denest:\r\n\r\n```\r\n{\r\n    ...\r\n    \"categories\": [23, 22],\r\n    ...\r\n}\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/52", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/52/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/52/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/52", "id": 387375818, "node_id": "MDU6SXNzdWUzODczNzU4MTg=", "number": 52, "title": "Table Name Normalization", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-04T16:38:30Z", "updated_at": "2018-12-14T17:42:05Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nSplit out from: https://github.com/datamill-co/target-postgres/issues/18\r\n\r\nPresently when we DO NOT handle any canonicalization in regards to table names.\r\n\r\n## Notes\r\n\r\nWe could add metadata to the root table's metadata which maps _paths_ to a canonicalized table name.\r\n\r\nie, something in the metadata like:\r\n\r\n```py\r\n{'table_mappings':\r\n  {('root_table_NAME'): 'root_table_name',\r\n   ('root_table_NAME', 'sub_field_abc'): 'root_table_name__sub_field_abc',\r\n   ('root_table_NAME', 'sub_field_abc', 'sub_sub'): 'root_table_name__sub_field_abc__sub_sub',\r\n   ('root_table_NAME', 'suppper....lonngfield...thiswillbetruncated'): 'root_table_name__suppper....lonngfield',\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/peterbjornjohn/up-against-the-wall", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/44", "id": 384815148, "node_id": "MDU6SXNzdWUzODQ4MTUxNDg=", "number": 44, "title": "Column name mapping, invalid row detection", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 9, "created_at": "2018-11-27T14:16:16Z", "updated_at": "2018-12-14T17:42:47Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nIn #43 we continue to expound on what the `SQLInterface` will and _will not_ do. It is quite likely that we will end up bringing column mappings under its purview as column splitting etc. is likely a shared thing in most/all RDBMS we'll want to support (\ud83e\udd37\u200d\u2642\ufe0f). For the time being though, we fill up a `default_row` with `NULL_DEFAULT` values. If one of those fields which has been pre-filled, is not _allowed_ to be `null` in the `remote`, we will get a persistence error upon trying to load the data.\r\n\r\nWhile the above is somewhat _specific_ to the mentioned pr, this same logic exists in our current implementation.\r\n\r\n## Question\r\n\r\nDo we want to add record validation on values after they've been serialized?\r\n\r\nie, do we want to perform:\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/43/files#diff-5b906fece7e68cf803bb91e89b80047aR492\r\n\r\n```py\r\nDraft4Validator(remote_schema['schema'], ...).validate(row)\r\nserialized_rows.append(row)\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/cleacleamusic/bright-blue", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/42", "id": 384419821, "node_id": "MDU6SXNzdWUzODQ0MTk4MjE=", "number": 42, "title": "Nested values throw/are treated differently", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 4, "created_at": "2018-11-26T16:50:48Z", "updated_at": "2018-12-14T17:42:57Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nWhen denesting values/records, errors are thrown, and the internal mechanisms for denesting are handling data in inherently different ways.\r\n\r\nPresently I'm unsure whether this is _intentional_ or whether this is a \ud83d\udc1b.\r\n\r\n## Examples\r\n### `denest_record` vs `denest_subrecord\r\n\r\n#### Nested dictionaries\r\n\r\n```py\r\n[{'x0':\r\n    {'x1': {...}}}]\r\n```\r\n\r\nThrows invalid number of args exception originating from `denest_subrecord`.\r\n\r\nvs\r\n\r\n```py\r\n[{'x0':\r\n    {'x1': 123}}]\r\n```\r\n\r\nResults in:\r\n\r\n```py\r\n{'root_table__x0': [\r\n    {'x1': 123}\r\n  ]}\r\n```\r\n\r\n#### Nested nulls\r\n\r\n```py\r\n[{'x0':\r\n    {'x1': None}}]\r\n```\r\n\r\nResults in:\r\n\r\n```py\r\n{'root_table__x0': [\r\n    {'x1': None}\r\n  ]}\r\n```\r\n\r\nvs\r\n\r\n```py\r\n[{'x0': None}]\r\n```\r\n\r\nResults in:\r\n\r\n```py\r\n{'root_table': [\r\n    {}\r\n  ]}\r\n```\r\n\r\nFor this, there appears to be a discrepancy between how `denest_record` and `denest_subrecord` handle `None` values. This is _less_ of a problem and more of a \ud83d\ude15 when looking at the code. Especially because of the comment present only in `denest_record`:\r\n\r\n> \"## nulls mess up nested objects\"\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/tiga/tiga-the-martinez-brothers-aphex-n-girls?in=tiga/sets/tiga-the-martinez-brothers-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/66", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/66/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/66/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/66", "id": 391206024, "node_id": "MDU6SXNzdWUzOTEyMDYwMjQ=", "number": 66, "title": "Add Field Path to the Denested Column's Comment in PostgreSQL", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "open", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-14T17:48:22Z", "updated_at": "2018-12-14T17:48:22Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nWhen we denest a column and then handle things like naming collisions, you can end up with very confusing structures when trying to map it all back to the input data.\r\n\r\nTo aid in this, we could set some helpful string comments/descriptions onto each column's `COMMENT` in PostgreSQL. Something like:\r\n\r\n```\r\n# Singer Target Postgres\r\n\r\nThis table was denested from (t0, t1, t2, ...)\r\n\r\nThis column was denested from (c0, c1, ...)\r\n\r\nYou can join this back to it's original parent via:\r\n\r\nSOME-SQL-HERE\r\n```\r\n\r\netc.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/hiatus-kaiyote/nakamarra-1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:34.579669Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/68", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/68/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/68/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/68", "id": 391931972, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM5MzE2ODQ0", "number": 68, "title": "Housekeeping/cli tests", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-17T23:24:22Z", "updated_at": "2018-12-18T18:09:46Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "html_url": "https://github.com/datamill-co/target-postgres/pull/68", "diff_url": "https://github.com/datamill-co/target-postgres/pull/68.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/68.patch"}, "body": "# Motivation\r\n\r\nWe had a bug a while back related to cli not having testing around it. This PR adds in a few things:\r\n\r\n- full integration testing to and from postgres\r\n- caching for CI so that build times are faster\r\n\r\n## Notes\r\n\r\nThis pr does not _actually_ test the data that has been loaded, nor the schema. That was viewed as scope creep. For the time being this just dumps data into the circle ci artifacts.\r\n\r\nThis will not work in the main fork till a project level env var of `TAP_GITHUB_TOKEN` has been added.\r\n- https://github.com/singer-io/tap-github/blame/master/README.md#L34\r\n- https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/toroymoi/still-sound", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/69", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/69/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/69/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/69", "id": 392291255, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM5NTk2NTgx", "number": 69, "title": "Fix/remove collaborators from synced", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-18T19:00:26Z", "updated_at": "2018-12-19T17:43:22Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/69", "html_url": "https://github.com/datamill-co/target-postgres/pull/69", "diff_url": "https://github.com/datamill-co/target-postgres/pull/69.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/69.patch"}, "body": "# Motivation\r\n\r\nhttps://circleci.com/gh/datamill-co/target-postgres/108\r\n\r\nMaster is failing due to https://github.com/singer-io/tap-github/pull/39\r\n\r\n## Testing\r\n\r\nTo test this, I ssh'ed into the mentioned CCI container above and did the following:\r\n\r\n```\r\n... install vim...\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# vim properties.json \r\n## Updated properties to selected: false for Collaborators\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# tap-github --config config.json --properties properties.json > /code/artifacts/data/tap\r\n...\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# echo $?\r\n0\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/littledragon/lover-chanting", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/71", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/71/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/71/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/71", "id": 393634103, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQwNjEwNDg2", "number": 71, "title": "Performance/singer stream retain latest records only", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-22T02:08:48Z", "updated_at": "2018-12-24T15:42:25Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/71", "html_url": "https://github.com/datamill-co/target-postgres/pull/71", "diff_url": "https://github.com/datamill-co/target-postgres/pull/71.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/71.patch"}, "body": "# Motivation\r\n\r\nWhile refactoring `target-postgres` to make addition of more dialects simpler, I noticed that the Singer Stream could easily do more with versions etc., and make the interface for writing a batch of data to remote much simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/miikesnow/silvia", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/73", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/73/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/73/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/73", "id": 394427757, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQxMTc4Mzkz", "number": 73, "title": "Housekeeping/table metadata documentation", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-27T15:50:29Z", "updated_at": "2018-12-28T17:27:05Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/73", "html_url": "https://github.com/datamill-co/target-postgres/pull/73", "diff_url": "https://github.com/datamill-co/target-postgres/pull/73.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/73.patch"}, "body": "# Motivation\r\n\r\nPresently our TableMetadata is...a black hole of understanding...which isn't great.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sejvasound/live-at-alley-cat-music-club-11918", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/70", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/70/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/70/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/70", "id": 393586119, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQwNTczOTEy", "number": 70, "title": "Fix/old table versions overwrite current table", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-21T20:46:01Z", "updated_at": "2019-01-04T22:09:28Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/70", "html_url": "https://github.com/datamill-co/target-postgres/pull/70", "diff_url": "https://github.com/datamill-co/target-postgres/pull/70.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/70.patch"}, "body": "# Motivation\r\n\r\nWhile working on some refactoring/feature work I stumbled across an oddity in dealing with table versions. Presently, you can blow away _all_ current data if a message for `ACTIVATE_VERSION` comes across which is for an older table version.\r\n\r\nIn reading up on `ACTIVATE_VERSION` from Singer, I do _not_ think this is the intention of this message.\r\n\r\n## Suggested Musical\r\n\r\nhttps://soundcloud.com/thomyorkeofficial/suspirium", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/76", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/76/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/76/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/76", "id": 395737607, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQyMTIxMTA3", "number": 76, "title": "Feature/sql interface logger", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-01-03T21:52:59Z", "updated_at": "2019-01-04T22:09:45Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "html_url": "https://github.com/datamill-co/target-postgres/pull/76", "diff_url": "https://github.com/datamill-co/target-postgres/pull/76.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/76.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/74\r\n\r\n## Notes\r\n\r\nWhile working on this, I found a \"fun\" bug in the form of pk type changes. I addressed this in the last two commits. The first to add in some failing tests, then the next to address it. It was a very simple problem.\r\n\r\nGenerated logging:\r\n\r\n```\r\nINFO Sending version information to singer.io. To disable sending anonymous usage data, set the config parameter \"disable_collection\" to true\r\nINFO PostgresTarget created with established connection: `host=localhost port=5432 dbname=target_postgres_test user=postgres`, PostgreSQL schema: `public`\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nINFO Writing batch with 8 records for `stargazers` with `key_properties`: `['user_id']`\r\nINFO Writing table batch schema for `('stargazers',)`\r\nINFO Table batch schema written in 9.302 millis for `('stargazers',)`\r\nINFO Writing table batch with 8 rows for `('stargazers',)`\r\nINFO Table batch with 8 rows wrote 8 rows in 14.444 millis for ('stargazers',)\r\nINFO Batch with 8 records wrote 8 rows in 24.122 millis for `stargazers`\r\nINFO Writing batch with 2 records for `assignees` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('assignees',)`\r\nINFO Table batch schema written in 7.503 millis for `('assignees',)`\r\nINFO Writing table batch with 2 rows for `('assignees',)`\r\nINFO Table batch with 2 rows wrote 2 rows in 9.543 millis for ('assignees',)\r\nINFO Batch with 2 records wrote 2 rows in 17.352 millis for `assignees`\r\nINFO Writing batch with 15 records for `issues` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('issues',)`\r\nINFO Table batch schema written in 24.439 millis for `('issues',)`\r\nINFO Writing table batch with 15 rows for `('issues',)`\r\nINFO Table batch with 15 rows wrote 15 rows in 37.854 millis for ('issues',)\r\nINFO Writing table batch schema for `('issues', 'labels')`\r\nINFO Table batch schema written in 12.895999999999999 millis for `('issues', 'labels')`\r\nINFO Writing table batch with 7 rows for `('issues', 'labels')`\r\nINFO Table batch with 7 rows wrote 7 rows in 9.774 millis for ('issues', 'labels')\r\nINFO Batch with 15 records wrote 22 rows in 86.48599999999999 millis for `issues`\r\nINFO Writing batch with 106 records for `comments` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('comments',)`\r\nINFO Table batch schema written in 18.346 millis for `('comments',)`\r\nINFO Writing table batch with 106 rows for `('comments',)`\r\nINFO Table batch with 106 rows wrote 106 rows in 95.837 millis for ('comments',)\r\nINFO Batch with 106 records wrote 106 rows in 117.637 millis for `comments`\r\nINFO Writing batch with 46 records for `pull_requests` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('pull_requests',)`\r\nINFO Table batch schema written in 10.489 millis for `('pull_requests',)`\r\nINFO Writing table batch with 46 rows for `('pull_requests',)`\r\nINFO Table batch with 46 rows wrote 46 rows in 44.181 millis for ('pull_requests',)\r\nINFO Batch with 46 records wrote 46 rows in 55.541 millis for `pull_requests`\r\nINFO Writing batch with 74 records for `review_comments` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('review_comments',)`\r\nINFO Table batch schema written in 22.326999999999998 millis for `('review_comments',)`\r\nINFO Writing table batch with 74 rows for `('review_comments',)`\r\nINFO Table batch with 74 rows wrote 74 rows in 86.96 millis for ('review_comments',)\r\nINFO Batch with 74 records wrote 74 rows in 110.857 millis for `review_comments`\r\nINFO Writing batch with 271 records for `commits` with `key_properties`: `['sha']`\r\nINFO Writing table batch schema for `('commits',)`\r\nINFO Table batch schema written in 11.918 millis for `('commits',)`\r\nINFO Writing table batch with 271 rows for `('commits',)`\r\nINFO Table batch with 271 rows wrote 271 rows in 166.243 millis for ('commits',)\r\nINFO Writing table batch schema for `('commits', 'parents')`\r\nINFO Table batch schema written in 10.906 millis for `('commits', 'parents')`\r\nINFO Writing table batch with 331 rows for `('commits', 'parents')`\r\nINFO Table batch with 331 rows wrote 331 rows in 24.37 millis for ('commits', 'parents')\r\nINFO Batch with 271 records wrote 602 rows in 220.356 millis for `commits`\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/planned_obsolescence/everybodys-got-to-learn", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/77", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/77/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/77/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/77", "id": 396204911, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQyNDYzNTAx", "number": 77, "title": "Housekeeping: Remove unused argument from PostgresTarget", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-05T22:15:37Z", "updated_at": "2019-01-09T15:14:48Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/77", "html_url": "https://github.com/datamill-co/target-postgres/pull/77", "diff_url": "https://github.com/datamill-co/target-postgres/pull/77.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/77.patch"}, "body": "# Motivation\r\n\r\nExtra `LOGGER` argument still being passed into `PostgresTarget`.\r\n\r\n## Suggested Musical Pairing\r\n\r\nSeagulls.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/74", "id": 395648531, "node_id": "MDU6SXNzdWUzOTU2NDg1MzE=", "number": 74, "title": "Logging", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2019-01-03T16:54:51Z", "updated_at": "2019-01-09T15:54:54Z", "author_association": "MEMBER", "body": "Currently, target-postgres is a bit of a black box. We can't tell if it's progressing through the input Singer stream.\r\n\r\nWe want to:\r\n- Establish logging infrastructure within target-postgres so that code at any point can access the logger\r\n- Log each batch with stream name, table name, and record count\r\n- Log the host and database connection information, of course nothing sensitive (like password)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/6", "id": 375192519, "node_id": "MDU6SXNzdWUzNzUxOTI1MTk=", "number": 6, "title": "Add to Pypi", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 3, "created_at": "2018-10-29T20:03:28Z", "updated_at": "2019-01-09T15:55:14Z", "author_association": "MEMBER", "body": "[https://github.com/statsbotco/target-postgres](https://github.com/statsbotco/target-postgres) has taken the pypi project [target-postgres](https://pypi.org/project/target-postgres/) though hasn't been updated in a few months and has a blank readme. Maybe the author would be willing to give it up?\r\n\r\nAn alternative may be `singer-target-postgres`", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/72", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/72/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/72/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/72", "id": 394417242, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQxMTcwNzM0", "number": 72, "title": "Feature/sql base tests", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-27T15:06:35Z", "updated_at": "2019-01-09T23:28:26Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/72", "html_url": "https://github.com/datamill-co/target-postgres/pull/72", "diff_url": "https://github.com/datamill-co/target-postgres/pull/72.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/72.patch"}, "body": "# Motivation\r\n\r\nIn order to split the codebase between the more generic parts and the more concrete Postgres parts, we will need testing on more than just the results sitting in the target itself.\r\n\r\nTo do this, split up:\r\n\r\n#### `__init__` into two halves\r\n\r\n1. `sql_main` which is concerned about things like handling `line`s from a `Stream`, `Buffer`ing, high level/early error detection, and invoking the necessary values from a provided `Target`\r\n    - this allows for using the current `test_postgres` tests for a simple lightweight `FakeTarget`\r\n1. `__init__` which is purely concerned about making a `psycopg2.connection`, a `PostgresTarget`, and invoking the entrypoints/public functions from `sql_main`\r\n\r\n#### `test_postgres` into three parts\r\n\r\n1. `test_sql_main`:  tests about the buffering, high level error issues, singer data collection, etc.\r\n1. `test_sql_base`: tests about end schema, tests about general record batch shapes\r\n1. `test_postgres`: Tests which are either specifically about Postgres related things or are good edge case/load testing type things\r\n\r\n## Notes\r\n\r\n- I wanted to share some of the column assertions stuff between `test_postgres` and `test_sql_base`,  to make the refactoring of `test_postgres` clearer. ie, I have a test over here, I move it over here, and this change is easily visually diffable. To do this I piggybacked on the `fixtures` module. BUT in order to get assertion rewriting to work (to make the error/failure messages better) I had to make our tests an actual Python Package/module/whatever. ie, create the `__init__.py` file, and call some things from there.\r\n\r\n## Further Work\r\n### More classes and modules\r\n\r\nFrom this pr, I think we are now in a natural place to make classes for things like, `Mapping`/`TableSchema`/`TableBatch`, and separate modules for the static portions of `SQLInterface`. ie, all of the schema and record denesting.\r\n\r\nAll classes split out in this way should have a `from_json` and `to_json` method on them which does validation so that users can have a data first way to create them etc. (ie, I can let the class handle parsing and serialization rather than\r\n\r\nOnce we have these things setup, things like versioning the metadata currently stored in the `text` comments of tables will be more straightforward. Additionally, many of the tests we currently have can be more specific about what they're looking for, rather than testing things like denesting AND persisting AND errors AND...\r\n\r\n### Testing Suite\r\n\r\nSomething I have seen be quite useful in other libraries/tools/etc., is providing things like mocks/fakes for end users to be able to gauge their implementations against. The `FakeLastWriteWinsTarget` is something which could be really helpful to other developers outside of the eventual `sql-target-tools-whatever-its-being-called-this-week-repo`. Same with all of the `FakeStream` fixtures etc.\r\n\r\nNot to mention, we will most likely want a way to be able to share these things between the eventual split repos.\r\n\r\n## Testing\r\n\r\n- [x] test singer data collection, and then disable it so that we don't have so many unnecessary log statements about it failing\r\n- [x] create lightweight `FakeTarget`\r\n- [x] remove _schema only_ tests from `test_postgres` as they don't provide _much_ value and are slow\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sejvasound/live-at-alley-cat-music-club-11918", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/65", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/65/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/65/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/65", "id": 391204997, "node_id": "MDU6SXNzdWUzOTEyMDQ5OTc=", "number": 65, "title": "`SQLInterface`: Logger, exceptions", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "open", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-12-14T17:44:58Z", "updated_at": "2019-01-10T17:02:32Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\n`SQLInterface` has no `Error` class, nor does it have a Logger. Both of these things are relatively simple, and would make surfacing problems to users much simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/kevinmorby/beautiful-strangers", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/78", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/78/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/78/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/78", "id": 397423084, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQzMzczODcz", "number": 78, "title": "Housekeeping: CI CD", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-09T15:29:36Z", "updated_at": "2019-01-11T02:10:35Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/78", "html_url": "https://github.com/datamill-co/target-postgres/pull/78", "diff_url": "https://github.com/datamill-co/target-postgres/pull/78.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/78.patch"}, "body": "# Motivation\r\n\r\nWe're setting up PyPi and need to start tagging our releases etc.\r\n\r\n- All CI jobs will now `build` a release that _could_ be released. This catches bugs with our builds early\r\n- Any tags which are pushed to GitHub which are similar to `v0.1.5` etc., will:\r\n  - validate that the tag matches the `setup.py` version\r\n  - make a test-release in test.pypi\r\n  - wait for approval from a member of Datamill\r\n  - release to PyPi\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lean-quatifah/yas-indeed", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/79", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/79/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/79/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/79", "id": 397603974, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQzNTEzNDk4", "number": 79, "title": "Feature/target tools", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-09T23:20:50Z", "updated_at": "2019-01-11T02:11:41Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/79", "html_url": "https://github.com/datamill-co/target-postgres/pull/79", "diff_url": "https://github.com/datamill-co/target-postgres/pull/79.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/79.patch"}, "body": "# Motivation\r\n\r\nStart `target-tools`.\r\n\r\nWhile working on #72 a discussion arose about longer term goals and interfaces etc. This pr seeks to split out the smallest chunk of work done in #72, while tidying up the high level interface.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/jorge-ben-jor/mama-africa?in=jorge-ben-jor/sets/jorge-ben-jor-icollection", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/81", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/81/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/81/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/81", "id": 397948614, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQzNzc5MzM2", "number": 81, "title": "Refactor/denest as module", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-10T18:01:18Z", "updated_at": "2019-01-11T20:18:09Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/81", "html_url": "https://github.com/datamill-co/target-postgres/pull/81", "diff_url": "https://github.com/datamill-co/target-postgres/pull/81.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/81.patch"}, "body": "# Motivation\r\n\r\nStart `denest`.\r\n\r\nWhile working on #72 a discussion arose about longer term goals and interfaces etc. This pr seeks to split out the denesting logic so that it can be tested independently etc.\r\n\r\n## Notes\r\n\r\nRelies upon the work done in: https://github.com/datamill-co/target-postgres/pull/79\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/hotchip/flutes", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/61", "id": 388839887, "node_id": "MDU6SXNzdWUzODg4Mzk4ODc=", "number": 61, "title": "Stabilize V0 of `target-postgres`", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2018-12-07T22:42:13Z", "updated_at": "2019-01-15T02:33:37Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\n`Target-Postgres` has been changing dramatically for some time. While _many_ of these changes are bug fixes, or straight features, many are modifying the underlying metadata/schema and are not purely \"breaking\" from a \"can I rebase my branch onto this\" standpoint.\r\n\r\nAs such, I'm proposing a new Milestone/Issue to gather up what bugs and housekeeping we want to get in place before going under a semvar versioning guide for ***persisted metadata/schema/data ONLY***. ie, we still will not have to play nice with those who wish to write _code_ on top of our repo, but we _will_ play nice with future versions of our code and we _will_ support the data which is persisted by v0.\r\n\r\n## Notes\r\n\r\nPlease understand that while I am in full support of making life simpler for other devs to work on top of our work, I'm much more concerned about Datamill or someone trying to use this and then getting a tonne of data moved over...which then has to be blown away because we don't know how to migrate etc.\r\n\r\n## Outstanding Work\r\n\r\nOn the top of my mind, the work I think that needs to be done:\r\n\r\n- [ ] in flight feature work:\r\n  - [ ] https://github.com/datamill-co/target-postgres/issues/52\r\n- [ ] refactor table mappings and column mappings to use similar/same structure\r\n  - [ ] #44 \r\n- [ ] nested support as noted in:\r\n  - [ ] #42 \r\n  - [ ] #58 \r\n- [ ] Better testing\r\n  - [ ] Full integration test against Github/BigCommerce/whatever in CI (could be low hanging fruit for bugs etc.)\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/hotchip/huarache-lights", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/82", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/82/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/82/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/82", "id": 398440551, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ0MTQwNjUz", "number": 82, "title": "Feature/postgres 8 4 compatible code", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-11T20:26:59Z", "updated_at": "2019-01-15T19:11:01Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/82", "html_url": "https://github.com/datamill-co/target-postgres/pull/82", "diff_url": "https://github.com/datamill-co/target-postgres/pull/82.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/82.patch"}, "body": "# Motivation\r\n\r\nIn splitting the `target-redshift` code out, there are some Postgres specific changes which can be made to provide a simpler interface for Redshift. `DECISIONS` comment is posted in full below:\r\n\r\n## DECISION\r\n\r\n### Queries\r\n\r\n#### What\r\n\r\n- When we write SQL at any given point, we have the option to use \"latest\" PostgreSQL features\r\n- We opt for features available from PostgreSQL 8.4.22 forward\r\n- We ***DO NOT*** support PostgreSQL 8.4.22\r\n  - any features/bugs issues based on this will be weighed against this decision as far as effort to benefit\r\n\r\n#### Why\r\n\r\n- Supporting multiple versions of PostgreSQL has _thus far_ been fairly straightforward by adhering to only query support available in the _oldest_ version of supported PostgreSQL\r\n- By doing this, we only have one main code base, instead of many fractured versions which all employ the latest/greatest system functions/methods/tables/information schemas available\r\n- By using 8.4.22, supporting [Redshift](https://github.com/datamill-co/target-redshift) is made simpler\r\n  - Redshift was originally split from [PostgreSQL 8.0.2](https://docs.aws.amazon.com/redshift/latest/dg/c_redshift-and-postgres-sql.html)\r\n  - At some point, a _lot_ of work was done by AWS to make Redshift a \"simple fork\" of PostgreSQL 8.4\r\n- We do not _support_ PostgreSQL 8.4 simply because PostgreSQL does not support it anymore\r\n  - Our _only_ benefit to making 8.4 query language our target is Redshift\r\n  - When a new supported version of PostgreSQL comes along, and we undertake the effort to support it herein, if supporting it is simpler to do by breaking 8.4, we will move the necessary logic to [target-redshift](https://github.com/datamill-co/target-redshift)\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/bibio/night-falls?in=bibio/sets/the-serious-ep", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/83", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/83/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/83/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/83", "id": 398485550, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ0MTc1NTcz", "number": 83, "title": "Refactor: Remove SQL notions from json_schema, embed code where it's \u2026", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-11T23:13:39Z", "updated_at": "2019-01-15T19:11:18Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/83", "html_url": "https://github.com/datamill-co/target-postgres/pull/83", "diff_url": "https://github.com/datamill-co/target-postgres/pull/83.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/83.patch"}, "body": "# Motivation\r\n\r\nIn splitting out Redshift, there's some differing logic in Redshift around maximum length of a column. Since Redshift does _not_ have `TEXT` column types, we'll need to be able to override this in https://github.com/datamill-co/target-redshift.\r\n\r\nBefore cutting a new version of `target-postgres`, I wanted to get this change in place, since it'll effectively render `target-redshift` dead in the water till it happens.\r\n\r\nAdditionally, the `json_schema` module is mainly helper functions for dealing with `JSONSchema`. It doesn't _need_ to know _anything_ about SQL.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sarah-jarosz-official/ring-them-bells?in=sarah-jarosz-official/sets/follow-me-down-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/80", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/80/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/80/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/80", "id": 397927655, "node_id": "MDU6SXNzdWUzOTc5Mjc2NTU=", "number": 80, "title": "Empty `key_properties` not tested", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129281, "node_id": "MDU6TGFiZWw4NjExMjkyODE=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-01-10T17:05:20Z", "updated_at": "2019-01-15T19:54:39Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nI _think_ there is a bug for any stream which is nested (ie, will result in multiple SQL Tables) which does not have `key_properties` set. The bug specifically is that I don't think any of the resulting child tables will have _any_ keys which would mean the data is disconnected in PostgreSQL.\r\n\r\nThe goal of this issue is to add an explicit test for this case, and then if it's broken...fix it...\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/maverick-sabre/come-fly-away-1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/84", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/84/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/84/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/84", "id": 399850768, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ1MTc5NjI3", "number": 84, "title": "Bump/dependencies 2019 01 16", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-16T15:05:36Z", "updated_at": "2019-01-16T16:17:06Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/84", "html_url": "https://github.com/datamill-co/target-postgres/pull/84", "diff_url": "https://github.com/datamill-co/target-postgres/pull/84.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/84.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/67\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/connanmockasin/feelin-lovely", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/67", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/67/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/67/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/67", "id": 391855993, "node_id": "MDU6SXNzdWUzOTE4NTU5OTM=", "number": 67, "title": "Bump dependencies", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129277, "node_id": "MDU6TGFiZWw4NjExMjkyNzc=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/bug", "name": "bug", "color": "d73a4a", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2018-12-17T19:25:23Z", "updated_at": "2019-01-16T16:17:57Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nSaw the following while working on getting some CLI tests in place:\r\n\r\n```\r\ntarget-postgres 0.0.1 has requirement singer-python==5.0.12, but you'll have singer-python 5.3.3 which is incompatible.\r\nInstalling collected packages: pytz, singer-python, idna, certifi, chardet, urllib3, requests, tap-github\r\n...\r\n```\r\n\r\nI'd recommend a few things:\r\n1. get some dependencies checker setup for our CI. Something that could be hooked into Github Checks would be best\r\n2. Bump all deps to latest. At the very least the `singer-python` dependency\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/labi-siffre/i-got-the-2006-remastered", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/85", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/85/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/85/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/85", "id": 399889984, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ1MjEwMTQy", "number": 85, "title": "Bump: target-postgres 0.1.0 -> 0.1.1", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-16T16:26:47Z", "updated_at": "2019-01-16T16:27:03Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/85", "html_url": "https://github.com/datamill-co/target-postgres/pull/85", "diff_url": "https://github.com/datamill-co/target-postgres/pull/85.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/85.patch"}, "body": "# Motivation\r\n\r\nPrepping for releasing 0.1.1\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/saintmotel/saint-motel-midnight-movies-1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/86", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/86/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/86/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/86", "id": 399897598, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ1MjE2MDk2", "number": 86, "title": "Fix: Release logic broken", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-16T16:43:28Z", "updated_at": "2019-01-16T16:44:08Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/86", "html_url": "https://github.com/datamill-co/target-postgres/pull/86", "diff_url": "https://github.com/datamill-co/target-postgres/pull/86.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/86.patch"}, "body": "# Motivation\r\n\r\nReleasing is currently broken due to a small bug in checking versions vs tags.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/starfucker_usa/rawnald-gregory-erickson-the-3", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/87", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/87/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/87/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/87", "id": 400861324, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ1OTUxMDQ4", "number": 87, "title": "Feature: update_sql does not depend on header ordering", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-18T19:37:27Z", "updated_at": "2019-01-18T22:53:54Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/87", "html_url": "https://github.com/datamill-co/target-postgres/pull/87", "diff_url": "https://github.com/datamill-co/target-postgres/pull/87.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/87.patch"}, "body": "# Motivation\r\n\r\nWhile working on Target-Redshift, I stumbled across some weirdness in the return values from our `get_table_schema` implementation and the `_get_update_sql` implementation.\r\n\r\nSpecifically, this has to do ***SOLELY WITH REDSHIFT***\r\n\r\nThis is the result of our underlying query for `get_table_schema`:\r\n\r\n```sql\r\ndev=> SELECT column_name, data_type, is_nullable FROM information_schema.columns where table_schema = 'public' and table_name = 'cats';\r\n                  column_name                  |        data_type         | is_nullable \r\n-----------------------------------------------+--------------------------+-------------\r\n _sdc_batched_at                               | timestamp with time zone | YES\r\n _sdc_received_at                              | timestamp with time zone | YES\r\n adoption__adopted_on                          | timestamp with time zone | YES\r\n pattern                                       | character varying        | YES\r\n paw_colour                                    | character varying        | YES\r\n name                                          | character varying        | YES\r\n _sdc_table_version                            | bigint                   | YES\r\n _sdc_sequence                                 | bigint                   | YES\r\n age                                           | bigint                   | YES\r\n paw_size                                      | bigint                   | YES\r\n id                                            | bigint                   | YES\r\n adoption__was_foster                          | boolean                  | YES\r\n flea_check_complete                           | boolean                  | YES\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | YES\r\n(14 rows)\r\n```\r\n\r\nThis is the result of `\\d` on the _same table_:\r\n\r\n```sql\r\ndev=> \\d cats\r\n                                 Table \"public.cats\"\r\n                    Column                     |           Type           | Modifiers \r\n-----------------------------------------------+--------------------------+-----------\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | \r\n id                                            | bigint                   | \r\n name                                          | character varying(65535) | \r\n paw_size                                      | bigint                   | \r\n paw_colour                                    | character varying(65535) | \r\n flea_check_complete                           | boolean                  | \r\n pattern                                       | character varying(65535) | \r\n age                                           | bigint                   | \r\n adoption__adopted_on                          | timestamp with time zone | \r\n adoption__was_foster                          | boolean                  | \r\n _sdc_received_at                              | timestamp with time zone | \r\n _sdc_sequence                                 | bigint                   | \r\n _sdc_table_version                            | bigint                   | \r\n _sdc_batched_at                               | timestamp with time zone | \r\n```\r\n\r\nThe columns are in a different order. Updating our original query:\r\n\r\n```sql\r\ndev=> SELECT column_name, data_type, is_nullable, ordinal_position FROM information_schema.columns where table_schema = 'public' and table_name = 'cats';\r\n                  column_name                  |        data_type         | is_nullable | ordinal_position \r\n-----------------------------------------------+--------------------------+-------------+------------------\r\n _sdc_batched_at                               | timestamp with time zone | YES         |               14\r\n _sdc_received_at                              | timestamp with time zone | YES         |               11\r\n adoption__adopted_on                          | timestamp with time zone | YES         |                9\r\n pattern                                       | character varying        | YES         |                7\r\n paw_colour                                    | character varying        | YES         |                5\r\n name                                          | character varying        | YES         |                3\r\n _sdc_table_version                            | bigint                   | YES         |               13\r\n _sdc_sequence                                 | bigint                   | YES         |               12\r\n age                                           | bigint                   | YES         |                8\r\n paw_size                                      | bigint                   | YES         |                4\r\n id                                            | bigint                   | YES         |                2\r\n adoption__was_foster                          | boolean                  | YES         |               10\r\n flea_check_complete                           | boolean                  | YES         |                6\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | YES         |                1\r\n(14 rows)\r\n```\r\n\r\n## The Problem\r\n\r\n```py\r\n>           cur.execute(update_sql)\r\nE           psycopg2.ProgrammingError: column \"_sdc_target_redshift_create_table_placeholder\" is of type boolean but expression is of type timestamp with time zone\r\nE           HINT:  You will need to rewrite or cast the expression.\r\n```\r\n\r\n> The target column names can be listed in any order. If no list of column names is given at all, the default is all the columns of the table in their declared order\r\n\r\nhttps://www.postgresql.org/docs/8.4/sql-insert.html\r\n\r\nSo when we do our update sql, we rely implicitly upon the underlying _order_ of some lists and ordered dicts which are passed down from well above. The ordering of those dicts relies upon the arbitrary ordering of results returned by our get schema queries.\r\n\r\nNone of this is set in stone, and inherently, it's quite brittle. While these queries and code _seem_ to line up well in PostgreSQL, they aren't guaranteed to. As such, when Redshift returns the results, and they are not in our expected ordering, we end up building an insertion statement which does not have columns lined up correctly.\r\n\r\n## Proposed Solution\r\n\r\nA simple solution, which has been implemented here, is to simply add the columns we are to `INSERT ... SELECT ...` to our `INSERT INTO...` statement. This removes ambiguity from our code, and also makes the inherent coupling between these functions much simpler.\r\n\r\n## Further Concerns\r\n\r\nI spent a while trying to come up with a good way to reproduce this as a failure in PostgreSQL so that we have a \ud83d\udc1b to fix. Unfortunately, this took so long and no real progress was made, that I gave up. I _think_ the argument can be made that this is _fine_ and that the spirit of this repo is not being violated because this is not changing _anything_ for our Postgres users, and this is still compliant code/provides a benefit for our Redshift users.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/starfucker_usa/rawnald-gregory-erickson-the-3", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/88", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/88/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/88/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/88", "id": 400920799, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ1OTk2OTAx", "number": 88, "title": "Bump: target-postgres 0.1.1 -> 0.1.2", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-18T22:57:40Z", "updated_at": "2019-01-18T22:57:50Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/88", "html_url": "https://github.com/datamill-co/target-postgres/pull/88", "diff_url": "https://github.com/datamill-co/target-postgres/pull/88.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/88.patch"}, "body": "# Motivation\r\n\r\nPrepping release of `0.1.2`\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/idris-muhammad-official/could-heaven-ever-be-like", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/90", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/90/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/90/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/90", "id": 401980030, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ2NzcyNzEx", "number": 90, "title": "Bump: psycopg2 2.7.6 -> 2.7.7", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-22T22:20:33Z", "updated_at": "2019-01-22T22:45:57Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/90", "html_url": "https://github.com/datamill-co/target-postgres/pull/90", "diff_url": "https://github.com/datamill-co/target-postgres/pull/90.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/90.patch"}, "body": "# Motivation\r\n\r\nWhile working on a pre-release for `0.1.3`, `psycopg2` released a later version. Seems like as good a time as any to bump this dependency.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/craftspells/after-the-moment-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/89", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/89/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/89/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/89", "id": 401150148, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ2MTQxNjE5", "number": 89, "title": "Fix/datetime split columns", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-20T23:12:13Z", "updated_at": "2019-01-25T17:59:53Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "html_url": "https://github.com/datamill-co/target-postgres/pull/89", "diff_url": "https://github.com/datamill-co/target-postgres/pull/89.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/89.patch"}, "body": "# Motivation\r\n\r\nIf a schema is provided which has a column which is of type `string`, and then later, a new schema is provided which has the same column but of type `date-time`, we do not split the column, but rather place all values of the date-time into the string column.\r\n\r\nLuckily, if the schema we first see is of type `date-time` then the latter one is `string`, our upload will fail and the bug will be detected. Provided that the string values we have ***ARE NOT*** _only_ values which are also able to be processed by `arrow`:\r\n\r\n```py\r\n>>> arrow.get('hello-world')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/api.py\", line 22, in get\r\n    return _factory.get(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/factory.py\", line 174, in get\r\n    dt = parser.DateTimeParser(locale).parse_iso(arg)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/parser.py\", line 119, in parse_iso\r\n    return self._parse_multiformat(string, formats)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/parser.py\", line 286, in _parse_multiformat\r\n    raise ParserError('Could not match input to any of {} on \\'{}\\''.format(formats, string))\r\narrow.parser.ParserError: Could not match input to any of ['YYYY-MM-DD', 'YYYY/MM/DD', 'YYYY.MM.DD', 'YYYY-MM', 'YYYY/MM', 'YYYY.MM', 'YYYY', 'YYYY', 'YYYY'] on 'hello-world'\r\n```\r\n\r\nAs such, date-time and String columns collide irrevocably. The problem here is twofold:\r\n- we have no shorthand for date-time values\r\n- we do not store information enough to determine that a persisted column mapping is date-time vs string\r\n\r\n## How was this found?\r\n\r\nWhile working on `target-redshift`, I had not yet implemented `make_column_nullable`. This was due to forcing _all_ columns to be nullable. However, whenever a test performed an upsert, the column was _made nullable_. This is _not_ an operation inherently _allowed_ by Redshift. As such, the test would fail. It was only after digging into what was going on that I was able to track down what was happening.\r\n\r\n## Specific Issue\r\n\r\n1. Columns which are date-time do _not_ contain the inherent metadata in our json blobs to detect that they _are_ in fact datetimes\r\n    - this is mitigate-able as we still have date-time information in the schema of the column itself\r\n    - could write a simple migration to do this\r\n1. Columns which streamed _first_ as `string` ***THEN LATER*** as `date-time` will remain `string` forever\r\n    - ie, all date-time values will be uploaded as strings\r\n    - this is a current, albeit incredibly specific, bug\r\n    - we cannot _really_ help here as any migration to place data into the correct column would need to regex parese each value to see if it's able to be translated into a valid `date-time` etc.\r\n    - even if we parse those values, they may have _actually been strings all along_\r\n1. All columns which first streamed as `date-time` ***THEN LATER*** as `string` will presently fail hard. As such, we do not need to worry about this case since anything like this would result in no data persisted and an issue being created herein\r\n1. Split/Collision columns where one is a `date-time` (and no strings are present etc.) will be postfixed with `__s` ***NOT*** with anything intelligible to represent it as a `date-time`...\r\n    - the argument can probably be made many ways here that this is a bug, or a feature\r\n    - I would vote for not touching the naming of _current_ columns, but rather make it so that all `date-time` split/collision columns going forward be postfixed with `__t`\r\n        - not `__d` as that could be confused with `decimal` or `double`...maybe?\r\n\r\n## Proposal\r\n\r\nFocus on mitigating (1) from above. ie, upgrading _existing schemas_ to have date-time information in a table.\r\n\r\n1. start placing `schema-version` (or something) into metadata for a table.\r\n1. any tables which _do not_ have `schema-version` are assumed to be from the first iteration, and we proceed to upgrade them\r\n    1. warn that an old table has been detected and that we're attempting to auto-upgrade\r\n    1. upgrade all `date-time` columns to make sure that their metadata has the information necessary to distinguish them from `string`\r\n    1. add `schema-version`\r\n\r\n- Add in test which random/generatively checks combinations of column splits and uploads to make sure we can't have this problem in the future.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/connanmockasin/quadropuss-island-1?in=connanmockasin/sets/forever-dolphin-love-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/92", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/92/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/92/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/92", "id": 403323465, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ3ODA2MDQz", "number": 92, "title": "Feature/loggging of schema changes", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-25T20:36:10Z", "updated_at": "2019-01-28T01:08:37Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/92", "html_url": "https://github.com/datamill-co/target-postgres/pull/92", "diff_url": "https://github.com/datamill-co/target-postgres/pull/92.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/92.patch"}, "body": "# Motivation\r\n\r\nIssues posted by users of this codebase sometimes have a lack of usable logs present. Additionally, when testing, or debugging in production, more fine grained information can be quite useful.\r\n\r\n## Notes\r\n\r\nThis is all opt-in-enabled by setting the new config option: `logging_level`, to `DEBUG` or lower.\r\n\r\nThis pr adds special logging with durations for:\r\n\r\n### `sql_base.upsert_table_helper`\r\n\r\nEach decision which modifies the table in some manner is logged:\r\n\r\n```\r\nINFO Table Schema Change [`root`.`('id',)`:`id`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_received_at',)`:`_sdc_received_at`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_sequence',)`:`_sdc_sequence`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_table_version',)`:`_sdc_table_version`] New column (took 2 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_batched_at',)`:`_sdc_batched_at`] New column (took 2 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type__i`] Splitting changing_literal_type into changing_literal_type__f and changing_literal_type__i. New column matches existing column path, but the types are incompatible. (took 6 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type__b`] Adding new column to split column ('changing_literal_type',). New column matches existing column's path, but no types were compatible. (took 1 millis)\r\n```\r\n\r\n```\r\nINFO Table Schema Change [`cats`.`('id',)`:`id`] New column (took 2 millis)\r\nINFO Table Schema Change [`cats`.`('name',)`:`name`] New column (took 6 millis)\r\nINFO Table Schema Change [`cats`.`('name',)`:`name`] Made existing column nullable. New column is nullable, existing column is not (took 3 millis)\r\n```\r\n\r\n### `psycopg2.connection`/`psycopg2.cursor` queries\r\n\r\nEvery query run will output logs similar to:\r\n\r\n```\r\nextras.py                  422 DEBUG    0 millis spent executing: b'ALTER TABLE \"public\".\"cats\" ADD COLUMN \"age\" bigint;'\r\nextras.py                  422 DEBUG    1 millis spent executing: b\"\\n            SELECT EXISTS (\\n                SELECT 1 FROM pg_tables\\n                WHERE schemaname = 'public' AND\\n                      tablename = 'cats');\"\r\nextras.py                  422 DEBUG    0 millis spent executing: b'SELECT description FROM pg_description WHERE objoid = \\'\"public\".\"cats\"\\'::regclass;'\r\nextras.py                  422 DEBUG    0 millis spent executing: b'COMMENT ON TABLE \"public\".\"cats\" IS \\'{\"version\": null, \"schema_version\": 1, \"table_mappings\": [{\"type\": \"TABLE\", \"from\": [\"cats\"], \"to\": \"cats\"}], \"key_properties\": [\"id\"], \"mappings\": {\"id\": {\"type\": [\"integer\"], \"from\": [\"id\"]}, \"name\": {\"type\": [\"string\"], \"from\": [\"name\"]}, \"paw_size\": {\"type\": [\"integer\"], \"from\": [\"paw_size\"]}, \"paw_colour\": {\"type\": [\"string\"], \"from\": [\"paw_colour\"]}, \"flea_check_complete\": {\"type\": [\"boolean\"], \"from\": [\"flea_check_complete\"]}, \"pattern\": {\"type\": [\"string\", \"null\"], \"from\": [\"pattern\"]}, \"age\": {\"type\": [\"integer\", \"null\"], \"from\": [\"age\"]}}}\\';'\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nWindows creeking from the cold", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/93", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/93/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/93/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/93", "id": 403618362, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ3OTk1Nzgx", "number": 93, "title": "Bump: target-postgres 0.1.2 -> 0.1.3", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-01-28T01:15:14Z", "updated_at": "2019-01-28T15:06:43Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/93", "html_url": "https://github.com/datamill-co/target-postgres/pull/93", "diff_url": "https://github.com/datamill-co/target-postgres/pull/93.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/93.patch"}, "body": "# Motivation\r\n\r\nPR for discussion/releasing 0.1.3\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/japanesebreakfast/boyish", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/2", "id": 370786045, "node_id": "MDU6SXNzdWUzNzA3ODYwNDU=", "number": 2, "title": "Failure on Adding a column that already exists.", "user": {"login": "kevinsanz93", "id": 41018734, "node_id": "MDQ6VXNlcjQxMDE4NzM0", "avatar_url": "https://avatars1.githubusercontent.com/u/41018734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinsanz93", "html_url": "https://github.com/kevinsanz93", "followers_url": "https://api.github.com/users/kevinsanz93/followers", "following_url": "https://api.github.com/users/kevinsanz93/following{/other_user}", "gists_url": "https://api.github.com/users/kevinsanz93/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinsanz93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinsanz93/subscriptions", "organizations_url": "https://api.github.com/users/kevinsanz93/orgs", "repos_url": "https://api.github.com/users/kevinsanz93/repos", "events_url": "https://api.github.com/users/kevinsanz93/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinsanz93/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129277, "node_id": "MDU6TGFiZWw4NjExMjkyNzc=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/bug", "name": "bug", "color": "d73a4a", "default": true}, {"id": 1104743743, "node_id": "MDU6TGFiZWwxMTA0NzQzNzQz", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/redshift", "name": "redshift", "color": "4f8fbc", "default": false}], "state": "closed", "locked": false, "assignee": null, "comments": 5, "created_at": "2018-10-16T20:28:39Z", "updated_at": "2019-01-31T03:40:31Z", "author_association": "NONE", "body": "When running tap-hubspot | target-redshift, during the writing of the initial batch, an error occurs caused by the trying to add a column that already exists:\r\n\r\n````\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"http_request_duration\", \"value\": 0.6819870471954346, \"tags\": {\"endpoint\": \"email\", \"http_status_code\": 200, \"status\": \"succeeded\"}}\r\nINFO email_events - Writing batch (35631)\r\nERROR Exception writing records\r\nTraceback (most recent call last):\r\n  File \"/Users/kevinsanz/.virtualenvs/target-sql/lib/python3.6/site-packages/target_sql/target_sql.py\", line 151, in write_batch\r\n    target_table_version)\r\n  File \"/Users/kevinsanz/.virtualenvs/target-sql/lib/python3.6/site-packages/target_sql/target_sql.py\", line 459, in upsert_table_schema\r\n    schema)\r\n  File \"/Users/kevinsanz/.virtualenvs/target-sql/lib/python3.6/site-packages/target_sql/target_sql.py\", line 765, in merge_put_schemas\r\n    default_value)\r\n  File \"/Users/kevinsanz/.virtualenvs/target-sql/lib/python3.6/site-packages/target_sql/target_sql.py\", line 750, in add_column\r\n    default_value=default_value))\r\npsycopg2.ProgrammingError: column \"appid\" of relation \"email_events\" already exists\r\n\r\nCRITICAL column \"appid\" of relation \"email_events\" already exists\r\n\r\nCRITICAL column \"appid\" of relation \"email_events\" already exists\r\n````\r\nNot sure why this is happening given that merge_put_schemas seems to account for this.\r\n\r\n\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/1", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/1/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/1/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/1", "id": 370780158, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzMzgwOTU5", "number": 1, "title": "Readme and target schema config", "user": {"login": "kevinsanz93", "id": 41018734, "node_id": "MDQ6VXNlcjQxMDE4NzM0", "avatar_url": "https://avatars1.githubusercontent.com/u/41018734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinsanz93", "html_url": "https://github.com/kevinsanz93", "followers_url": "https://api.github.com/users/kevinsanz93/followers", "following_url": "https://api.github.com/users/kevinsanz93/following{/other_user}", "gists_url": "https://api.github.com/users/kevinsanz93/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinsanz93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinsanz93/subscriptions", "organizations_url": "https://api.github.com/users/kevinsanz93/orgs", "repos_url": "https://api.github.com/users/kevinsanz93/repos", "events_url": "https://api.github.com/users/kevinsanz93/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinsanz93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2018-10-16T20:12:32Z", "updated_at": "2019-02-04T15:26:35Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/1", "html_url": "https://github.com/datamill-co/target-postgres/pull/1", "diff_url": "https://github.com/datamill-co/target-postgres/pull/1.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/1.patch"}, "body": "I updated the readme to account for the config values. Also added a config.get for the target catalog", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.022218Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/94", "id": 407946204, "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxMzA3NTA2", "number": 94, "title": "Fix comparing columns in tables to the current stream keys.", "user": {"login": "mirelagrigoras", "id": 47386964, "node_id": "MDQ6VXNlcjQ3Mzg2OTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/47386964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirelagrigoras", "html_url": "https://github.com/mirelagrigoras", "followers_url": "https://api.github.com/users/mirelagrigoras/followers", "following_url": "https://api.github.com/users/mirelagrigoras/following{/other_user}", "gists_url": "https://api.github.com/users/mirelagrigoras/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirelagrigoras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirelagrigoras/subscriptions", "organizations_url": "https://api.github.com/users/mirelagrigoras/orgs", "repos_url": "https://api.github.com/users/mirelagrigoras/repos", "events_url": "https://api.github.com/users/mirelagrigoras/events{/privacy}", "received_events_url": "https://api.github.com/users/mirelagrigoras/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2019-02-07T23:37:43Z", "updated_at": "2019-02-08T22:59:12Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/94", "html_url": "https://github.com/datamill-co/target-postgres/pull/94", "diff_url": "https://github.com/datamill-co/target-postgres/pull/94.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/94.patch"}, "body": "A \"key\" value, as it comes in the stream_buffer object, may or may not contain uppercase letters, but in Redshift, which is based on Postgres, columns are always created with lowercase letters.\r\nAs a consequence, in order to check that in the existing table there is a column that corresponds to a certain key and has the same type as the one provided for the key in the current schema, we must  check that the type of the key is the same as the _column that is mapped to this key_.\r\nE.g.: For a key called 'orderID', the new column that will be created in a Redshift table will be \"orderid\".Thus,  in the metadata object the column 'orderid' will be mapped to the 'orderID' key.\r\nTo check that both the column in the table and the schema type for that key have the same sql type, we call the json_schema_to_sql_type method as it follows:\r\n-current_table_schema['schema']['properties']['orderid'] \r\n-stream_buffer.schema['properties']['orderID'].", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/95", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/95/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/95/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/95", "id": 408328586, "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxNjAxNjU1", "number": 95, "title": "Fix/key properties canonicalized", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-02-08T21:21:38Z", "updated_at": "2019-02-08T23:00:16Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/95", "html_url": "https://github.com/datamill-co/target-postgres/pull/95", "diff_url": "https://github.com/datamill-co/target-postgres/pull/95.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/95.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/94\r\n\r\nAn issue was reported with `key_properties` which end up getting canonicalized due to naming restrictions etc.\r\n\r\nCredit to @mirelagrigoras for finding this, triaging the problem, and actually writing the majority of the code to resolve!\r\n\r\n## Suggested Musical Pairing\r\nFreezing wind.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/96", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/96/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/96/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/96", "id": 408360209, "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxNjI2Nzg1", "number": 96, "title": "Bump: 0.1.3 -> 0.1.4", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-02-08T23:15:04Z", "updated_at": "2019-02-08T23:26:43Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/96", "html_url": "https://github.com/datamill-co/target-postgres/pull/96", "diff_url": "https://github.com/datamill-co/target-postgres/pull/96.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/96.patch"}, "body": "# Motivation\r\n\r\nBug fix found, time to release!\r\n\r\n## Suggested Musical Pairing\r\n\r\nEverlong by the Foo Fighters", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/97", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/97/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/97/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/97", "id": 412526003, "node_id": "MDExOlB1bGxSZXF1ZXN0MjU0NzE0MDk4", "number": 97, "title": "Feature/empty table persistence", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-02-20T16:50:22Z", "updated_at": "2019-02-20T18:36:18Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/97", "html_url": "https://github.com/datamill-co/target-postgres/pull/97", "diff_url": "https://github.com/datamill-co/target-postgres/pull/97.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/97.patch"}, "body": "# Motivation\r\n\r\nWe got pinged for support for having empty tables end up in remote. In investigating the work necessary for this, it turned out to be pretty straightforward. Hence, no issue etc.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/trulylapriest/oino", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/98", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/98/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/98/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/98", "id": 412570500, "node_id": "MDExOlB1bGxSZXF1ZXN0MjU0NzQ4OTQ2", "number": 98, "title": "Bump: 0.1.4 -> 0.1.5", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-02-20T18:38:55Z", "updated_at": "2019-02-20T18:43:14Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/98", "html_url": "https://github.com/datamill-co/target-postgres/pull/98", "diff_url": "https://github.com/datamill-co/target-postgres/pull/98.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/98.patch"}, "body": "# Motivation\r\n\r\nPrepping for releasing 0.1.5.\r\n\r\n## Suggested Musical Pairing\r\n\r\nNews.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/91", "id": 402246372, "node_id": "MDU6SXNzdWU0MDIyNDYzNzI=", "number": 91, "title": "Connection is dropped ", "user": {"login": "BenderV", "id": 2799516, "node_id": "MDQ6VXNlcjI3OTk1MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2799516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenderV", "html_url": "https://github.com/BenderV", "followers_url": "https://api.github.com/users/BenderV/followers", "following_url": "https://api.github.com/users/BenderV/following{/other_user}", "gists_url": "https://api.github.com/users/BenderV/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenderV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenderV/subscriptions", "organizations_url": "https://api.github.com/users/BenderV/orgs", "repos_url": "https://api.github.com/users/BenderV/repos", "events_url": "https://api.github.com/users/BenderV/events{/privacy}", "received_events_url": "https://api.github.com/users/BenderV/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 8, "created_at": "2019-01-23T13:45:19Z", "updated_at": "2019-02-22T19:51:02Z", "author_association": "NONE", "body": "Hi, I'm trying to use target-postgres, but I'm having issue with it. It's seems that for large amount of data, the query is too long and the connection is dropped.\r\n\r\nThe only way to manually fix it would be to slip the input file, so to make the connections shorter. Is there another way around it ?\r\n\r\n```SQL\r\nCRITICAL cursor already closed\r\nTraceback (most recent call last):\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/postgres.py\", line 111, in write_batch\r\n    {'version': target_table_version})\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/sql_base.py\", line 704, in write_batch_helper\r\n    metadata)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/postgres.py\", line 407, in write_table_batch\r\n    {'version': remote_schema['version']})\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/sql_base.py\", line 309, in upsert_table_helper\r\n    table_name = self.add_table_mapping(connection, table_path, metadata)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/postgres.py\", line 236, in add_table_mapping\r\n    sql.Literal(root_table)))\r\npsycopg2.OperationalError: server closed the connection unexpectedly\r\n    This probably means the server terminated abnormally\r\n    before or while processing the request.\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/__init__.py\", line 26, in main\r\n    target_tools.main(postgres_target)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/target_tools.py\", line 25, in main\r\n    stream_to_target(input_stream, target, config=config)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/target_tools.py\", line 69, in stream_to_target\r\n    raise e\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/target_tools.py\", line 63, in stream_to_target\r\n    _flush_streams(streams, target, force=True)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/target_tools.py\", line 88, in _flush_streams\r\n    _flush_stream(target, stream_buffer)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/target_tools.py\", line 81, in _flush_stream\r\n    target.write_batch(stream_buffer)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/postgres.py\", line 117, in write_batch\r\n    cur.execute('ROLLBACK;')\r\npsycopg2.InterfaceError: cursor already closed\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \".singer-postgres/bin/target-postgres\", line 11, in <module>\r\n    sys.exit(cli())\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/__init__.py\", line 31, in cli\r\n    main(args.config)\r\n  File \"/home/ben/project/data/singer/.singer-postgres/lib/python3.6/site-packages/target_postgres/__init__.py\", line 26, in main\r\n    target_tools.main(postgres_target)\r\npsycopg2.InterfaceError: connection already closed\r\n```\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/100", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/100/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/100/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/100", "id": 419718858, "node_id": "MDExOlB1bGxSZXF1ZXN0MjYwMTYxMzY2", "number": 100, "title": "Fix/hubspot postgres error  unknown column path", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-03-11T22:42:52Z", "updated_at": "2019-03-14T17:51:44Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "html_url": "https://github.com/datamill-co/target-postgres/pull/100", "diff_url": "https://github.com/datamill-co/target-postgres/pull/100.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/100.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/99\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/mikaeladavis-music/other-lover", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/101", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/101/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/101/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/101", "id": 421163344, "node_id": "MDExOlB1bGxSZXF1ZXN0MjYxMjc2NzM1", "number": 101, "title": "Housekeeping: Pre release for 0.1.6: bump, changelog", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-03-14T17:52:25Z", "updated_at": "2019-03-14T17:53:04Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/101", "html_url": "https://github.com/datamill-co/target-postgres/pull/101", "diff_url": "https://github.com/datamill-co/target-postgres/pull/101.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/101.patch"}, "body": "# Motivation\r\n\r\nReady to cut `0.1.6`\r\n\r\n## Suggested Musical Pairing\r\n\r\nSnow melting.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/99", "id": 419683201, "node_id": "MDU6SXNzdWU0MTk2ODMyMDE=", "number": 99, "title": "Unknown Column Path", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129277, "node_id": "MDU6TGFiZWw4NjExMjkyNzc=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/bug", "name": "bug", "color": "d73a4a", "default": true}, {"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2019-03-11T21:04:52Z", "updated_at": "2019-03-14T18:46:44Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nWhile using `tap-hubspot`, Singer Slack User Patryk Kallinowski ran into the following error:\r\n\r\n```\r\ntarget_postgres.postgres.PostgresError: ('Exception writing records', Exception(\"Unknown column path: ('properties', 'num_contacted_notes', 'value') for table: ('deals',)\"))\r\n```\r\n\r\nAfter uploading his `catalog.json` file generated by `tap-hubspot`, the issue appears to be around this stream/sub-schema:\r\n\r\n```json\r\n{\r\n  \"streams\": [\r\n    {\r\n      \"stream\": \"deals\",\r\n      \"tap_stream_id\": \"deals\",\r\n      \"schema\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          ...\r\n          \"properties\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              ...\r\n              \"num_contacted_notes\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                  \"value\": {\r\n                    \"type\": [\"null\", \"number\", \"string\"]\r\n                  },\r\n                  ...\r\n                }\r\n              },\r\n              ...\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"metadata\": [\r\n        ...\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nAt the very least, this error message can be improved to:\r\n\r\n- contain more context and information for those debugging\r\n- more descriptive/better language to identify what precisely has gone wrong\r\n- be associated with a function which has a complete docstring\r\n\r\nAnd:\r\n\r\n- more testing to assure that whatever underlying bug (if any) is resolved\r\n\r\n## Notes\r\n\r\nhttps://singer-io.slack.com/archives/C2TGFCZEV/p1552316668073400\r\n\r\n`catalog.json` can't be uploaded as a part of this issue, available via download in the link above.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://www.youtube.com/watch?v=PfrHCNo2I3M", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/7", "id": 375192886, "node_id": "MDU6SXNzdWUzNzUxOTI4ODY=", "number": 7, "title": "Test more data cases", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 9, "created_at": "2018-10-29T20:04:33Z", "updated_at": "2019-03-14T20:26:29Z", "author_association": "MEMBER", "body": "Test out more variations of data. Look to real world sources for examples.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/106", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/106/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/106/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/106", "id": 425000365, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY0MTk3NDg0", "number": 106, "title": "Feature/volumes over add for local development", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-03-25T16:33:23Z", "updated_at": "2019-03-25T17:37:25Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/106", "html_url": "https://github.com/datamill-co/target-postgres/pull/106", "diff_url": "https://github.com/datamill-co/target-postgres/pull/106.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/106.patch"}, "body": "# Motivation\r\n\r\nRecently reached some understanding of Docker and `VOLUME` vs `ADD`. Since my local memory keeps filling up with random containers, this change seemed useful.\r\n\r\nEffectively, allow Docker Compose to mount the necessary development volumes, instead of adding them to the container themselves...\r\n\r\nThis has made the number of containers I have locally drop asymptotically.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/uffie-official-458383245/papercuts-2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/107", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/107/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/107/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/107", "id": 427831037, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2MzM4OTUy", "number": 107, "title": "Feature/metrics", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-04-01T17:43:51Z", "updated_at": "2019-04-01T17:55:56Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/107", "html_url": "https://github.com/datamill-co/target-postgres/pull/107", "diff_url": "https://github.com/datamill-co/target-postgres/pull/107.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/107.patch"}, "body": "", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/108", "id": 427871388, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2MzcwNDcy", "number": 108, "title": "Feature: init singer.metrics usage", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 6, "created_at": "2019-04-01T19:24:25Z", "updated_at": "2019-04-04T18:00:50Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/108", "html_url": "https://github.com/datamill-co/target-postgres/pull/108", "diff_url": "https://github.com/datamill-co/target-postgres/pull/108.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/108.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/75\r\n\r\n## Notes\r\n\r\nWhereas the `tap`s for SQL _know_ which table they are persisting to, our `stream`s are potentially nested. For this reason, we include the following tags:\r\n\r\n- `path`: `tuple` of `string`s representing the denested path to a given table\r\n- `table`: optional `string` representing the remote table we are dealing with\r\n- `schema`: `string` representing the remote schema we're dealing with\r\n- `database`: `string` representing the remote database we're dealing with\r\n\r\n## Testing\r\n\r\nOutput provided by the CCI tests:\r\n\r\n```\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.013872385025024414, \"tags\": {\"job_type\": \"upsert_table_schema\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\", \"status\": \"succeeded\"}}\r\nINFO Writing table batch with 18 rows for `('stargazers',)`...\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.011026144027709961, \"tags\": {\"job_type\": \"upsert_table_schema\", \"path\": [\"tmp_c85777c0_12cd_41a0_ad96_089ea9418713\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"tmp_c85777c0_12cd_41a0_ad96_089ea9418713\", \"status\": \"succeeded\"}}\r\nINFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 18, \"tags\": {\"count_type\": \"table_rows_persisted\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\"}}\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.03966832160949707, \"tags\": {\"job_type\": \"table\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\", \"status\": \"succeeded\"}}\r\nINFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 18, \"tags\": {\"count_type\": \"batch_rows_persisted\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\"}}\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.041277408599853516, \"tags\": {\"job_type\": \"batch\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"status\": \"succeeded\"}}\r\n...\r\n```\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/10cc-official/art-for-arts-sake-album?in=drunken-ambassador/sets/interval", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/105", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/105/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/105/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/105", "id": 423840419, "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzMzIzNTk3", "number": 105, "title": "Added collaboration and contributions section", "user": {"login": "gpetepg", "id": 24799706, "node_id": "MDQ6VXNlcjI0Nzk5NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/24799706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpetepg", "html_url": "https://github.com/gpetepg", "followers_url": "https://api.github.com/users/gpetepg/followers", "following_url": "https://api.github.com/users/gpetepg/following{/other_user}", "gists_url": "https://api.github.com/users/gpetepg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpetepg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpetepg/subscriptions", "organizations_url": "https://api.github.com/users/gpetepg/orgs", "repos_url": "https://api.github.com/users/gpetepg/repos", "events_url": "https://api.github.com/users/gpetepg/events{/privacy}", "received_events_url": "https://api.github.com/users/gpetepg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-03-21T17:00:29Z", "updated_at": "2019-04-05T02:21:14Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/105", "html_url": "https://github.com/datamill-co/target-postgres/pull/105", "diff_url": "https://github.com/datamill-co/target-postgres/pull/105.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/105.patch"}, "body": "Let me know how that looks.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/103", "id": 422469452, "node_id": "MDU6SXNzdWU0MjI0Njk0NTI=", "number": 103, "title": "Collaboration and contributions", "user": {"login": "gpetepg", "id": 24799706, "node_id": "MDQ6VXNlcjI0Nzk5NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/24799706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpetepg", "html_url": "https://github.com/gpetepg", "followers_url": "https://api.github.com/users/gpetepg/followers", "following_url": "https://api.github.com/users/gpetepg/following{/other_user}", "gists_url": "https://api.github.com/users/gpetepg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpetepg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpetepg/subscriptions", "organizations_url": "https://api.github.com/users/gpetepg/orgs", "repos_url": "https://api.github.com/users/gpetepg/repos", "events_url": "https://api.github.com/users/gpetepg/events{/privacy}", "received_events_url": "https://api.github.com/users/gpetepg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 5, "created_at": "2019-03-18T22:51:31Z", "updated_at": "2019-04-05T02:22:06Z", "author_association": "CONTRIBUTOR", "body": "How should members of the community help contribute and collaborate with the team at Data Mill?\r\n\r\nFrom my experience I recommend joining singer-io.slack.com and asking questions in the general chat and on each tap/target's specific channel.\r\n\r\nStart a conversation with the owners of the repo. Here specifically @awm33 @AlexanderMann then:\r\n\r\nFile new issue -> Fork -> PR -> Approval -> Merge.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/75", "id": 395649697, "node_id": "MDU6SXNzdWUzOTU2NDk2OTc=", "number": 75, "title": "Metrics", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 6, "created_at": "2019-01-03T16:58:17Z", "updated_at": "2019-04-05T02:22:35Z", "author_association": "MEMBER", "body": "The Singer standard includes metrics that are published via INFO log messages in a standard JSON format. target-postgres should publish some metrics for monitoring and diagnostic purposes.\r\n\r\nMetrics should include:\r\n- SQL Query timings\r\n- Overall write_batch timings\r\n- Batch counts\r\n- Table persisted row counts (which may be higher than batch do to denesting)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/112", "id": 429753885, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3ODIyNzE1", "number": 112, "title": "[bugfix] Fix for issue #109 - Nested records fix", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 3, "created_at": "2019-04-05T13:24:56Z", "updated_at": "2019-04-11T11:14:22Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/112", "html_url": "https://github.com/datamill-co/target-postgres/pull/112", "diff_url": "https://github.com/datamill-co/target-postgres/pull/112.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/112.patch"}, "body": "# Fix for issue #109 \r\n\r\nFixed by altering the record denesting.\r\n\r\nThe table_schemas and the table_records did not match for more complex and nested schemas. This is now fixed and they match. All nested data that I had trouble with before now enters the database as expected. One question remains: Is this the way we want to organize/structure the tables and naming of them? We could change the schemas denesting instead to match the record we had before, that will also work and that will give us a slightly different structure/naming of tables and objects.<br/>\r\nBelow you find an example of how the tables for schema and record mismatched before and how they now match for a simple example using data from the `CATS_SCHEMA` in target-postgres. Look for the `vaccination_type` especially.\r\n\r\n### Before:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 09:00:15.4599+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\n\r\n### After:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['null', 'string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 13:19:50.0198+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\nIn the database for this example it now looks like this:\r\n```\r\ndb=# \\d\r\n                     List of relations\r\n Schema |             Name              | Type  |  Owner   \r\n--------+-------------------------------+-------+----------\r\n public | cats                          | table | postgres\r\n public | cats__adoption__immunizations | table | postgres\r\n(2 rows)\r\n\r\ndb=# \\d cats\r\n                               Table \"public.cats\"\r\n        Column        |           Type           | Collation | Nullable | Default \r\n----------------------+--------------------------+-----------+----------+---------\r\n id                   | bigint                   |           | not null | \r\n name                 | text                     |           | not null | \r\n paw_size             | bigint                   |           | not null | \r\n paw_colour           | text                     |           | not null | \r\n flea_check_complete  | boolean                  |           | not null | \r\n pattern              | text                     |           |          | \r\n age                  | bigint                   |           |          | \r\n adoption__adopted_on | timestamp with time zone |           |          | \r\n adoption__was_foster | boolean                  |           |          | \r\n _sdc_received_at     | timestamp with time zone |           |          | \r\n _sdc_sequence        | bigint                   |           |          | \r\n _sdc_table_version   | bigint                   |           |          | \r\n _sdc_batched_at      | timestamp with time zone |           |          | \r\n\r\ndb=# \\d cats__adoption__immunizations \r\n                                Table \"public.cats__adoption__immunizations\"\r\n                     Column                      |           Type           | Collation | Nullable | Default \r\n-------------------------------------------------+--------------------------+-----------+----------+---------\r\n type                                            | text                     |           | not null | \r\n date_administered                               | timestamp with time zone |           | not null | \r\n adoption__immunizations__vaccination_type__shot | text                     |           |          | \r\n _sdc_source_key_id                              | bigint                   |           | not null | \r\n _sdc_sequence                                   | bigint                   |           |          | \r\n _sdc_level_0_id                                 | bigint                   |           | not null | \r\n\r\ndb=# \r\ndb=# select * from cats__adoption__immunizations;\r\n      type       |   date_administered    | adoption__immunizations__vaccination_type__shot | _sdc_source_key_id | _sdc_sequence | _sdc_level_0_id \r\n-----------------+------------------------+-------------------------------------------------+--------------------+---------------+-----------------\r\n Rabies          | 2537-09-12 15:34:00+02 | Yes                                             |                  1 |    1554384634 |               0\r\n Panleukopenia   | 2889-03-01 18:18:00+01 | No                                              |                  1 |    1554384634 |               1\r\n Feline Leukemia | 2599-08-08 09:47:00+02 | No                                              |                  1 |    1554384634 |               2\r\n Feline Leukemia | 2902-04-14 03:34:00+02 | No                                              |                  1 |    1554384634 |               3\r\n(4 rows)\r\n```\r\nAs you can see we now have data in the field `adoption__immunizations__vaccination_type__shot` which didn't work before.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/110", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/110/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/110/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/110", "id": 429421502, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3NTYyNjI2", "number": 110, "title": "FIX: Nested Records of objects of objects.", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-04-04T18:28:10Z", "updated_at": "2019-04-12T07:09:58Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "html_url": "https://github.com/datamill-co/target-postgres/pull/110", "diff_url": "https://github.com/datamill-co/target-postgres/pull/110.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/110.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/109\r\n\r\nThis PR exists to lay down test cases which our denesting _should_ handle but currently doesn't.\r\n\r\n## Suggested Musical Pairing\r\n\r\nSpringtime in Milwaukee.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/111", "id": 429729278, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3ODAzMTM0", "number": 111, "title": "[bugfix] Fix for issue #109", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 7, "created_at": "2019-04-05T12:24:41Z", "updated_at": "2019-04-15T18:45:07Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/111", "html_url": "https://github.com/datamill-co/target-postgres/pull/111", "diff_url": "https://github.com/datamill-co/target-postgres/pull/111.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/111.patch"}, "body": "# Fix for issue #109 \r\n\r\nThe table_schemas and the table_records did not match for more complex and nested schemas. This is now fixed and they match. All nested data that I had trouble with before now enters the database as expected. One question remains: Is this the way we want to organize/structure the tables and naming of them? I guess we could change the records denesting instead to match the schema we had before, that should also work and that will give us a slightly different structure/naming of tables and objects.<br/>\r\nBelow you find an example of how the tables for schema and record mismatched before and how they now match for a simple example using data from the `CATS_SCHEMA` in target-postgres. Look for the `vaccination_type` especially.\r\n\r\n### Before:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 09:00:15.4599+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\n\r\n### After:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('vaccination_type', 'shot'): {'type': ['null', 'string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 12:05:11.2344+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\nIn the database for this example it now looks like this:\r\n```\r\ndb=# \\d\r\n                     List of relations\r\n Schema |             Name              | Type  |  Owner   \r\n--------+-------------------------------+-------+----------\r\n public | cats                          | table | postgres\r\n public | cats__adoption__immunizations | table | postgres\r\n(2 rows)\r\n\r\ndb=# \r\ndb=# \r\ndb=# \\d cats__adoption__immunizations \r\n                    Table \"public.cats__adoption__immunizations\"\r\n         Column         |           Type           | Collation | Nullable | Default \r\n------------------------+--------------------------+-----------+----------+---------\r\n type                   | text                     |           | not null | \r\n date_administered      | timestamp with time zone |           | not null | \r\n vaccination_type__shot | text                     |           |          | \r\n _sdc_source_key_id     | bigint                   |           | not null | \r\n _sdc_sequence          | bigint                   |           |          | \r\n _sdc_level_0_id        | bigint                   |           | not null | \r\n\r\ndb=# select * from cats__adoption__immunizations\r\ndb-# ;\r\n      type       |   date_administered    | vaccination_type__shot | _sdc_source_key_id | _sdc_sequence | _sdc_level_0_id \r\n-----------------+------------------------+------------------------+--------------------+---------------+-----------------\r\n Rabies          | 2537-09-12 15:34:00+02 | Yes                    |                  1 |    1554384634 |               0\r\n Panleukopenia   | 2889-03-01 18:18:00+01 | No                     |                  1 |    1554384634 |               1\r\n Feline Leukemia | 2599-08-08 09:47:00+02 | No                     |                  1 |    1554384634 |               2\r\n Feline Leukemia | 2902-04-14 03:34:00+02 | No                     |                  1 |    1554384634 |               3\r\n(4 rows)\r\n```\r\nAs you can see we now have data in the field `vaccination_type__shot` which didn't work before.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/113", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/113/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/113/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/113", "id": 433533157, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwNzE1OTU1", "number": 113, "title": "CHANGELOG: Bug for 0.1.7", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-04-16T00:34:32Z", "updated_at": "2019-04-16T17:42:42Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "html_url": "https://github.com/datamill-co/target-postgres/pull/113", "diff_url": "https://github.com/datamill-co/target-postgres/pull/113.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/113.patch"}, "body": "# Motivation\r\n\r\nPrep for 0.1.7\r\n\r\n## Suggested Musical Pairing\r\n\r\nDogs chewing", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/109", "id": 429371788, "node_id": "MDU6SXNzdWU0MjkzNzE3ODg=", "number": 109, "title": "No data in database if nested objects within array", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 8, "created_at": "2019-04-04T16:24:38Z", "updated_at": "2019-04-23T07:43:54Z", "author_association": "NONE", "body": "Hi,\r\nI think I have encountered a problem with nested objects in arrays. An object in an array is fine but when I have an object within another object in an array (array->object->object) problem arises. No data is seen in that last level object even if I can see in the record data that values exist. If I instead have an array at the last level (array->object->array) it behaves as expected.\r\n\r\nI have done tests with this in the module `test_sandbox` using a modified `CATS_SCHEMA` and the `FakeStream.generate_record_message`(also modified to match my schema) to generate test data. If I in the test make the last object's properties optional by `\"type\": [\"null\", \"string\"]` for example, everything passes because the object's properties are all null. However, if I use `\"type\": \"string\"` for a property, the test fails with:<br/>\r\n`CRITICAL ('Exception writing records', IntegrityError('null value in column \"adoption__immunizations__vaccination_type__shot\" violates not-null constraint\\nDETAIL:  Failing row contains (Rabies, 2537-09-12 15:34:00+02, null, 1, 1554384634, 0).\\nCONTEXT:  COPY tmp_36a9e5fb_ac07_49f0_ac26_8fa9f1f69885, line 1: \"Rabies,2537-09-12 13:34:00.0000+00:00,NULL,1,1554384634,0\"\\n'))`<br/>\r\n\r\nTo me it seems like this case isn't handled and I can only find tests of `array_of_array` and `object_of_object` in the tests directory. Does anyone have a clue and can point me in the right direction?<br/>\r\n\r\nI will attach a snippet of what I added to the  `test_sandbox.py` file so that you can test my examples and easier understand my problem.\r\n<br/>\r\n```python\r\nclass CatStreamObject(SandboxStream):\r\n    stream = [\r\n        {\"type\": \"SCHEMA\",\r\n         \"stream\": \"cats\",\r\n         \"schema\": {\r\n             \"additionalProperties\": False,\r\n             \"properties\": {\r\n                 \"id\": {\"type\": \"integer\"},\r\n                 \"name\": {\"type\": [\"string\"]},\r\n                 \"paw_size\": {\"type\": [\"integer\"],\r\n                              \"default\": 314159},\r\n                 \"paw_colour\": {\"type\": \"string\", \"default\": \"\"},\r\n                 \"flea_check_complete\": {\"type\": [\"boolean\"],\r\n                                         \"default\": False},\r\n                 \"pattern\": {\"type\": [\"null\", \"string\"]},\r\n                 \"age\": {\"type\": [\"null\", \"integer\"]},\r\n                 \"adoption\": {\"type\": [\"object\", \"null\"],\r\n                              \"properties\": {\"adopted_on\": {\r\n                                  \"type\": [\"null\", \"string\"],\r\n                                  \"format\": \"date-time\"},\r\n                                  \"was_foster\": {\r\n                                      \"type\": \"boolean\"},\r\n                                  \"immunizations\": {\r\n                                      \"type\": [\"null\",\r\n                                               \"array\"],\r\n                                      \"items\": {\r\n                                          \"type\": [\r\n                                              \"object\"],\r\n                                          \"properties\": {\r\n                                              \"type\": {\r\n                                                  \"type\": [\r\n                                                      \"null\",\r\n                                                      \"string\"]},\r\n                                              \"date_administered\": {\r\n                                                  \"type\": [\r\n                                                      \"null\",\r\n                                                      \"string\"],\r\n                                                  \"format\": \"date-time\"},\r\n                                              \"vaccination_type\": {\r\n                                                  \"type\": \"object\",\r\n                                                  \"properties\": {\r\n                                                      \"shot\": {\r\n                                                          \"type\": [\r\n                                                              \"null\",\r\n                                                              \"string\"]}}}}}}}}}},\r\n         \"key_properties\": [\"id\"]},\r\n        {\"type\": \"RECORD\",\r\n         \"stream\": \"cats\",\r\n         \"record\": {\r\n             \"id\": 1,\r\n             \"name\": \"Morgan\",\r\n             \"pattern\": \"Tortoiseshell\",\r\n             \"age\": 14,\r\n             \"adoption\": {\r\n                 \"adopted_on\": \"2633-01-02T00:11:00\",\r\n                 \"was_foster\": False,\r\n                 \"immunizations\": [\r\n                     {\"type\": \"Rabies\", \"date_administered\": \"2537-09-12T13:34:00\",\r\n                      \"vaccination_type\": {\"shot\": \"Yes\"}},\r\n                     {\"type\": \"Panleukopenia\", \"date_administered\": \"2889-03-01T17:18:00\",\r\n                      \"vaccination_type\": {\"shot\": \"No\"}},\r\n                     {\"type\": \"Feline Leukemia\", \"date_administered\": \"2599-08-08T07:47:00\",\r\n                      \"vaccination_type\": {\"shot\": \"No\"}},\r\n                     {\"type\": \"Feline Leukemia\", \"date_administered\": \"2902-04-14T01:34:00\",\r\n                      \"vaccination_type\": {\"shot\": \"No\"}}]}\r\n         },\r\n         \"sequence\": 1554384634}\r\n    ]\r\n\r\n\r\ndef test_cat_stream_object__sandbox(db_cleanup):\r\n    config = CONFIG.copy()\r\n    main(config, input_stream=CatStreamObject())\r\n\r\n    with psycopg2.connect(**TEST_DB) as conn:\r\n        with conn.cursor() as cur:\r\n            assert_tables_equal(cur,\r\n                                {'cats', 'cats__adoption__immunizations'})\r\n\r\n            assert_columns_equal(cur,\r\n                                 'cats__adoption__immunizations',\r\n                                 {\r\n                                     ('_sdc_level_0_id', 'bigint', 'NO'),\r\n                                     ('_sdc_sequence', 'bigint', 'YES'),\r\n                                     ('_sdc_source_key_id', 'bigint', 'NO'),\r\n                                     ('date_administered', 'timestamp with time zone', 'YES'),\r\n                                     ('type', 'text', 'YES'),\r\n                                     ('adoption__immunizations__vaccination_type__shot', 'text', 'YES')\r\n                                 })\r\n\r\nclass CatStreamArray(SandboxStream):\r\n    stream = [\r\n        {\"type\": \"SCHEMA\",\r\n         \"stream\": \"cats\",\r\n         \"schema\": {\r\n             \"additionalProperties\": False,\r\n             \"properties\": {\r\n                 \"id\": {\"type\": \"integer\"},\r\n                 \"name\": {\"type\": [\"string\"]},\r\n                 \"paw_size\": {\"type\": [\"integer\"],\r\n                              \"default\": 314159},\r\n                 \"paw_colour\": {\"type\": \"string\", \"default\": \"\"},\r\n                 \"flea_check_complete\": {\"type\": [\"boolean\"],\r\n                                         \"default\": False},\r\n                 \"pattern\": {\"type\": [\"null\", \"string\"]},\r\n                 \"age\": {\"type\": [\"null\", \"integer\"]},\r\n                 \"adoption\": {\"type\": [\"object\", \"null\"],\r\n                              \"properties\": {\"adopted_on\": {\r\n                                  \"type\": [\"null\", \"string\"],\r\n                                  \"format\": \"date-time\"},\r\n                                  \"was_foster\": {\r\n                                      \"type\": \"boolean\"},\r\n                                  \"immunizations\": {\r\n                                      \"type\": [\"null\",\r\n                                               \"array\"],\r\n                                      \"items\": {\r\n                                          \"type\": [\r\n                                              \"object\"],\r\n                                          \"properties\": {\r\n                                              \"type\": {\r\n                                                  \"type\": [\r\n                                                      \"null\",\r\n                                                      \"string\"]},\r\n                                              \"date_administered\": {\r\n                                                  \"type\": [\r\n                                                      \"null\",\r\n                                                      \"string\"],\r\n                                                  \"format\": \"date-time\"},\r\n                                              \"vaccination_type\": {\r\n                                                  \"type\": \"array\",\r\n                                                  \"items\": {\"type\": \"string\"}}}}}}}}},\r\n         \"key_properties\": [\"id\"]},\r\n        {\"type\": \"RECORD\",\r\n         \"stream\": \"cats\",\r\n         \"record\": {\r\n             \"id\": 1,\r\n             \"name\": \"Morgan\",\r\n             \"pattern\": \"Tortoiseshell\",\r\n             \"age\": 14,\r\n             \"adoption\": {\r\n                 \"adopted_on\": \"2633-01-02T00:11:00\",\r\n                 \"was_foster\": False,\r\n                 \"immunizations\": [\r\n                     {\"type\": \"Rabies\", \"date_administered\": \"2537-09-12T13:34:00\",\r\n                      \"vaccination_type\": [\"shot\", \"Yes\"]},\r\n                     {\"type\": \"Panleukopenia\", \"date_administered\": \"2889-03-01T17:18:00\",\r\n                      \"vaccination_type\": [\"shot\", \"No\"]}]}\r\n         },\r\n         \"sequence\": 1554384634}\r\n    ]\r\n\r\n\r\ndef test_cat_stream_array__sandbox(db_cleanup):\r\n    config = CONFIG.copy()\r\n    main(config, input_stream=CatStreamArray())\r\n\r\n    with psycopg2.connect(**TEST_DB) as conn:\r\n        with conn.cursor() as cur:\r\n            assert_tables_equal(cur,\r\n                                {'cats', 'cats__adoption__immunizations', 'cats__adoption__immunizations__vaccination_type'})\r\n\r\n            assert_columns_equal(cur,\r\n                                 'cats__adoption__immunizations',\r\n                                 {\r\n                                     ('_sdc_level_0_id', 'bigint', 'NO'),\r\n                                     ('_sdc_sequence', 'bigint', 'YES'),\r\n                                     ('_sdc_source_key_id', 'bigint', 'NO'),\r\n                                     ('date_administered', 'timestamp with time zone', 'YES'),\r\n                                     ('type', 'text', 'YES')\r\n                                 })\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/115", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/115/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/115/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/115", "id": 436750613, "node_id": "MDExOlB1bGxSZXF1ZXN0MjczMTczOTQ4", "number": 115, "title": "Investigation/date time being treated as object", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-04-24T15:04:17Z", "updated_at": "2019-04-29T13:56:44Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/115", "html_url": "https://github.com/datamill-co/target-postgres/pull/115", "diff_url": "https://github.com/datamill-co/target-postgres/pull/115.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/115.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/114\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/thehorrors/still-life", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/116", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/116/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/116/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/116", "id": 446258382, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgwNTAyMDE0", "number": 116, "title": "Keep up with STATE records and return to stdout", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-05-20T18:47:39Z", "updated_at": "2019-05-20T18:48:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/116", "html_url": "https://github.com/datamill-co/target-postgres/pull/116", "diff_url": "https://github.com/datamill-co/target-postgres/pull/116.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/116.patch"}, "body": "This keeps up with all of the STATE records and returns\r\nthe latest one to stdout.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/118", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/118/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/118/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/118", "id": 449980123, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgzMzk4NDgw", "number": 118, "title": "Bump: All dependencies to latest", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-05-29T19:24:38Z", "updated_at": "2019-05-30T17:55:06Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/118", "html_url": "https://github.com/datamill-co/target-postgres/pull/118", "diff_url": "https://github.com/datamill-co/target-postgres/pull/118.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/118.patch"}, "body": "# Motivation\r\n\r\nTarget Redshift has a minor security vulnerability with `urllib3`. If we're taking the time to tackle this, we might as well bump dependencies as it's a good hygiene type thing.\r\n\r\n## Notes\r\n\r\nPscycoPg2 is proving to be a problem in upgrading. This will be fixed as a separate issue.\r\n\r\n## Suggested Musical Pairing\r\n\r\nEconomist Radio.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/114", "id": 436260245, "node_id": "MDU6SXNzdWU0MzYyNjAyNDU=", "number": 114, "title": "ValidationError: \" '..' is not of type .. \"", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 14, "created_at": "2019-04-23T15:44:47Z", "updated_at": "2019-06-04T14:40:46Z", "author_association": "NONE", "body": "I bumped on following error using the tap-closeio on target-postgres.\r\n\r\n`target_postgres.singer_stream.SingerStreamError: ('Invalid records detected above threshold: 0. See `.args` for details.', [(<ValidationError: \"'2019-04-15T14:38:04.000000Z' is not of type 'object'\">\r\n\r\nIt says that date: \"2019-04-15T14: 38: 04.000000Z\" behaves as an object type, while it should be a string with date-time format right?\r\n\r\nI have added a file that contains the complete error, as well a file that shows my schema.\r\n\r\n[postgres_error.txt](https://github.com/datamill-co/target-postgres/files/3108365/postgres_error.txt)\r\n\r\n[catalog_activities.zip](https://github.com/datamill-co/target-postgres/files/3108378/catalog_activities.zip)\r\n\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/122", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/122/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/122/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/122", "id": 450857570, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg0MDk0ODIz", "number": 122, "title": "Fix typo disttribution -> distribution", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-05-31T15:32:49Z", "updated_at": "2019-06-06T19:21:05Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/122", "html_url": "https://github.com/datamill-co/target-postgres/pull/122", "diff_url": "https://github.com/datamill-co/target-postgres/pull/122.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/122.patch"}, "body": "", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/124", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/124/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/124/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/124", "id": 453839405, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg2NDMzMjQ5", "number": 124, "title": "Enable Configuration of SSL", "user": {"login": "citruspi", "id": 2125849, "node_id": "MDQ6VXNlcjIxMjU4NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2125849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citruspi", "html_url": "https://github.com/citruspi", "followers_url": "https://api.github.com/users/citruspi/followers", "following_url": "https://api.github.com/users/citruspi/following{/other_user}", "gists_url": "https://api.github.com/users/citruspi/gists{/gist_id}", "starred_url": "https://api.github.com/users/citruspi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citruspi/subscriptions", "organizations_url": "https://api.github.com/users/citruspi/orgs", "repos_url": "https://api.github.com/users/citruspi/repos", "events_url": "https://api.github.com/users/citruspi/events{/privacy}", "received_events_url": "https://api.github.com/users/citruspi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-06-08T21:52:56Z", "updated_at": "2019-06-11T15:24:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/124", "html_url": "https://github.com/datamill-co/target-postgres/pull/124", "diff_url": "https://github.com/datamill-co/target-postgres/pull/124.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/124.patch"}, "body": "Enables configuration of SSL when connecting to Postgres with the following (optional) config keys:\r\n\r\n- `postgres_sslmode`\r\n- `postgres_sslcert`\r\n- `postgres_sslkey`\r\n- `postgres_sslrootcert`\r\n- `postgres_sslcrl`", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/123", "id": 453619901, "node_id": "MDU6SXNzdWU0NTM2MTk5MDE=", "number": 123, "title": "Large datasets cause extremely slow imports", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}], "state": "open", "locked": false, "assignee": null, "comments": 3, "created_at": "2019-06-07T17:32:22Z", "updated_at": "2019-06-17T15:22:20Z", "author_association": "CONTRIBUTOR", "body": "I'm currently using this target with the zendesk tap. We're using this to keep a local copy of the zendesk data, which we use to run daily reports, along with some additional use cases. I've had the import running for several days and noticed that cpu was spiking on my db instance along with some queries taking several minutes to run. After doing a bit of digging, I found that some of my tables were already into the millions of records and needed some indexes.\r\n\r\nSpecifically, the indexes needed were around the `_sdc_sequence` and `_sdc_level_{}_id` columns.\r\n\r\nI'm wondering what the thoughts were around potentially making a PR to automatically create these indexes or if maybe it would be better to just have that noted in the documentation as to specific fields that might need to have indexes as the tables start growing.\r\n\r\nFor specifics, at the moment, these are what my largest tables (over 100k records) look like:\r\n\r\n| table | count |\r\n| ----- | ------ |\r\n|tickets__custom_fields|5,418,717|\r\n|ticket_audits__events|2,466,633|\r\n|ticket_audits__events__value|461,196|\r\n|tickets__tags|342,643|\r\n|ticket_audits|234,680|\r\n|ticket_audits__events__previous_value|118,678|", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/128", "id": 471131594, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk5OTA4MjIx", "number": 128, "title": "Send STATE records to stdout with eager flushing", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2019-07-22T14:34:28Z", "updated_at": "2019-07-24T17:36:02Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/128", "html_url": "https://github.com/datamill-co/target-postgres/pull/128", "diff_url": "https://github.com/datamill-co/target-postgres/pull/128.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/128.patch"}, "body": "This is on top of #120 and would supersede it if accepted. This adds less buggy support for `STATE` messages as well as a config option to turn off the new behaviour. \r\n\r\nThis adds support for writing `STATE` messages to stdout for an orchestrator of some sort to persist and feed back into the next invocation of the tap. It's a little trickier than one would hope because the `STATE` message is a checkpoint of sorts for the whole system. If data from before a `STATE` message is lost somehow, and the tap is rerun starting from that state, that data would be permanently lost, so it's important that all records from before a given `STATE` have been saved to the database before that `STATE` is emitted.\r\n\r\nThe Singer spec however does not specify what exactly is in STATE messages, so, they can relate to any or all of the active streams. That means that target-postgres doesn't and can't know which records that it may have buffered in memory are \"covered\" by an incoming STATE record. If target-postgres eagerly emitted the STATE record to stdout, but didn't flush all the records, the system becomes open to inconsistency. If the STATE message were persisted by the outside orchestrator, but then the process crashed later, the buffers in target-postgres process would be lost and data dropped. The implementation prior to this commit suffers from this bug, see #120 for more discussion.\r\n\r\nWe prevent this bug by eagerly flushing all the buffered records whenever a STATE message is encountered. When the orchestrator sees a STATE message, it becomes guaranteed safe to persist it as everything seen from the tap has been committed to the database.\r\n\r\nThe downside of this approach is that it may lead to superfluous flushes of the buffered streams, especially if a tap emits a lot of STATE messages. From my experience with several different taps, they all tend to be written in such a way that they emit STATE messages as a single last step, so I don't think this is too big an issue.\r\n\r\nAn alternative to this approach would be tracking which records were received before a given STATE message, and then only writing the STATE message out to the orchestrator once all those records had been flushed on their regularly scheduled programming. This means STATE messages are \"delayed\" until the records they came after have all been flushed on the schedule they would have been flushed on without STATE messages. target-snowflake implements this here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py , but in my mind, this is significant additional complexity for a performance optimization that is in most circumstances unnecessary. It's arguable that writing STATE messages to stdout as soon as they arrive is actually valuable, so that in the presence of a sometimes-failing tap progress can actually be made by getting STATE persisted as soon as possible, and, while the taps are indeed idempotent, rerunning them isn't always free (in terms of API calls and whatnot). So, I think this simpler solution would be a great starting point, and after some real world usage we could re-evaluate and move to the more complex approach.\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/126", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/126/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/126/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/126", "id": 458238074, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg5ODg4NTE5", "number": 126, "title": "windows equivalent to run target", "user": {"login": "aroder", "id": 23650, "node_id": "MDQ6VXNlcjIzNjUw", "avatar_url": "https://avatars2.githubusercontent.com/u/23650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aroder", "html_url": "https://github.com/aroder", "followers_url": "https://api.github.com/users/aroder/followers", "following_url": "https://api.github.com/users/aroder/following{/other_user}", "gists_url": "https://api.github.com/users/aroder/gists{/gist_id}", "starred_url": "https://api.github.com/users/aroder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aroder/subscriptions", "organizations_url": "https://api.github.com/users/aroder/orgs", "repos_url": "https://api.github.com/users/aroder/repos", "events_url": "https://api.github.com/users/aroder/events{/privacy}", "received_events_url": "https://api.github.com/users/aroder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-06-19T21:37:10Z", "updated_at": "2019-07-25T21:38:53Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/126", "html_url": "https://github.com/datamill-co/target-postgres/pull/126", "diff_url": "https://github.com/datamill-co/target-postgres/pull/126.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/126.patch"}, "body": "", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.468793Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/127", "id": 458905538, "node_id": "MDU6SXNzdWU0NTg5MDU1Mzg=", "number": 127, "title": "Only key property being loaded into table", "user": {"login": "luipillmann", "id": 6889971, "node_id": "MDQ6VXNlcjY4ODk5NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6889971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luipillmann", "html_url": "https://github.com/luipillmann", "followers_url": "https://api.github.com/users/luipillmann/followers", "following_url": "https://api.github.com/users/luipillmann/following{/other_user}", "gists_url": "https://api.github.com/users/luipillmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/luipillmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luipillmann/subscriptions", "organizations_url": "https://api.github.com/users/luipillmann/orgs", "repos_url": "https://api.github.com/users/luipillmann/repos", "events_url": "https://api.github.com/users/luipillmann/events{/privacy}", "received_events_url": "https://api.github.com/users/luipillmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 2, "created_at": "2019-06-20T22:03:40Z", "updated_at": "2019-07-25T21:43:43Z", "author_association": "NONE", "body": "Hi there!\r\n\r\nI'm a new Singer user and I'm having trouble when using `target-postgres` with [`tap-exchangeratesapi`](https://github.com/singer-io/tap-exchangeratesapi). When I run:\r\n\r\n```\r\n~/.virtualenvs/tap-exchangeratesapi/bin/tap-exchangeratesapi -c tap_config.json \\\r\n    | ~/.virtualenvs/target-postgres/bin/target-postgres -c postgres_config.json\r\n```\r\nonly the key property is loaded into the destination table (column `date`), besides the `_sdc`columns.\r\n\r\nThis is my config:\r\n\r\n```\r\n{\r\n    \"postgres_host\": \"localhost\",\r\n    \"postgres_port\": 5432,\r\n    \"postgres_database\": \"postgres\",\r\n    \"postgres_username\": \"\",\r\n    \"postgres_password\": \"\",\r\n    \"postgres_schema\": \"public\"\r\n  }\r\n```\r\n\r\nAlso, this is the content sent by the tap:\r\n\r\n```\r\n{\"type\": \"SCHEMA\", \"stream\": \"exchange_rate\", \"schema\": {\"type\": \"object\", \"properties\": {\"date\": {\"type\": \"string\", \"format\": \"date-time\"}}, \"additionalProperties\": true}, \"key_properties\": [\"date\"]}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0137751728, \"PHP\": 13.2305516911, \"CZK\": 5.8913950783, \"BRL\": 1.0, \"CHF\": 0.2545670171, \"INR\": 17.6687116564, \"ISK\": 31.5871097224, \"HRK\": 1.6917919128, \"PLN\": 0.9768741305, \"NOK\": 2.2299815267, \"USD\": 0.2550915684, \"CNY\": 1.7618765252, \"RUB\": 16.6787921637, \"SEK\": 2.4216023901, \"MYR\": 1.0660250416, \"SGD\": 0.3495792186, \"ILS\": 0.9258786234, \"TRY\": 1.5010148927, \"BGN\": 0.4460510411, \"NZD\": 0.3886240792, \"HKD\": 1.9988824777, \"RON\": 1.0805072183, \"EUR\": 0.2280657742, \"MXN\": 5.0432184642, \"CAD\": 0.3443337058, \"AUD\": 0.3666613451, \"GBP\": 0.2021073278, \"KRW\": 301.8336488243, \"IDR\": 3631.9930668005, \"JPY\": 27.6347298561, \"DKK\": 1.7031952015, \"ZAR\": 3.715419527, \"HUF\": 73.8317330718, \"date\": \"2019-06-03T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0636142811, \"PHP\": 13.338603969, \"CZK\": 5.8994454375, \"BRL\": 1.0, \"CHF\": 0.2561528943, \"INR\": 17.8454557954, \"ISK\": 31.9217196022, \"HRK\": 1.7005820615, \"PLN\": 0.9808423851, \"NOK\": 2.2425409047, \"USD\": 0.2576653375, \"CNY\": 1.7802374078, \"RUB\": 16.8062239333, \"SEK\": 2.4350336862, \"MYR\": 1.0744305422, \"SGD\": 0.3528117696, \"ILS\": 0.9313213255, \"TRY\": 1.4962876392, \"BGN\": 0.4481873596, \"NZD\": 0.3909895046, \"HKD\": 2.0198680049, \"RON\": 1.0851322242, \"EUR\": 0.2291580732, \"MXN\": 5.0782116504, \"CAD\": 0.3462807645, \"AUD\": 0.3693111508, \"GBP\": 0.203350291, \"KRW\": 304.9864796737, \"IDR\": 3664.7738209817, \"JPY\": 27.8702048673, \"DKK\": 1.7113295751, \"ZAR\": 3.7763188047, \"HUF\": 73.7888995829, \"date\": \"2019-06-04T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.129044143, \"PHP\": 13.4202224423, \"CZK\": 5.9080756212, \"BRL\": 1.0, \"CHF\": 0.2570520644, \"INR\": 17.9721141226, \"ISK\": 32.1228728671, \"HRK\": 1.7075782347, \"PLN\": 0.9850553803, \"NOK\": 2.2506274898, \"USD\": 0.2592166164, \"CNY\": 1.790452944, \"RUB\": 16.8856932323, \"SEK\": 2.4467497179, \"MYR\": 1.0756211573, \"SGD\": 0.3537891174, \"ILS\": 0.9349943583, \"TRY\": 1.4816588758, \"BGN\": 0.4503649803, \"NZD\": 0.3901489857, \"HKD\": 2.0323070901, \"RON\": 1.0878716006, \"EUR\": 0.2302714901, \"MXN\": 5.0863748359, \"CAD\": 0.3470191356, \"AUD\": 0.3710594791, \"GBP\": 0.2040919244, \"KRW\": 304.9554424667, \"IDR\": 3682.043429203, \"JPY\": 28.083910931, \"DKK\": 1.7197135423, \"ZAR\": 3.8199737491, \"HUF\": 74.0345867778, \"date\": \"2019-06-05T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.08195332, \"PHP\": 13.3418081037, \"CZK\": 5.8780549257, \"BRL\": 1.0, \"CHF\": 0.2559380655, \"INR\": 17.8698550127, \"ISK\": 31.9063652397, \"HRK\": 1.6998786046, \"PLN\": 0.9800499324, \"NOK\": 2.2465700085, \"USD\": 0.2580453057, \"CNY\": 1.783824641, \"RUB\": 16.8282370187, \"SEK\": 2.4319155272, \"MYR\": 1.0735930736, \"SGD\": 0.351886209, \"ILS\": 0.9286286905, \"TRY\": 1.4891316796, \"BGN\": 0.4479717813, \"NZD\": 0.3889919604, \"HKD\": 2.0232483566, \"RON\": 1.0815868435, \"EUR\": 0.2290478481, \"MXN\": 5.1024301977, \"CAD\": 0.3457706315, \"AUD\": 0.3694999885, \"GBP\": 0.2028401933, \"KRW\": 304.3816853341, \"IDR\": 3662.6949769807, \"JPY\": 27.902608855, \"DKK\": 1.7106896631, \"ZAR\": 3.8370782656, \"HUF\": 73.5930735931, \"date\": \"2019-06-06T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0836707152, \"PHP\": 13.4049269196, \"CZK\": 5.8651844736, \"BRL\": 1.0, \"CHF\": 0.2559756628, \"INR\": 17.9171527254, \"ISK\": 31.8625769116, \"HRK\": 1.6966536289, \"PLN\": 0.977012283, \"NOK\": 2.2407420115, \"USD\": 0.2578512775, \"CNY\": 1.7816738718, \"RUB\": 16.7641986322, \"SEK\": 2.4374299504, \"MYR\": 1.0723712802, \"SGD\": 0.3524097074, \"ILS\": 0.9283377936, \"TRY\": 1.5064845948, \"BGN\": 0.4473569844, \"NZD\": 0.389212928, \"HKD\": 2.0219126695, \"RON\": 1.0799881059, \"EUR\": 0.2287335026, \"MXN\": 5.0894347995, \"CAD\": 0.3444955283, \"AUD\": 0.3699306937, \"GBP\": 0.2028294334, \"KRW\": 305.638280839, \"IDR\": 3673.8649099934, \"JPY\": 27.9672453624, \"DKK\": 1.7081817974, \"ZAR\": 3.8811729454, \"HUF\": 73.5446830897, \"date\": \"2019-06-07T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0732502222, \"PHP\": 13.4168243043, \"CZK\": 5.8404175308, \"BRL\": 1.0, \"CHF\": 0.2552590195, \"INR\": 17.9238553228, \"ISK\": 31.9301684254, \"HRK\": 1.690247738, \"PLN\": 0.9717847619, \"NOK\": 2.229140552, \"USD\": 0.2575609089, \"CNY\": 1.7860154523, \"RUB\": 16.6691660779, \"SEK\": 2.4262141897, \"MYR\": 1.0723613738, \"SGD\": 0.352189074, \"ILS\": 0.9233083392, \"TRY\": 1.4930601454, \"BGN\": 0.4457460629, \"NZD\": 0.3894067507, \"HKD\": 2.0200560658, \"RON\": 1.0756432755, \"EUR\": 0.2279098389, \"MXN\": 4.957540397, \"CAD\": 0.3419559222, \"AUD\": 0.3700116234, \"GBP\": 0.203404973, \"KRW\": 305.3353693279, \"IDR\": 3668.9541217494, \"JPY\": 27.9827700162, \"DKK\": 1.7020762586, \"ZAR\": 3.8287257561, \"HUF\": 72.9790095038, \"date\": \"2019-06-10T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0657508031, \"PHP\": 13.3984917868, \"CZK\": 5.84147814, \"BRL\": 1.0, \"CHF\": 0.2559178001, \"INR\": 17.9107146925, \"ISK\": 32.0096598546, \"HRK\": 1.6891076026, \"PLN\": 0.9723190486, \"NOK\": 2.2258674504, \"USD\": 0.2578998929, \"CNY\": 1.7825849224, \"RUB\": 16.6365251862, \"SEK\": 2.4338277174, \"MYR\": 1.0735880437, \"SGD\": 0.3519012143, \"ILS\": 0.9237008179, \"TRY\": 1.4980065158, \"BGN\": 0.4455835782, \"NZD\": 0.3919987242, \"HKD\": 2.0208233659, \"RON\": 1.0765270089, \"EUR\": 0.2278267605, \"MXN\": 4.9388968628, \"CAD\": 0.3417857061, \"AUD\": 0.3707424874, \"GBP\": 0.2029594696, \"KRW\": 304.7137356754, \"IDR\": 3671.8497254688, \"JPY\": 28.0431959538, \"DKK\": 1.7015697264, \"ZAR\": 3.8078964755, \"HUF\": 73.0184767503, \"date\": \"2019-06-11T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.1031126177, \"PHP\": 13.4708320927, \"CZK\": 5.8665628364, \"BRL\": 1.0, \"CHF\": 0.257712833, \"INR\": 17.9773711092, \"ISK\": 32.408785873, \"HRK\": 1.69785392, \"PLN\": 0.9758823664, \"NOK\": 2.2404434163, \"USD\": 0.2593389982, \"CNY\": 1.7944160693, \"RUB\": 16.7887359428, \"SEK\": 2.446118962, \"MYR\": 1.0781933533, \"SGD\": 0.3537481963, \"ILS\": 0.9289984196, \"TRY\": 1.5013398685, \"BGN\": 0.4479512609, \"NZD\": 0.3940816747, \"HKD\": 2.028583862, \"RON\": 1.0822015071, \"EUR\": 0.229037356, \"MXN\": 4.9612926868, \"CAD\": 0.3449073544, \"AUD\": 0.3731476604, \"GBP\": 0.203396624, \"KRW\": 306.4084652207, \"IDR\": 3693.3556263026, \"JPY\": 28.1074643274, \"DKK\": 1.7104051671, \"ZAR\": 3.827878427, \"HUF\": 73.6194773368, \"date\": \"2019-06-12T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.1166962168, \"PHP\": 13.4831564162, \"CZK\": 5.8903037141, \"BRL\": 1.0, \"CHF\": 0.2580533745, \"INR\": 18.0696078657, \"ISK\": 32.58191531, \"HRK\": 1.7068778927, \"PLN\": 0.9803126943, \"NOK\": 2.2501093739, \"USD\": 0.2599415137, \"CNY\": 1.7993506643, \"RUB\": 16.7923507334, \"SEK\": 2.4630546409, \"MYR\": 1.0837919363, \"SGD\": 0.3551313638, \"ILS\": 0.9332473693, \"TRY\": 1.5276197932, \"BGN\": 0.45034424, \"NZD\": 0.3960717493, \"HKD\": 2.0349305763, \"RON\": 1.0873149278, \"EUR\": 0.2302608856, \"MXN\": 4.9824771466, \"CAD\": 0.3458748762, \"AUD\": 0.3761541827, \"GBP\": 0.2048124525, \"KRW\": 307.5686753091, \"IDR\": 3715.3445854153, \"JPY\": 28.1931428308, \"DKK\": 1.7195422414, \"ZAR\": 3.8655276428, \"HUF\": 74.1440051578, \"date\": \"2019-06-13T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0835041338, \"PHP\": 13.4811044838, \"CZK\": 5.8816756097, \"BRL\": 1.0, \"CHF\": 0.2581811482, \"INR\": 18.1028487207, \"ISK\": 32.5864173364, \"HRK\": 1.7065840684, \"PLN\": 0.9795269788, \"NOK\": 2.2506045183, \"USD\": 0.2594247288, \"CNY\": 1.796213988, \"RUB\": 16.6704281141, \"SEK\": 2.4500840568, \"MYR\": 1.0819381434, \"SGD\": 0.3547198489, \"ILS\": 0.9330999701, \"TRY\": 1.5297653317, \"BGN\": 0.4504064666, \"NZD\": 0.3970476476, \"HKD\": 2.0304907537, \"RON\": 1.0877415195, \"EUR\": 0.230292702, \"MXN\": 4.9760035004, \"CAD\": 0.3458535799, \"AUD\": 0.3759298068, \"GBP\": 0.205174677, \"KRW\": 307.1183474196, \"IDR\": 3714.1837275177, \"JPY\": 28.0726803768, \"DKK\": 1.7197337816, \"ZAR\": 3.8350413375, \"HUF\": 74.0460124819, \"date\": \"2019-06-14T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0363503516, \"PHP\": 13.403735501, \"CZK\": 5.83614942, \"BRL\": 1.0, \"CHF\": 0.2560507809, \"INR\": 17.9415928395, \"ISK\": 32.3088866563, \"HRK\": 1.6909078455, \"PLN\": 0.9728057357, \"NOK\": 2.2362316193, \"USD\": 0.2565074436, \"CNY\": 1.7762809389, \"RUB\": 16.4725545712, \"SEK\": 2.4316147593, \"MYR\": 1.0711708832, \"SGD\": 0.3516302859, \"ILS\": 0.9258608092, \"TRY\": 1.5058452827, \"BGN\": 0.4465704631, \"NZD\": 0.3940770847, \"HKD\": 2.0084710933, \"RON\": 1.0795506439, \"EUR\": 0.2283313545, \"MXN\": 4.9157913965, \"CAD\": 0.344072518, \"AUD\": 0.3734359302, \"GBP\": 0.2036898347, \"KRW\": 304.4227783359, \"IDR\": 3677.0344323683, \"JPY\": 27.8701251256, \"DKK\": 1.7050415563, \"ZAR\": 3.8008722258, \"HUF\": 73.5889122294, \"date\": \"2019-06-17T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0906425323, \"PHP\": 13.451157851, \"CZK\": 5.9125435781, \"BRL\": 1.0, \"CHF\": 0.2580056796, \"INR\": 18.0085655577, \"ISK\": 32.6691755362, \"HRK\": 1.7097638123, \"PLN\": 0.9833537275, \"NOK\": 2.257867153, \"USD\": 0.2582827327, \"CNY\": 1.788977905, \"RUB\": 16.5951792764, \"SEK\": 2.4568374391, \"MYR\": 1.0799990765, \"SGD\": 0.3541200102, \"ILS\": 0.9328146284, \"TRY\": 1.5080922587, \"BGN\": 0.4515503429, \"NZD\": 0.3969247108, \"HKD\": 2.0234802484, \"RON\": 1.090480918, \"EUR\": 0.2308775656, \"MXN\": 4.9392792002, \"CAD\": 0.3466857525, \"AUD\": 0.377461732, \"GBP\": 0.20641147, \"KRW\": 306.0420658925, \"IDR\": 3699.254265463, \"JPY\": 27.9546556461, \"DKK\": 1.724008958, \"ZAR\": 3.7813589454, \"HUF\": 74.4141481772, \"date\": \"2019-06-18T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0902040439, \"PHP\": 13.4281229803, \"CZK\": 5.9170436709, \"BRL\": 1.0, \"CHF\": 0.2579632536, \"INR\": 18.0213045887, \"ISK\": 32.6608808051, \"HRK\": 1.7085910812, \"PLN\": 0.984904441, \"NOK\": 2.2577555166, \"USD\": 0.2586787924, \"CNY\": 1.7860308374, \"RUB\": 16.5580278829, \"SEK\": 2.466715908, \"MYR\": 1.0793093897, \"SGD\": 0.3536838704, \"ILS\": 0.933016342, \"TRY\": 1.5145877574, \"BGN\": 0.4514356938, \"NZD\": 0.3963853753, \"HKD\": 2.0238897609, \"RON\": 1.0911965654, \"EUR\": 0.2308189456, \"MXN\": 4.9520358231, \"CAD\": 0.3459975995, \"AUD\": 0.376304127, \"GBP\": 0.2054750254, \"KRW\": 304.3624780722, \"IDR\": 3691.2173391192, \"JPY\": 28.0421937033, \"DKK\": 1.7235481488, \"ZAR\": 3.755262672, \"HUF\": 74.7784138122, \"date\": \"2019-06-19T00:00:00Z\"}}\r\n{\"type\": \"RECORD\", \"stream\": \"exchange_rate\", \"record\": {\"THB\": 8.0581473034, \"PHP\": 13.398530191, \"CZK\": 5.9020434492, \"BRL\": 1.0, \"CHF\": 0.2566867095, \"INR\": 18.0861381805, \"ISK\": 32.5984288248, \"HRK\": 1.7056004792, \"PLN\": 0.9803948672, \"NOK\": 2.2272444537, \"USD\": 0.2604879397, \"CNY\": 1.7854723892, \"RUB\": 16.4580136844, \"SEK\": 2.4500195821, \"MYR\": 1.0804939296, \"SGD\": 0.3533070703, \"ILS\": 0.932061649, \"TRY\": 1.5041583155, \"BGN\": 0.4505724883, \"NZD\": 0.395281867, \"HKD\": 2.0360540927, \"RON\": 1.0888105605, \"EUR\": 0.2303775889, \"MXN\": 4.9291588914, \"CAD\": 0.3429400788, \"AUD\": 0.3760453383, \"GBP\": 0.2053931394, \"KRW\": 302.3129909922, \"IDR\": 3694.3695717281, \"JPY\": 28.0392563411, \"DKK\": 1.7200221162, \"ZAR\": 3.7161978483, \"HUF\": 74.545580206, \"date\": \"2019-06-20T00:00:00Z\"}}\r\n{\"type\": \"STATE\", \"value\": {\"start_date\": \"2019-06-20\"}}\r\n```\r\n\r\n**Important note:** the exact same tap configuration works when using `target-gsheet` and `target-csv`, for which I get the complete set of columns (one for each currency) and the date. \r\n\r\nIs there any additional configuration I need to do to make this work with Postgres' target?\r\n\r\nThanks in advance.\r\n\r\n\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/120", "id": 450560643, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgzODU1ODAz", "number": 120, "title": "Send STATE records to stdout", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 7, "created_at": "2019-05-31T00:18:23Z", "updated_at": "2019-07-30T16:22:08Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/120", "html_url": "https://github.com/datamill-co/target-postgres/pull/120", "diff_url": "https://github.com/datamill-co/target-postgres/pull/120.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/120.patch"}, "body": "Fixes #117 \r\n\r\n\r\nThis will pass all `STATE` records to stdout.\r\n\r\nThe command could now be:\r\n\r\n`tap | target >> state.json`\r\n\r\nAnd the resulting state file would look something like this:\r\n\r\n```\r\n{ \"users\": 1 }\r\n{ \"users\": 2 }\r\n```\r\n\r\nWith this approach, if the end user only cares about the latest\r\n`STATE` record, they can manually handle updating their state file:\r\n\r\n`tail -1 state.json > state.json.tmp && mv state.json.tmp state.json`", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/119", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/119/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/119/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/119", "id": 450440322, "node_id": "MDU6SXNzdWU0NTA0NDAzMjI=", "number": 119, "title": "PsycoPG2: Cannot bump to latest version", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}, {"id": 861129281, "node_id": "MDU6TGFiZWw4NjExMjkyODE=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true}], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-05-30T18:19:11Z", "updated_at": "2019-07-30T16:25:25Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nWhile releasing `0.1.8`, I tried to put PsycoPG2 to its latest dependency and ran into significant issues. I am currently _unsure_ as to what happened.\r\n\r\n[Failing CI build here](https://circleci.com/workflow-run/3482254f-c784-4fa3-8cdd-91ac6c1f335f)\r\n\r\nInvestigation into _why_ this is happening (even just noting what in the CHANGELOG for PyscoPG2 has changed which _might relate_) is welcomed!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/121", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/121/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/121/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/121", "id": 450612757, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgzODk1NjE4", "number": 121, "title": "Bump psycopg2 from 2.7.7 -> 2.8.2", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-05-31T04:45:18Z", "updated_at": "2019-07-30T16:25:26Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/121", "html_url": "https://github.com/datamill-co/target-postgres/pull/121", "diff_url": "https://github.com/datamill-co/target-postgres/pull/121.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/121.patch"}, "body": "Fixes #119\r\n\r\npsycopg2 2.8 release introduced mappings between Postgresql errors\r\nand python exceptions.\r\n\r\nI assume this came with additional, more granular exceptions that are\r\nnow subclassed.\r\n\r\nIf the original code had been throwing the `IntegrityError` exception, the\r\ncode would have still worked, since the `NotNullValidation` is a subclass.\r\nHowever, since the exception is wrapped in `postgres.PostgresError` and\r\nit's using a matcher, the matching string had to be updated to match the\r\nnew exception being thrown.\r\n\r\nREFERENCES:\r\n* http://initd.org/psycopg/articles/2019/04/04/psycopg-28-released/\r\n* http://initd.org/psycopg/docs/errors.html", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/132", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/132/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/132/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/132", "id": 474872631, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAyNzM3ODI0", "number": 132, "title": "Fail: Datetime validation issue", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-07-30T23:56:45Z", "updated_at": "2019-07-30T23:56:45Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/132", "html_url": "https://github.com/datamill-co/target-postgres/pull/132", "diff_url": "https://github.com/datamill-co/target-postgres/pull/132.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/132.patch"}, "body": "Example branch for: #125 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/125", "id": 458121918, "node_id": "MDU6SXNzdWU0NTgxMjE5MTg=", "number": 125, "title": "Date-Time validation when syncing from tap", "user": {"login": "jimgibbs", "id": 7727539, "node_id": "MDQ6VXNlcjc3Mjc1Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7727539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimgibbs", "html_url": "https://github.com/jimgibbs", "followers_url": "https://api.github.com/users/jimgibbs/followers", "following_url": "https://api.github.com/users/jimgibbs/following{/other_user}", "gists_url": "https://api.github.com/users/jimgibbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimgibbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimgibbs/subscriptions", "organizations_url": "https://api.github.com/users/jimgibbs/orgs", "repos_url": "https://api.github.com/users/jimgibbs/repos", "events_url": "https://api.github.com/users/jimgibbs/events{/privacy}", "received_events_url": "https://api.github.com/users/jimgibbs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 7, "created_at": "2019-06-19T16:56:43Z", "updated_at": "2019-07-30T23:58:09Z", "author_association": "NONE", "body": "I am attempting to leverage this target running it against my tap I get a ValidationError for my date-time 2018-12-03T16:59:03 in my schema I do specify this as a string with a format date-time... what do you believe I am missing?\r\n\r\nHere is a sample of the output from the console:\r\n\r\n```\r\nINFO GET https://noho.api.rentmanager.com/Tenants?fields=FirstName,IsCompany,IsProspect,LastName,Name,PropertyID,RentDueDay,RentPeriod,Status,TenantID,UpdateDate&pagesize=100&pagenumber=1\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"http_request_duration\", \"value\": 8.24599003791809, \"tags\": {\"http_status_code\": 200, \"status\": \"succeeded\"}}\r\nCRITICAL ('Invalid records detected above threshold: 0. See `.args` for details.', [(<ValidationError: \"'2018-12-03T16:59:03' is not a 'date-time'\">, {'type': 'RECORD', 'stream': 'tenants', 'record': {'TenantID': 554, 'Name': 'Michael Andrews', 'FirstName': 'Michael', 'LastName': 'Andrews', 'IsCompany': False, 'RentDueDay': 1, 'RentPeriod': 'Monthly', 'IsProspect': False, 'PropertyID': 90, 'UpdateDate': '2018-12-03T16:59:03', 'Status': 'Past'}})])\r\nWARNING Invalid records detected for stream tenants: [(<ValidationError: \"'2018-12-03T16:59:03' is not a 'date-time'\">, {'type': 'RECORD', 'stream': 'tenants', 'record': {'TenantID': 554, 'Name': 'Michael Andrews', 'FirstName': 'Michael', 'LastName': 'Andrews', 'IsCompany': False, 'RentDueDay': 1, 'RentPeriod': 'Monthly', 'IsProspect': False, 'PropertyID': 90, 'UpdateDate': '2018-12-03T16:59:03', 'Status': 'Past'}})]\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\Jim\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\\target-postgres.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\__init__.py\", line 36, in cli\r\n    main(args.config)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\__init__.py\", line 30, in main\r\n    target_tools.main(postgres_target)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\target_tools.py\", line 25, in main\r\n    stream_to_target(input_stream, target, config=config)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\target_tools.py\", line 69, in stream_to_target\r\n    raise e\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\target_tools.py\", line 58, in stream_to_target\r\n    line)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\target_tools.py\", line 151, in _line_handler\r\n    streams[line_data['stream']].add_record_message(line_data)\r\n  File \"c:\\users\\jim\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\target_postgres\\singer_stream.py\", line 156, in add_record_message\r\n    self.invalid_records)\r\n```\r\n\r\nIf you need an example of the schema file or anything else please let me know.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/102", "id": 421685584, "node_id": "MDU6SXNzdWU0MjE2ODU1ODQ=", "number": 102, "title": "Canonicalization of Stream Name (ie, allow uppercase, numeric, invalid string names)", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 861129279, "node_id": "MDU6TGFiZWw4NjExMjkyNzk=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true}, {"id": 861129280, "node_id": "MDU6TGFiZWw4NjExMjkyODA=", "url": "https://api.github.com/repos/datamill-co/target-postgres/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true}], "state": "open", "locked": false, "assignee": null, "comments": 6, "created_at": "2019-03-15T20:09:27Z", "updated_at": "2019-07-31T15:25:23Z", "author_association": "COLLABORATOR", "body": "# Motivation\r\n\r\nStream names are not required per the [Singer Spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md) to conform to anything _other_ than to be `\"string\"s`...\r\n\r\nUnfortunately for targets, this means that support for various taps requires supporting many varying formats etc.\r\n\r\nHacks and workarounds exist for this, but if a `tap` has a stream name which is upper case, often the user _cannot_ edit/update this without forking the repo etc.\r\n\r\n***For those interested, please vote \ud83d\udc4d on this description for interest in this feature.***\r\n\r\n## What we currently do\r\n\r\nPresently, _any_ string is allowed for _any_ subtable. This means that if we detect a \"nested table\" in the data, we will create a \"sub-table\" where we canonicalize the \"path\" to that particular field.\r\n\r\nie, if we have a stream `foobar` which has an array field called `B@z`, that means the _path_ to the array field is `(\"foobar\", \"B@z\")`. This path will be canonicalized as `foobar__b_z`.\r\n\r\n[The notable exception for this, is that _stream names_ themselves, ie the \"root\" table name, _must_ be strings which are](https://github.com/datamill-co/target-postgres/pull/60/files#diff-52720fbc0113bc218f3f4719ab96bbc9R57):\r\n- lowercased\r\n- start with a letter\r\n- contain _only_ alphanumeric characters _and_ `_` underscores\r\n\r\n## Why we do what we currently do\r\n\r\nThis logic was introduced in #60. This PR sought to allow for sub tables to be _reasonable_ names derived from the data/field names provided.\r\n\r\nAt the time, this was because it was viewed that the _data_ which comes out of a `tap` is well out of the user's control, but that often the `stream` names are already of this format (ie, many API based taps stream's are lowercase etc.).\r\n\r\nAn attempt was made to make it such that stream names could be of any string format. However it was more work to do that at the time.\r\n\r\n## Proposals\r\n\r\nTable name mappings are currently stored on the \"root\" table in a db. ie, the `stream` name table. These mappings take a `path` to a `canonicalized name`.\r\n\r\nie, `(a, b, c, d)` -> `a__b__c__d` etc.\r\n\r\n### Dedicated Metadata Table\r\n\r\nWe could move this mapping out of the JSON blob stored in the table's comment and into a dedicated table. Something akin to `_datamill_table_metadata`.\r\n\r\n### Load Table Mappings\r\n\r\nEach table's metadata could store the `path`. When `target_postgres` starts, it can list all tables present in the remote, iterate through them and fetch the `raw_name` thus building up a cache in memory of our `path` to `canonicalized name`.\r\n\r\nThis could even be done via sql with something like:\r\n\r\n```sql\r\nSELECT CAST(obj_description(oid) AS json)->'path'\r\nFROM pg_class\r\nWHERE relkind = 'r'\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://www.youtube.com/watch?v=crjugtkXZN4", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/133", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/133/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/133/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/133", "id": 475209702, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzMDA3NDcx", "number": 133, "title": "Bump: singer-python to 5.6.1", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-07-31T15:23:20Z", "updated_at": "2019-07-31T15:26:30Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/133", "html_url": "https://github.com/datamill-co/target-postgres/pull/133", "diff_url": "https://github.com/datamill-co/target-postgres/pull/133.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/133.patch"}, "body": "# Motivation\r\n\r\nTrying to cut a release for the end of the week. Latest dependencies are best.\r\n\r\n## Suggested Musical Pairing\r\n\r\nBloomberg Radio", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/104", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/104/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/104/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/104", "id": 422486407, "node_id": "MDExOlB1bGxSZXF1ZXN0MjYyMjY3Nzgw", "number": 104, "title": "Canonicalize Root Stream Name", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-03-19T00:04:56Z", "updated_at": "2019-07-31T15:28:47Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/104", "html_url": "https://github.com/datamill-co/target-postgres/pull/104", "diff_url": "https://github.com/datamill-co/target-postgres/pull/104.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/104.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/102\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/snottynoserezkids/sets/snotty-nose-rez-kids-lp", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/117", "id": 448363553, "node_id": "MDU6SXNzdWU0NDgzNjM1NTM=", "number": 117, "title": "Pass STATE messages to stdout", "user": {"login": "robmoore", "id": 152990, "node_id": "MDQ6VXNlcjE1Mjk5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/152990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmoore", "html_url": "https://github.com/robmoore", "followers_url": "https://api.github.com/users/robmoore/followers", "following_url": "https://api.github.com/users/robmoore/following{/other_user}", "gists_url": "https://api.github.com/users/robmoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmoore/subscriptions", "organizations_url": "https://api.github.com/users/robmoore/orgs", "repos_url": "https://api.github.com/users/robmoore/repos", "events_url": "https://api.github.com/users/robmoore/events{/privacy}", "received_events_url": "https://api.github.com/users/robmoore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 4, "created_at": "2019-05-24T21:43:47Z", "updated_at": "2019-07-31T16:33:55Z", "author_association": "NONE", "body": "In order for taps that allow incremental processing to work properly, they must have state data that informs where to pick up during the next sync. Currently, this target does not emit state messages.\r\n\r\nThis behavior seems to run counter to the specs. Notably, the [Running and Developing Singer Taps and Targets](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#guidelines) document states:\r\n\r\n> Write State messages to stdout once all data that appeared in the stream before the State message has been processed by the Target. Note that although the State message is sent into the target, in most cases the Target's process won't actually store it anywhere or do anything with it other than repeat it back to stdout.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/131", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/131/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/131/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/131", "id": 474846591, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAyNzE2ODAx", "number": 131, "title": "Feature/stream name  root table  canonicalization", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-07-30T22:15:47Z", "updated_at": "2019-08-01T01:02:56Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/131", "html_url": "https://github.com/datamill-co/target-postgres/pull/131", "diff_url": "https://github.com/datamill-co/target-postgres/pull/131.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/131.patch"}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/102\r\n\r\n- Provide logic which works in `target-redshift` as well as `target-postgres`\r\n  - works across all versions\r\n- Migrates existing remote databases seamlessly\r\n- Existing tests remain untouched\r\n\r\n## Notes\r\n\r\nThis will break instances where _multiple_ versions of `target-postgres` are trying to upsert _different_ streams (taps) to the same remote.\r\n\r\nI'm unsure as to whether we _want_ to support this use case.\r\n\r\nie, as a user, I have a long running tap persisting data to postgres db A, via `target-postgres v0.1.8`. I also want to be able to run the latest `target-postgres v0.1.X` to persist another `tap` to db A.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/snottynoserezkids/sets/snotty-nose-rez-kids-lp", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/134", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/134/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/134/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/134", "id": 475391125, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzMTU0NTU2", "number": 134, "title": "Spike/pipes", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-07-31T22:50:37Z", "updated_at": "2019-08-01T01:07:25Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/134", "html_url": "https://github.com/datamill-co/target-postgres/pull/134", "diff_url": "https://github.com/datamill-co/target-postgres/pull/134.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/134.patch"}, "body": "", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/130", "id": 472535821, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAwODk5MzQ3", "number": 130, "title": "Performant STATE message flush", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 9, "created_at": "2019-07-24T21:18:07Z", "updated_at": "2019-08-01T01:10:51Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "html_url": "https://github.com/datamill-co/target-postgres/pull/130", "diff_url": "https://github.com/datamill-co/target-postgres/pull/130.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/130.patch"}, "body": "This is on top of #120 and a follow up to #128. \r\n\r\nIn order for orchestrating systems to properly keep track of the STATE of Singer streams, target-postgres needs to emit the STATE messages it receives from the tap to stdout for the orchestrator to persist. This keeps target-postgres Singer-spec compliant and lets users pass that STATE back into the tap to incrementally load from any big sources.\r\n\r\nThe Singer spec however does not specify what exactly is in STATE messages, so, they can relate to any or all of the active streams. That means that target-postgres doesn't and can't know which records that it may have buffered in memory are \"covered\" by an incoming STATE record. If target-postgres eagerly emitted the STATE record to stdout, but didn't flush all the records, the system becomes open to inconsistency. If the STATE message were persisted by the outside orchestrator, but then the process crashed later, the buffers in target-postgres process would be lost and data dropped. The implementation from #120 suffers from this bug, see #120 for more discussion.\r\n\r\nThis commit prevents this bug by \"late\" flushing buffered STATE messages when all the records that arrived prior to that STATE message have been flushed. STATE messages are \"delayed\" until the records that came before have all been put on a buffered stream and then flushed. target-snowflake implements this here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py.\r\n\r\nThis is accomplished by keeping a low watermark of the least recently arriving record for each stream, and upon flushing a buffer, checking to see if there are any unflushed STATE messages that have become safe to flush because they are below that watermark. The way to think about this is as a \"safety cursor\" that lags behind the incoming stream, pointing to the point in the stream where all records before that point have been saved to the database. Some records ahead of that point will likely have been saved, as different streams records may be interleaved or arriving at different rates, but because of the whole \"states are on one timeline different than each stream\" thing, the STATE message has to wait for all prior records to be flushed.\r\n\r\nThis is implemented using a new StateTracker class, which wraps a bit of business logic around the old streams dict that is used to hold the BufferedSingerStream objects. I'm happy to get feedback on the style or further refactorings that this might prompt so please review away. I tried to make this change in a not super invasive way such that we could potentially chunk up further changes into future PRs. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129/events", "html_url": "https://github.com/datamill-co/target-postgres/issues/129", "id": 471139691, "node_id": "MDU6SXNzdWU0NzExMzk2OTE=", "number": 129, "title": "Save properties not found in the jsonschema in a JSONB column", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 3, "created_at": "2019-07-22T14:48:51Z", "updated_at": "2019-08-01T01:36:34Z", "author_association": "CONTRIBUTOR", "body": "It makes a lot of sense that `target-postgres` tries to load data in a structured way into Postgres. The more that the database knows about the structure of the data, the faster and more efficient the database can be when querying it. \r\n\r\nThat said, lots of the singer taps don't or can't know the exact, specific structure of the data they are extracting before hand. Stitch itself deals with this in a variety of ways, but it does indeed deal with it some how. In my experience feeding web analytics event data from something like Segment into Redshift using Stitch, the event properties can be named whatever the heck developers want, and Stitch somewhat magically adds columns each time a new property is discovered. This is nice because no schema has to be updated anywhere and the pipeline doesn't break while someone figures out where to update it.\r\n\r\n`target-postgres` doesn't need to be that smart, after all, you could just use Stitch, but, I think it could do a bit better than just dropping unknown columns data (see #127). \r\n\r\nI think a nice middle ground would be to keep using the structured smarts that can create nice tables with good relational structure for things specified by the JSONSchema, but then loading unrecognized columns into a JSONB column called `additional_properties` or something like that. This would allow us to at least get a handle on the data from Postgres land, and if you want to break it out in to a real column or do something useful with it you could do so with a transform or SQL view or whatever. JSONB support is really quite nice in recent Postgres with all the partial indexing support and whatnot, and while it wouldn't be as fast as \"real\" columns, it can get close.\r\n\r\nI think this may be undesirable behaviour for some users as well though -- they may be purposefully ignoring bad quality data in some columns, or discarding it because it's simply way too big. That's ok, and Singer's catalog functionality has mechanisms to ignore stuff that those people could use, and we should likely add a configuration option to disable this functionality in the event that folks don't want it. But, if I've learned anything as a pipeline developer, it's that that data is probably there because someone thought it was important, so being able to capture it and save it somehow would be great.\r\n\r\nSadly, JSONB support only landed in Postgres 9.4, which is much more recent than the 8.4.22 version mentioned in DECISIONS.md. 8.4.22 is 5 years old and unsupported by the Postgres community at this point, where as 9.4 is supported. So, we could consider upgrading the minimum required Postgres version, but that seems like a bit much for a net-new feature that people have been getting by without so far. So, I'd say that it'd be best to just detect JSONB support, and warn if the config option is not off in its absence or something like that. Is there precedent for that kind of behaviour in the project? \r\n\r\nI will prepare a PR if y'all are into it!  ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/136", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/136/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/136/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/136", "id": 478030960, "node_id": "MDExOlB1bGxSZXF1ZXN0MzA1MjMxODE1", "number": 136, "title": "Add an initial_sql config option to execute arbitrary SQL upon boot", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "comments": 1, "created_at": "2019-08-07T16:36:05Z", "updated_at": "2019-08-12T14:42:54Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/136", "html_url": "https://github.com/datamill-co/target-postgres/pull/136", "diff_url": "https://github.com/datamill-co/target-postgres/pull/136.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/136.patch"}, "body": "This lets users execute some SQL before target-postgres spins up and does it's thing. This is useful for SQL like `SET ROLE` or setting up encoding business, and I think will end up being generally useful for other stuff I haven't (and don't need to) predict.\r\n\r\nFor me, this was prompted by needing to `SET ROLE` on Google Cloud SQL. On some postgres deployments, target-postgres may be running as a user with limited permissions, or as a user different than the downstream consumer of the data. In these instances it's important that the table owner of the target-postgres created tables is controllable, especially in deployments where the superuser isn't in the developers control, like Google Cloud SQL. `SET ROLE` is the only way to really control the table owner of the created tables so that other users may be able to grant permissions on those tables outside of the normal `target-postgres` lifecycle. See https://stackoverflow.com/questions/2276644/list-all-tables-in-postgresql-information-schema for a more thourough description of the pieces at play here.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/135", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/135/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/135/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/135", "id": 476264022, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzODU1NTk5", "number": 135, "title": "Fix/activate version not flushing buffer", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-08-02T16:34:26Z", "updated_at": "2019-08-12T17:49:40Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/135", "html_url": "https://github.com/datamill-co/target-postgres/pull/135", "diff_url": "https://github.com/datamill-co/target-postgres/pull/135.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/135.patch"}, "body": "# Motivation\r\n\r\nWhen we issue an activate version record, we presently do not flush the buffer after writing the batch. This results in more records being written to remote than need to be.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/kaytranada/weight-off", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "RECORD", "stream": "issues", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/137", "repository_url": "https://api.github.com/repos/datamill-co/target-postgres", "labels_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/137/comments", "events_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/137/events", "html_url": "https://github.com/datamill-co/target-postgres/pull/137", "id": 479777920, "node_id": "MDExOlB1bGxSZXF1ZXN0MzA2NjAxODAw", "number": 137, "title": "Release/0 1 9", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "comments": 0, "created_at": "2019-08-12T18:06:21Z", "updated_at": "2019-08-12T18:06:33Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/137", "html_url": "https://github.com/datamill-co/target-postgres/pull/137", "diff_url": "https://github.com/datamill-co/target-postgres/pull/137.diff", "patch_url": "https://github.com/datamill-co/target-postgres/pull/137.patch"}, "body": "# Motivation\r\n\r\nPre-release/housekeeping for 0.1.9.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:35.765459Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}, "assignees": {"since": "2019-08-12T18:12:33.661657Z"}, "issues": {"since": "2019-08-12T18:12:35.765459Z"}}}}}
{"type": "SCHEMA", "stream": "comments", "schema": {"selected": true, "type": "object", "properties": {"id": {"type": ["null", "integer"]}, "node_id": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "home_url": {"type": ["null", "string"]}, "body": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "issue_url": {"type": ["null", "string"]}, "author_association": {"type": ["null", "string"]}, "user": {"type": ["null", "object"], "additionalProperties": false, "properties": {"login": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}, "node_id": {"type": ["null", "string"]}, "avatar_url": {"type": ["null", "string"]}, "gravatar_id": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "followers_url": {"type": ["null", "string"]}, "following_url": {"type": ["null", "string"]}, "gists_url": {"type": ["null", "string"]}, "starred_url": {"type": ["null", "string"]}, "subscriptions_url": {"type": ["null", "string"]}, "organizations_url": {"type": ["null", "string"]}, "repos_url": {"type": ["null", "string"]}, "events_url": {"type": ["null", "string"]}, "received_events_url": {"type": ["null", "string"]}, "type": {"type": ["null", "string"]}, "site_admin": {"type": ["null", "string"]}}}, "created_at": {"type": ["null", "string"], "format": "date-time"}, "updated_at": {"type": ["null", "string"], "format": "date-time"}, "_sdc_repository": {"type": ["string"]}}}, "key_properties": ["id"]}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/430764927", "html_url": "https://github.com/datamill-co/target-postgres/issues/2#issuecomment-430764927", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "id": 430764927, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc2NDkyNw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-10-17T19:51:50.000000Z", "updated_at": "2018-10-17T19:51:50.000000Z", "author_association": "MEMBER", "body": "@kevinsanz93 Would you be able to add the current table schema in Redshift and the JSON schema it's attempting to merge in?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/434068847", "html_url": "https://github.com/datamill-co/target-postgres/issues/2#issuecomment-434068847", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "id": 434068847, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDA2ODg0Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-10-29T20:33:46.000000Z", "updated_at": "2018-10-29T20:33:46.000000Z", "author_association": "MEMBER", "body": "It looks like redshift always lowercases table column names.\r\n\r\nWe may want to add a field like `lowercase_columns = true/false` to the target classes to switch on postgres vs redshift.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435059743", "html_url": "https://github.com/datamill-co/target-postgres/issues/3#issuecomment-435059743", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/3", "id": 435059743, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA1OTc0Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T14:35:12.000000Z", "updated_at": "2018-11-01T14:35:12.000000Z", "author_association": "COLLABORATOR", "body": "https://github.com/datamill-co/target-postgres/pull/8", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435060259", "html_url": "https://github.com/datamill-co/target-postgres/issues/6#issuecomment-435060259", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6", "id": 435060259, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA2MDI1OQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T14:36:44.000000Z", "updated_at": "2018-11-01T14:36:44.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 included in this issue, do you want to do continuous delivery here? ie, potentially when a `release-` branch is cut, CD just sets everything up in Pypi?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435070511", "html_url": "https://github.com/datamill-co/target-postgres/issues/6#issuecomment-435070511", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6", "id": 435070511, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA3MDUxMQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T15:06:44.000000Z", "updated_at": "2018-11-01T15:06:44.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Maybe? It would need to know the version somehow. Typically you 1) release the version in Github (releases are git tags) 2) publish to pypi.\r\n\r\nAlso a dependency here is me setting up a datamill account/org in pypi and adding you as a collaborator.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435074227", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-435074227", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 435074227, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA3NDIyNw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T15:17:08.000000Z", "updated_at": "2018-11-01T15:17:08.000000Z", "author_association": "MEMBER", "body": "A perfect example of why more data cases are needed:\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/2\r\n\r\nI always lowercase and snakecase my data field names, this broke on camel case on redshift. Redshift lowercases the fieldnames, postgres does not. This specific example only effects Redshift, but you can see we need more cases.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435136414", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-435136414", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 435136414, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTEzNjQxNA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T18:20:02.000000Z", "updated_at": "2018-11-01T18:20:02.000000Z", "author_association": "COLLABORATOR", "body": "Example case that has not been tested:\r\n\r\n```\r\n{'type': 'any-sort-of-string-not-array'\r\n 'properties': ...}\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435152119", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#issuecomment-435152119", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10", "id": 435152119, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1MjExOQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-01T19:09:28.000000Z", "updated_at": "2018-11-01T19:09:28.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Given that there is an fairly immediate goal of sharing some of this code with redshift, and potentially other SQL-based targets (mysql, snowflake), the idea going forward is to be able to override functions on the PostgresTarget class (and probably rename it to a more generic SQL target class). See the `redshift` branch, which we may go in a different direction, but you can see how the differences are handled.\r\n\r\nI like the idea of pulling out some of the JSON Schema functionality in to a separate module. Some functions may be able to be moved over to the new json_schema module, but things like `json_schema_to_sql` would change for other databases types, and should stay on the target object so that inheritance can change that behavior.\r\n\r\nI think some of the other JSON Schema issues (like adding $ref and anyOf) may benefit from having this separate module. If something related to JSON Schema seems as though it would be the same across all SQL-like targets, or those differences could be clear arguments to the function, then I think it's a candidate for moving over to the new module.\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/435504953", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#issuecomment-435504953", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/10", "id": 435504953, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTUwNDk1Mw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-02T20:50:05.000000Z", "updated_at": "2018-11-02T20:50:05.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann One small thing to add. We get to remove \"Types must be arrays\" from Limitations in the README :)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436270572", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#issuecomment-436270572", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17", "id": 436270572, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI3MDU3Mg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T14:26:53.000000Z", "updated_at": "2018-11-06T14:26:53.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I'll answer all three questions here (1. so that I can push the rebased commits up \ud83d\ude09 , 2. because they're all very related)\r\n\r\nThe answer to all three: yes. I didn't do those things initially because this commit obviously got bigger than just a few lines. I had the opportunity to remove some of the explicit hacks put in place in this pr: https://github.com/datamill-co/target-postgres/pull/10 so I took them.\r\n\r\nI was hoping to keep this commit quite targeted to just the simple stupid `$ref` support, but obviously at this point extending that is much simpler. So yeah, your call, we can merge this and then tackle the above (`$id` support, checking for known limitations cases, throwing usable errors instead of \"unexpected\"), or I can start in on those now.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436273022", "html_url": "https://github.com/datamill-co/target-postgres/issues/6#issuecomment-436273022", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/6", "id": 436273022, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI3MzAyMg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T14:33:52.000000Z", "updated_at": "2018-11-06T14:33:52.000000Z", "author_association": "COLLABORATOR", "body": "So, to (2), yeah, I obvi can't help on that one \ud83d\ude09 \r\n\r\nButttttt, to (1), we can totally do that either by branch or by tag. We can setup our CI such that it _only_ executes `deploy`s (CD) on special branches/tags, and on everything else just do the CI part.\r\n\r\nI've found in past that this makes for _much_ more consistent release processes and also means I can't mystically lose my gpg key (etc.) as it's stored in the CI provider or whatever.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436280297", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-436280297", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 436280297, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI4MDI5Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T14:54:09.000000Z", "updated_at": "2018-11-06T14:54:09.000000Z", "author_association": "COLLABORATOR", "body": "When we do eventually do this, I'd recommend step 1 for a _pseudo_ poor implementation to be simply adding support for PSQL 8.0.2 into the postgres branch, then splitting: https://docs.aws.amazon.com/redshift/latest/dg/c_redshift-and-postgres-sql.html\r\n\r\nObviously things like copying via s3 etc. would be...dramatically better...but I think that's for later.\r\n\r\nSide note:\r\n- is s3 _really_ just a different tap?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436281937", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#issuecomment-436281937", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17", "id": 436281937, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI4MTkzNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T14:58:28.000000Z", "updated_at": "2018-11-06T14:58:28.000000Z", "author_association": "COLLABORATOR", "body": "Looking more into `$id`, I'd vote doing that in a totally separate pr. Reasons being:\r\n- `$id` _also_ defines relative/absolute paths for `$ref`s, so supporting them would mean needing to implement a _much_ smarter path traversal alg\r\n  - this is to say that _even_ if we supported `$id` for `$ref` to point to, we'd prolly need to still limit `$ref`'s formats so that we don't have to deal with more complicated path traversal etc.\r\n- `$id` gets into the whole URI debacle as well\r\n\r\nGiven the above, I think it's reasonable to put `$id` into the known limitations list for the time being.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436333003", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-436333003", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 436333003, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzMzAwMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T17:13:57.000000Z", "updated_at": "2018-11-06T17:13:57.000000Z", "author_association": "MEMBER", "body": "I think the when would ideally be in the next 1.5/2 weeks.\r\n\r\nThe how is roughly:\r\n- Create a `target-sql-tools` repo\r\n- Create a `target-redshift` repo\r\n- Create a shared target class like `TargetSQL` (see redshift branch)\r\n- Refactor / cleanup the code as it's moved to `TargetSQL`. Testing the databases differences as we go. (If we eventually target MySQL or Snowflake, we may need to break the shared functions down further, get separate generated SQL.)\r\n- Reduce the `target-postgres` repo to postgres specific code, referencing the shared `target-sql-tools` library\r\n\r\nSome of the above was started in the redshift branch with a rough working version.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436333198", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-436333198", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 436333198, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzMzE5OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T17:14:31.000000Z", "updated_at": "2018-11-06T17:14:31.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann ^", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436334223", "html_url": "https://github.com/datamill-co/target-postgres/issues/19#issuecomment-436334223", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/19", "id": 436334223, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzNDIyMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T17:17:33.000000Z", "updated_at": "2018-11-06T17:17:33.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann  Purely from a postgres perspective, I think 9.0+ is all we need to support. Perhaps even just 9.4+.\r\n\r\nIf this gains something from being able to test redshift (which was forked from 8.2 many years ago), then I could see an argument.\r\n\r\nBased on feedback from Stitch, I think we can go with Draft 4 of JSON Schema. I added an issue in the backlog to validate incoming JSON Schema. If it doesn't match Draft 4, we can warn or throw an exception. https://github.com/datamill-co/target-postgres/issues/20\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436339651", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-436339651", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 436339651, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzOTY1MQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T17:33:15.000000Z", "updated_at": "2018-11-06T17:33:15.000000Z", "author_association": "MEMBER", "body": "Auditing some existing tap schemas, and testing with a subset of that would give us a better idea of the breadth of cases the target will encounter.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436337355", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#issuecomment-436337355", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/17", "id": 436337355, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzNzM1NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T17:26:38.000000Z", "updated_at": "2018-11-06T18:40:19.000000Z", "author_association": "COLLABORATOR", "body": "Exceptions/Errors we want to handle:\r\n- [x] `$ref` not found\r\n- [x] `$ref` of invalid format\r\n- [x] `$ref` circular", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436388812", "html_url": "https://github.com/datamill-co/target-postgres/pull/22#issuecomment-436388812", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/22", "id": 436388812, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM4ODgxMg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T20:01:03.000000Z", "updated_at": "2018-11-06T20:01:03.000000Z", "author_association": "MEMBER", "body": "Trying to get this through quickly just to submit the target to Singer.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/436392405", "html_url": "https://github.com/datamill-co/target-postgres/issues/11#issuecomment-436392405", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/11", "id": 436392405, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM5MjQwNQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-06T20:12:57.000000Z", "updated_at": "2018-11-06T20:12:57.000000Z", "author_association": "MEMBER", "body": "Closed by https://github.com/datamill-co/target-postgres/pull/22", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437180441", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-437180441", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 437180441, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzE4MDQ0MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-08T22:32:32.000000Z", "updated_at": "2018-11-08T22:32:32.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 to review how you're thinking this would proceed:\r\n1. given a JSON Schema, translate it to SQL\r\n2. For each column name, normalize*\r\n3. Detect when normalized names will collide and provide details to user by referencing both the original JSON Schema values/paths, and the resulting SQL names\r\n4. Upon pulling the SQL Schema from the target DB, alert user when a _normalized_ name will collide with what is present in the DB\r\n  - this one is also a concern for me as we _cannot_ guarantee that the column which is present in the DB is the same as the one we have now normalized\r\n  - to get around the above, I could see us:\r\n    - providing some configuration options\r\n    - if the target colunm's _type_ is the same as the one we have selected for the JSON Schema, we could potentially warn, and move on\r\n\r\n*normalize:\r\n- Truncate name to target DB's standards (detect either `NAMEDATALEN-1` or just hardcode for the time being)\r\n- Shorten: ***??? (this is the part I could actually use some help with as far as what you're thinking)***\r\n\r\n-------\r\n\r\nIf my above understanding is correct about everything I think I can easily get started on the duplicate collision in JSON Schema work. I also think that the refactoring necessary for this will result in a lot of benefits for:\r\n- the codebase in general\r\n- the Redshift split work\r\n- the remaining work to \"shorten\" etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437180868", "html_url": "https://github.com/datamill-co/target-postgres/issues/13#issuecomment-437180868", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13", "id": 437180868, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzE4MDg2OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-08T22:34:13.000000Z", "updated_at": "2018-11-08T22:34:13.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I think we can probably close this as we now have basic `$ref` support. When we have a feature request/run into more advanced `$ref`s usage, I think we can revisit our approach at that time.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437215015", "html_url": "https://github.com/datamill-co/target-postgres/issues/14#issuecomment-437215015", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14", "id": 437215015, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzIxNTAxNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T01:14:42.000000Z", "updated_at": "2018-11-09T01:14:42.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 `$allOf` seems _more_ or less straightforward. At the very least we should be able to get the _main_ use cases of it narrowed down. ie, things like `string`s with a `maxLength`, etc.\r\n\r\nDetecting impossible types is something that might be tricky. It's not something that JSON Schema does by default on it's own, so I can see us being in a situation where we'll need to make error messages better/useful.\r\n\r\nFor `$anyOf` I think we'll need to understand widening columns or be comfortable doing early days Stitch things like making a separate column for each value based on it's `type` as well.\r\n\r\n-------\r\n\r\nAll in all, if you wanna detail what cases you want to cover here/how you want to proceed I can start taking a stab at this.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437223021", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-437223021", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 437223021, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzIyMzAyMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T01:56:40.000000Z", "updated_at": "2018-11-09T01:56:40.000000Z", "author_association": "COLLABORATOR", "body": "I'm going to start in on this by failing hard. This will force us to _detect_ that the keys have changed, then we can go about implementing the rest of things.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437236339", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-437236339", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 437236339, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzIzNjMzOQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T03:15:32.000000Z", "updated_at": "2018-11-09T03:15:32.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Keep in mind, we don't actually declare it as a primary key. Couple reasons for that: 1) Other data warehouse systems, such as Redshift, do not support actual primary keys. 2) What we're calling primary key or \"key properties\" is really just a set of unique columns used for loading and dedupping.\r\n\r\nIt's just stored in the comment metadata along with the table version.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437239212", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-437239212", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 437239212, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzIzOTIxMg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T03:35:56.000000Z", "updated_at": "2018-11-09T03:36:05.000000Z", "author_association": "MEMBER", "body": "We could start by only removing special characters and adding an underscore if the column does not begin with a letter. Potentially also shortening to the max column name length. Failing on collisions. We'll have to deal with things in redshift like columns only differing by case.\r\n\r\n> this one is also a concern for me as we cannot guarantee that the column which is present in the DB is the same as the one we have now normalized\r\n\r\nWould it make sense to store the original name in a COMMENT? Then we could map it back. We could store this on the original field, or the table. Or even the original JSON Schema on the table comment. Idk if their is a length, I think a COMMENT just maps to a TEXT field in an internal table.\r\n\r\nWe should also log (info or warn) all normalizations that actually change the field name.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437239368", "html_url": "https://github.com/datamill-co/target-postgres/issues/13#issuecomment-437239368", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/13", "id": 437239368, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzIzOTM2OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T03:37:05.000000Z", "updated_at": "2018-11-09T03:37:05.000000Z", "author_association": "MEMBER", "body": "Agreed", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437241930", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-437241930", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 437241930, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzI0MTkzMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-09T03:55:06.000000Z", "updated_at": "2018-11-09T03:55:06.000000Z", "author_association": "COLLABORATOR", "body": "Yup, I didn't see that till after your comment. I can revamp a bunch of the code I have written.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437586506", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-437586506", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 437586506, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU4NjUwNg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-10T14:10:42.000000Z", "updated_at": "2018-11-10T14:10:42.000000Z", "author_association": "COLLABORATOR", "body": "The timeframe of 2 weeks sounds fine to me. I think in order to get there/get ready for there we should potentially do something like the following:\r\n\r\n- publish `target-postgres` on `PyPi`\r\n  - [CD for this might be potentially quite useful](https://github.com/datamill-co/target-postgres/issues/6)\r\n- create a `target-sql` _module_ inside of the `target-postgres` repo. Target this as another `module` in `setup.py`\r\n- pull the `target-redshift` into the main `target-postgres` branch as another `module`, similarly target `target-sql`\r\n  - Get testing and CI setup for this\r\n- At the 2 week mark assess if further splitting things into distinct repos (most likely yes)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437588046", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-437588046", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 437588046, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU4ODA0Ng==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-10T14:34:52.000000Z", "updated_at": "2018-11-10T14:34:52.000000Z", "author_association": "COLLABORATOR", "body": "See discussion in #12. Stitch handles this by not halting the world, but rather by appending everything to an `_sdc_rejected` table in the related Schema.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.151258Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437588136", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-437588136", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 437588136, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU4ODEzNg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-10T14:36:08.000000Z", "updated_at": "2018-11-10T14:36:08.000000Z", "author_association": "COLLABORATOR", "body": "Following the Stitch guidelines would be involved, but probably fairly rewarding. The way they handle rejected records is pretty good: https://www.stitchdata.com/docs/destinations/postgresql/#rejected-records-log\r\n\r\nPresently we don't do type suffixes on column names (...right?). Looks like Stitch only does that on the [first detected difference](https://www.stitchdata.com/docs/data-structure/postgresql-data-loading-behavior#stitch-detects-multiple-data-types-for-a-single-colum). To that end, that'll effect the [conversation here](https://github.com/datamill-co/target-postgres/issues/18) somewhat.\r\n\r\nI think following Stitch's example for how to handle this makes the most sense.\r\n\r\n---------\r\n\r\nIn general I think it might make a lot of sense to start using Stitch's documentation as the specification for features added to both PostgreSQL and Redshift: https://www.stitchdata.com/docs/data-structure/postgresql-data-loading-behavior", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437588437", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-437588437", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 437588437, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU4ODQzNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-10T14:40:55.000000Z", "updated_at": "2018-11-10T14:40:55.000000Z", "author_association": "COLLABORATOR", "body": "Given Stitch actually creates PKs in PostgreSQL for this, is that potentially something we'll want to do?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437961150", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-437961150", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 437961150, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk2MTE1MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T17:18:15.000000Z", "updated_at": "2018-11-12T17:18:15.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann \r\n\r\n`PyPi` is not necessary for it to be included by Singer.io and many taps/targets are not published there. I'd like to get it there, but it doesn't seem like the first step or even a hard requirement to splitting the repos.\r\n\r\nI do think starting on proper versioning makes sense to do now, we can do that using setup.py and Github tags/releases.\r\n\r\nTo fit well within the Singer community, we are going to split these into separate repos. We can stage code however we like to get to that point, but that's where it needs to be within a few weeks.\r\n\r\nWould it make sense to stage the code splitting in a branch within this repo before the split? Otherwise the master branch is going to be thrashed around a lot before the split.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437962915", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-437962915", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 437962915, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk2MjkxNQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T17:23:43.000000Z", "updated_at": "2018-11-12T17:23:51.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann The biggest reason Stitch added the rejected records was because they had no way to expose loading logs to customers at the time. We may want to consider adding a rejected logs table (I actually think it was inspired by Redshift's built-in table that is similar for COPY errors), but we could start with logging.\r\n\r\n> Presently we don't do type suffixes on column names\r\n\r\nNo, but we could. Yes, it will effecting column naming.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437963847", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-437963847", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 437963847, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk2Mzg0Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T17:26:29.000000Z", "updated_at": "2018-11-12T17:26:29.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann So if the schema changes, which effects all subsequent records, how would that not halt the world? At least, for that table/stream.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/437964571", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-437964571", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 437964571, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk2NDU3MQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T17:28:45.000000Z", "updated_at": "2018-11-12T17:28:45.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Are you sure it's an actual primary key constraint? Do you see that in the docs somewhere? I thought they didn't to keep compatibility with redshift.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438019164", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438019164", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438019164, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAxOTE2NA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T20:32:51.000000Z", "updated_at": "2018-11-12T20:32:51.000000Z", "author_association": "MEMBER", "body": "@timvisher Thanks for your PR! I had some comments and caught a typo.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438020652", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438020652", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438020652, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAyMDY1Mg==", "user": {"login": "timvisher", "id": 34676, "node_id": "MDQ6VXNlcjM0Njc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisher", "html_url": "https://github.com/timvisher", "followers_url": "https://api.github.com/users/timvisher/followers", "following_url": "https://api.github.com/users/timvisher/following{/other_user}", "gists_url": "https://api.github.com/users/timvisher/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisher/subscriptions", "organizations_url": "https://api.github.com/users/timvisher/orgs", "repos_url": "https://api.github.com/users/timvisher/repos", "events_url": "https://api.github.com/users/timvisher/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisher/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T20:38:14.000000Z", "updated_at": "2018-11-12T20:38:14.000000Z", "author_association": "CONTRIBUTOR", "body": "Thanks for the feedback. Back to you. :)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438021913", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438021913", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438021913, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAyMTkxMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T20:42:47.000000Z", "updated_at": "2018-11-12T20:42:47.000000Z", "author_association": "MEMBER", "body": "@timvisher Ok, one more small thing :)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438071231", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-438071231", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 438071231, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA3MTIzMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T23:38:46.000000Z", "updated_at": "2018-11-12T23:38:46.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 if the schema changes in a manner that isn't able to be handled (specifically for this discussion name length/etc.) those records end up getting dumped into the rejected table. While the _end effect_ is the same for the client, ie, \"my data isn't in my table\", the visibility is different, and the client actually has a way to be able to fix things etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438071843", "html_url": "https://github.com/datamill-co/target-postgres/issues/15#issuecomment-438071843", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/15", "id": 438071843, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA3MTg0Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T23:40:59.000000Z", "updated_at": "2018-11-12T23:41:16.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 yeah, saw that in their docs. See [here for an example](https://www.stitchdata.com/docs/data-structure/postgresql-data-loading-behavior#a-table-with-a-single-primary-key-is-synced):\r\n\r\n> Table is created with Primary Key constraint (table_name_pkey). Primary Key column has NOT NULL constraint.\r\n\r\nLooks like that's just a difference between the PSQL and Redshift implementations. Not something we _have_ to do. Just a point to weigh.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438073808", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-438073808", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 438073808, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA3MzgwOA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-12T23:47:40.000000Z", "updated_at": "2018-11-12T23:48:46.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 \r\n\r\nAh, didn't realize that about that about PyPi and Singer. You know, we could also do a Docker container for this thing really easily given our current dev setup etc. (Food for thought, not advocating for tackling that over the split etc.)\r\n\r\nCorrect me if I'm wrong/not understanding your thoughts, but for _the split_ we will need PyPi right? So that both repos can rely upon the `target-sql` repo? Not sure if there's another `Python`/`git` mechanic you were thinking about here.\r\n\r\nVersioning will be pretty straightforward. I can write up steps to do that or cut a release to get that done. Just lemme know what tickles your fancy.\r\n\r\n------\r\n\r\nI'm not actually so sure about how thrashed things will be...\r\n\r\nRight now, we have what, at most 3 collaborators? We could signal the alarm that this was going to happen, let folks get in flight work into master, and then `init target-sql module`. After that, it's just pushing some files around and minor/stock and standard refactoring.\r\n\r\nIf we think this will be advantageous, I think it's worth getting Redshift merged into its own module inside of this repo along with `init target-sql` soon (ie, days/if not hours).", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438101002", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-438101002", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 438101002, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODEwMTAwMg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T01:59:26.000000Z", "updated_at": "2018-11-13T01:59:26.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Client? The user running the command / cron job? We also have the logs.\r\n\r\nMaybe we can have a similar threshold for error? Halting also allows for alerts to be added if the process fails. For the specific use case we are building this out for, we would want it to fail hard so the parent process will fail and alert.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438101734", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-438101734", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 438101734, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODEwMTczNA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T02:03:08.000000Z", "updated_at": "2018-11-13T02:03:08.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann You're correct about ultimately needing pypi for `singer-sql-target-tools`. We can also use `dependency_links` temporarily while we build up development.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438265471", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438265471", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438265471, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODI2NTQ3MQ==", "user": {"login": "timvisher", "id": 34676, "node_id": "MDQ6VXNlcjM0Njc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisher", "html_url": "https://github.com/timvisher", "followers_url": "https://api.github.com/users/timvisher/followers", "following_url": "https://api.github.com/users/timvisher/following{/other_user}", "gists_url": "https://api.github.com/users/timvisher/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisher/subscriptions", "organizations_url": "https://api.github.com/users/timvisher/orgs", "repos_url": "https://api.github.com/users/timvisher/repos", "events_url": "https://api.github.com/users/timvisher/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisher/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T13:28:27.000000Z", "updated_at": "2018-11-13T13:28:27.000000Z", "author_association": "CONTRIBUTOR", "body": "How's that?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438347772", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438347772", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438347772, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM0Nzc3Mg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T16:56:19.000000Z", "updated_at": "2018-11-13T16:56:19.000000Z", "author_association": "MEMBER", "body": "@timvisher Great! Just one thing now...sooo close. Also @AlexanderMann beat you to the merge, you now have conflicts :D", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438351427", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438351427", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438351427, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM1MTQyNw==", "user": {"login": "timvisher", "id": 34676, "node_id": "MDQ6VXNlcjM0Njc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisher", "html_url": "https://github.com/timvisher", "followers_url": "https://api.github.com/users/timvisher/followers", "following_url": "https://api.github.com/users/timvisher/following{/other_user}", "gists_url": "https://api.github.com/users/timvisher/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisher/subscriptions", "organizations_url": "https://api.github.com/users/timvisher/orgs", "repos_url": "https://api.github.com/users/timvisher/repos", "events_url": "https://api.github.com/users/timvisher/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisher/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T17:06:12.000000Z", "updated_at": "2018-11-13T17:06:12.000000Z", "author_association": "CONTRIBUTOR", "body": "LOL. Good Lord I'm not at my best apparently.\r\n\r\nI will squash before we merge once you give me the :shipit:. :)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438404640", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438404640", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438404640, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQwNDY0MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T19:29:03.000000Z", "updated_at": "2018-11-13T19:29:03.000000Z", "author_association": "MEMBER", "body": "@timvisher :shipit: ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438407747", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#issuecomment-438407747", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/25", "id": 438407747, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQwNzc0Nw==", "user": {"login": "timvisher", "id": 34676, "node_id": "MDQ6VXNlcjM0Njc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisher", "html_url": "https://github.com/timvisher", "followers_url": "https://api.github.com/users/timvisher/followers", "following_url": "https://api.github.com/users/timvisher/following{/other_user}", "gists_url": "https://api.github.com/users/timvisher/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisher/subscriptions", "organizations_url": "https://api.github.com/users/timvisher/orgs", "repos_url": "https://api.github.com/users/timvisher/repos", "events_url": "https://api.github.com/users/timvisher/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisher/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T19:38:10.000000Z", "updated_at": "2018-11-13T19:38:10.000000Z", "author_association": "CONTRIBUTOR", "body": "\ud83d\udc4d ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438423702", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-438423702", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 438423702, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQyMzcwMg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T20:25:05.000000Z", "updated_at": "2018-11-13T20:25:05.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I think I've lost the thread a little bit here as to what the plan is for this work.\r\n\r\nFrom what I gather we're leaning towards:\r\n- expanding varchar/text/int columns to accommodate larger data\r\n- adding two columns on first conflicting type change:\r\n  1. streaming `integer` data into `foo`\r\n  2. boolean data comes in\r\n  3. Create columns `foo__int`, `foo__bool`\r\n  4. Move all data for `foo` into `foo__int`. Stream `boolean` data into `foo_bool`\r\n  - NOTE: doing the above makes support of `$anyOf` actually pretty straightforward\r\n\r\nDoes that sound right?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438441617", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-438441617", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 438441617, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ0MTYxNw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T21:21:45.000000Z", "updated_at": "2018-11-13T21:21:45.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann That all sounds right, except for:\r\n- With postgres we can just keep `string` mapped to `text` types.\r\n- Redshift will need varchar expansion.\r\n- For integers, do we just want to make all integers 64bit? There are table size implications there, but for practical purposes, negligible.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438484705", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#issuecomment-438484705", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28", "id": 438484705, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ4NDcwNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-13T23:57:51.000000Z", "updated_at": "2018-11-13T23:57:51.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 before I went ahead and did it...I figured I'd get your input. I'm thinking that all of the denesting of schema stuffs could be moved out either to `json_schema` or to `postgres_schema`. It'd greatly clean up the main `postgres` file.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438509718", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#issuecomment-438509718", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28", "id": 438509718, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODUwOTcxOA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T02:01:51.000000Z", "updated_at": "2018-11-14T02:01:51.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann I'm not sure if it's the right direction. I'm not a huge OO person, but creating a SQL target OO interface seems like the right direction and this PR is moving away from that. Clojure doesn't really have OO, but you could think of this as developing a protocol for SQL-like targets.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438681105", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#issuecomment-438681105", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/28", "id": 438681105, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY4MTEwNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T14:30:27.000000Z", "updated_at": "2018-11-14T14:30:27.000000Z", "author_association": "COLLABORATOR", "body": "Makes sense. For what it's worth, I have been wanting to head in that\ndirection for a while, but have also wanted to not slow down velocity on\nthe task at hand for pure refactors etc.\n\nI'm happy to do the legwork in this pr or close this and do that first.\nThoughts?\n\nOn Tue, Nov 13, 2018, 20:01 Andrew Madonna <notifications@github.com> wrote:\n\n> @AlexanderMann <https://github.com/AlexanderMann> I'm not sure if it's\n> the right direction. I'm not a huge OO person, but creating a SQL target OO\n> interface seems like the right direction and this PR is moving away from\n> that. Clojure doesn't really have OO, but you could think of this as\n> developing a protocol for SQL-like targets.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/datamill-co/target-postgres/pull/28#issuecomment-438509718>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ADtH5do7l4qfJ6s0QzeU0wc2cGUvFGx8ks5uu3mQgaJpZM4Ycv89>\n> .\n>\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438712174", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-438712174", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 438712174, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODcxMjE3NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T15:53:48.000000Z", "updated_at": "2018-11-14T15:53:48.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 sounds like widening is a feature to me! No sense in trying to do that yet if there's no pressing demand for it.\r\n\r\nOnce we get to Redshift, there'll be an obvious performance pr...but that's a battle for future-us.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438823209", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-438823209", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 438823209, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODgyMzIwOQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T21:22:01.000000Z", "updated_at": "2018-11-14T21:22:01.000000Z", "author_association": "COLLABORATOR", "body": "PR for `defaults` in JSON Schema: https://github.com/datamill-co/target-postgres/pull/31", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438846840", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-438846840", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 438846840, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg0Njg0MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T22:43:14.000000Z", "updated_at": "2018-11-14T22:43:14.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Agreed. Redshift is the one with the real need for widening.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438847531", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-438847531", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 438847531, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg0NzUzMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T22:46:00.000000Z", "updated_at": "2018-11-14T22:46:00.000000Z", "author_association": "COLLABORATOR", "body": "Empty strings are not possible to be replicated, and for columns which are non null strings, they cause the replication to break.\r\n\r\nAccording to the [PSQL docs](https://www.postgresql.org/docs/9.0/sql-copy.html), we have a couple options:\r\n- detect empty string, throw an intelligible error for users\r\n- detect a control string from user input stream (even let them configure it) and use `NULL 'some-string'` in our copy command\r\n  - if detected control string, throw intelligible error\r\n- `FORCE_QUOTE` will force us to quote everything which is not to be interpreted as a null value. This gets around this issue _I think_ in the most straightforward/elegant manner", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438859860", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-438859860", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 438859860, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg1OTg2MA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T23:38:39.000000Z", "updated_at": "2018-11-14T23:38:39.000000Z", "author_association": "COLLABORATOR", "body": "Okay, so I've got something working with `FORCE_NOT_NULL`. _Unfortunately_, what it ends up doing is making our data error even more specific:\r\n\r\n**On columns which _are_ nullable, where you are trying to persist the empty string, `null` will be persisted instead...**\r\n\r\nGiven the above limitations, I think it might be more reasonable to detect the control `NULL`, and then Error on that. Allow users to configure the control string, and move on. It makes for much better default behaviour.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/438861733", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-438861733", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 438861733, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg2MTczMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-14T23:47:40.000000Z", "updated_at": "2018-11-14T23:47:40.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann I think we can:\r\n\r\n1) Set the NULL identifier in copy to \"NULL\" and detect nulls on the incoming data. WARN on NULL in the incoming stream (often \"NULL\" is meant to be NULL, so we probably don't want to error)\r\n2) If we want a robust solution. Generate a random 128 bit string, and use that as the NULL identifier in the COPY command.\r\n\r\nIf 2 seems like it will take a lot more time than 1, we can just go with 1.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.510830Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/439065223", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-439065223", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 439065223, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTA2NTIyMw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-15T14:48:26.000000Z", "updated_at": "2018-11-15T14:48:26.000000Z", "author_association": "COLLABORATOR", "body": "Above was resolved in #31 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/439741223", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#issuecomment-439741223", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37", "id": 439741223, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTc0MTIyMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-19T00:40:14.000000Z", "updated_at": "2018-11-19T00:40:14.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Do we want to make the \"primary key\" columns not nullable? We may also want to not allow for multiple types on PK columns. I think being stricter on those columns is permissible.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/439903256", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#issuecomment-439903256", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37", "id": 439903256, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTkwMzI1Ng==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-19T14:04:56.000000Z", "updated_at": "2018-11-19T14:04:56.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 happy to move forward with every column being nullable. I wrote a blurb in the PR description about why I ended up _not_ doing that.\r\n\r\nReally, the decision was twofold:\r\n\r\n- smaller changeset for this pr\r\n- better/more expected user experience for schema which _don't_ change\r\n   - to this end, this is totally a thing for the pks", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/439917078", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#issuecomment-439917078", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/37", "id": 439917078, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTkxNzA3OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-19T14:47:12.000000Z", "updated_at": "2018-11-19T14:47:12.000000Z", "author_association": "COLLABORATOR", "body": "Another thing to note about the PKs, we already do pretty aggressive type/value checking against those here:\r\n\r\n- [makes sure that the `key_properties` _themselves_ are the same](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/postgres.py#L76-L82)\r\n- [makes sure that the types of each individual key prop have not changed](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/postgres.py#L743-L744)\r\n\r\nie, the above will fail if the pks change OR their types change.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/440003288", "html_url": "https://github.com/datamill-co/target-postgres/issues/12#issuecomment-440003288", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/12", "id": 440003288, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDAwMzI4OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-19T18:57:02.000000Z", "updated_at": "2018-11-19T18:57:02.000000Z", "author_association": "COLLABORATOR", "body": "(sorry, accidentally pressed close!)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/440711588", "html_url": "https://github.com/datamill-co/target-postgres/pull/41#issuecomment-440711588", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/41", "id": 440711588, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDcxMTU4OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-21T15:43:29.000000Z", "updated_at": "2018-11-21T15:43:29.000000Z", "author_association": "COLLABORATOR", "body": "NOTE: This pr is currently ballooned a little bit as it is branched off of the work done in:\r\n- #39 \r\n- #40 \r\n\r\nOnce those are merged the overall diff here will be more manageable.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/440741865", "html_url": "https://github.com/datamill-co/target-postgres/issues/14#issuecomment-440741865", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14", "id": 440741865, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDc0MTg2NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-21T17:08:53.000000Z", "updated_at": "2018-11-27T14:17:45.000000Z", "author_association": "COLLABORATOR", "body": "## anyOf\r\n\r\nWhen `anyOf` is detected, we:\r\n- perform a column split for _each_ schema found\r\n- persist data based on ***the first schema the provided value matches***\r\n  1. Warn user about slower speed of replication due to `anyOf` (since we have to check _every_ value a couple times)\r\n  2. I tell you `foo: {anyOf: [string, integer]}`, I provide you with the value `42`\r\n  3. persist that value to `foo__i`\r\n  4. then I provide you with `'bar'`\r\n  5. persist that value to `foo__s`\r\n\r\n## allOf\r\n\r\nWhen `allOf` is detected we simply use the _first_ provided schema and save only that in our `simplify` JSON Schema function.\r\n\r\nI can see users _eventually_ wanting to have the picking be smarter than just the first provided (ie, I told you `allOf : string, datetime`, use the `datetime` not the `string` as it's more specific) but I don't think doing anything clever to _start_ here is wise.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/442098236", "html_url": "https://github.com/datamill-co/target-postgres/issues/4#issuecomment-442098236", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/4", "id": 442098236, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjA5ODIzNg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-27T15:23:54.000000Z", "updated_at": "2018-11-27T15:23:54.000000Z", "author_association": "MEMBER", "body": "It feels like the when and high level how has been answered", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/442484195", "html_url": "https://github.com/datamill-co/target-postgres/issues/45#issuecomment-442484195", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/45", "id": 442484195, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjQ4NDE5NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-28T15:19:29.000000Z", "updated_at": "2018-11-28T15:19:29.000000Z", "author_association": "COLLABORATOR", "body": "Please see above PR for a description/failing tests.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443065176", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#issuecomment-443065176", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/46", "id": 443065176, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzA2NTE3Ng==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T02:10:28.000000Z", "updated_at": "2018-11-30T02:10:28.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Just a couple quick things on the README and a question on error handling", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443066318", "html_url": "https://github.com/datamill-co/target-postgres/issues/42#issuecomment-443066318", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42", "id": 443066318, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzA2NjMxOA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T02:17:05.000000Z", "updated_at": "2018-11-30T02:17:05.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Is this about this line? https://github.com/datamill-co/target-postgres/blob/master/target_postgres/sql_base.py#L192\r\nIt looks like its a bug, it's missing `records_map` and `key_properties`.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443067108", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-443067108", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 443067108, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzA2NzEwOA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T02:20:57.000000Z", "updated_at": "2018-11-30T02:20:57.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Would this be using the remote schema to check for the case that someone altered a column to not allow nulls? If that's the case, there's plenty of things someone can do to a column that we won't be able to detect that would cause similar failure. Like adding a `CHECK` or `CONSTRAINT`", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443070360", "html_url": "https://github.com/datamill-co/target-postgres/issues/14#issuecomment-443070360", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14", "id": 443070360, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzA3MDM2MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T02:38:11.000000Z", "updated_at": "2018-11-30T02:38:11.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann These could also be at the base level, eg a stream shema with:\r\n```\r\n{anyOf:[ {type:object,...}, {type:object,...}, {type:object,...}]}\r\n```\r\nIn that case, we may need to only allow for root schema anyOf/allOf/oneOf to be objects. I've seen this for APIs where the schema of an endpoint can vary, like an events endpoint.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443070651", "html_url": "https://github.com/datamill-co/target-postgres/issues/14#issuecomment-443070651", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/14", "id": 443070651, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzA3MDY1MQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T02:39:39.000000Z", "updated_at": "2018-11-30T02:39:39.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Me using \"such as\" was lazy of me. There's also \"oneOf\" and \"not\", though if \"not\" is difficult, I'd say not support it.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443284112", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443284112", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 443284112, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzI4NDExMg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T17:50:26.000000Z", "updated_at": "2018-11-30T17:50:26.000000Z", "author_association": "COLLABORATOR", "body": "Sooooo, fun thing:\r\n\r\n```\r\ntarget_postgres_test=# create table cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2 ();\r\nNOTICE:  identifier \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2\" will be truncated to \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af7\"\r\nCREATE TABLE\r\n\r\n```\r\n\r\nThat's the name of one of the temp tables we generate. That just _happens_ to work right now.\r\n\r\n@awm33 correct me if I'm wrong, but there's literally _no_ reason for prefixing the _real_ table name onto the _temp_ table name ***OTHER THAN*** for legibility for humans...correct? ie, if I fix this (very specific) issue by just using an autogen uuid to identify the temp table, we're really not losing anything as these temp tables would be autoremoved by the transaction rollback if there were an error?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443340518", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443340518", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 443340518, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM0MDUxOA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T21:10:39.000000Z", "updated_at": "2018-11-30T21:10:39.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I'd vote we close this issue out and instead create separate issues for the various things detailed in here: https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443272584", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443341190", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-443341190", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 443341190, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM0MTE5MA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T21:13:17.000000Z", "updated_at": "2018-11-30T21:13:17.000000Z", "author_association": "COLLABORATOR", "body": "No, this isn't someone modifying the remote. This would be something like:\r\n\r\n- stream schema where column `a`, can't be null\r\n- stream schema without a column `a`\r\n- remote will blow up, even though we _know_ there needs to be an actual default value in place for `a`...\r\n\r\nI don't think there's a really massive benefit for clients here, but I was lumping this in with \"we have the information to detect this\" bucket.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443341659", "html_url": "https://github.com/datamill-co/target-postgres/issues/2#issuecomment-443341659", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "id": 443341659, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM0MTY1OQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T21:15:17.000000Z", "updated_at": "2018-11-30T21:15:17.000000Z", "author_association": "COLLABORATOR", "body": "For what it's worth, I _think_ this issue will be \"auto-closed\" once we start in on rebasing/updating/splitting the \ud83d\udd34\u2b06\ufe0f branch to latest of master. There have been a lot of features specifically targeting issues like this.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443342235", "html_url": "https://github.com/datamill-co/target-postgres/issues/42#issuecomment-443342235", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42", "id": 443342235, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM0MjIzNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T21:17:36.000000Z", "updated_at": "2018-11-30T21:17:36.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 yeah, that's the bit. I agree it's a bug, but I'd also like to get a set of failing tests around it etc. in order to resolve it.\r\n\r\nie, this _should be_ very easy to patch, just need to prioritize etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443800584", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443800584", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 443800584, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgwMDU4NA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-03T17:43:45.000000Z", "updated_at": "2018-12-03T17:43:45.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann I think that makes sense. Maybe an issue per the first level of checks/bullets in the list you created above? Can you create those then close this?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443816750", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443816750", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 443816750, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgxNjc1MA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-03T18:30:33.000000Z", "updated_at": "2018-12-03T18:30:33.000000Z", "author_association": "COLLABORATOR", "body": "For reference in broken out issues:\r\n\r\nMechanism for normalization:\r\n- best effort is priority\r\n- if best effort fails and there is a collision: fail hard\r\n- steps:\r\n  - truncate\r\n  - if still collision/invalid: map to `__n`", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444165071", "html_url": "https://github.com/datamill-co/target-postgres/issues/51#issuecomment-444165071", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/51", "id": 444165071, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE2NTA3MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-04T16:32:55.000000Z", "updated_at": "2018-12-04T16:32:55.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 a side effect of our mechanism for handling this, is that it _does_ create a discrepancy in how we handle column type splitting.\r\n\r\nie, when we _map_ a colliding column to `...__1`, we are effectively doing the same thing when we do something like `...__b`. The key difference, is that in the case of mapping, we DO NOT touch the original column. Whereas, in the case of the type collisions, we split the column and rename the original column.\r\n\r\nWhile it is _less_ work _now_ to maintain this logic, I think one could make the case for not touching the original column as well.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/443272584", "html_url": "https://github.com/datamill-co/target-postgres/issues/18#issuecomment-443272584", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/18", "id": 443272584, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzI3MjU4NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-11-30T17:11:52.000000Z", "updated_at": "2018-12-04T16:33:14.000000Z", "author_association": "COLLABORATOR", "body": "Work that is teed up but has not _yet_ been done on this issue:\r\n\r\n- [x] name length issues\r\n  - [x] detect and alert length issue\r\n  - [x] decide on mechanism to truncate name\r\n  - [x] truncate with mechanism\r\n- [ ] table name issues (ie, you have a `stream` name which becomes the `root_table_name` or a generated `subtable_name`)\r\n  - [x] detect table name issues\r\n  - [ ] map invalid table name to canonicalized table name\r\n- [x] name _collision_ (ie, when a canonicalized/mapped/generated name collides)\r\n  - [x] detect and alert (_mostly done_)\r\n  - [x] decide on mechanism to unambiguously identify collided names\r\n  - [x] unambiguously identify names", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444229633", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-444229633", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 444229633, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDIyOTYzMw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-04T19:37:14.000000Z", "updated_at": "2018-12-04T19:37:14.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 another approach we could take here, which is more nuanced:\r\n\r\n- detect when fields are missing which are required in the remote\r\n- make all missing fields `nullable` (hence, no hard fail, better than making everything `null` from the start)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444277797", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-444277797", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 444277797, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDI3Nzc5Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-04T22:08:21.000000Z", "updated_at": "2018-12-04T22:08:21.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Basically, detect fields in remote that are present in remote (the database) and non-null, but are not present in the current stream schema?\r\n\r\nI'm wondering if there are any potential consequences. The only one I can think of is if someone adds a field outside of the target. Though, couldn't we use the metadata to detect that? Since the previous version of the schema should be in the table metadata. So if column `a` is present in the current metadata, and is not present in the new schema, make the new column nullable. If it's not present, allow for it to blow up, because it may have been altered outside of the target.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444286444", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-444286444", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 444286444, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDI4NjQ0NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-04T22:37:52.000000Z", "updated_at": "2018-12-04T22:37:52.000000Z", "author_association": "COLLABORATOR", "body": "1. Nope, we don't store that information. We only store information about columns where the colunm was mapped to another _name_\r\n1. Actually, I think that the use case you're describing is a benefit. If I add a column to a table which is going to be appended to later AND I've made it non-nullable, when we go to stream to it later, we're going to blow up. vs, in this proposal, we'd warn you about it, but make it nullable and move on in life.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444537713", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-444537713", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 444537713, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDUzNzcxMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-05T15:59:33.000000Z", "updated_at": "2018-12-05T15:59:33.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Oh, I thought we were storing JSON typing information in the metadata as well. Should we be?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/444899397", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-444899397", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 444899397, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg5OTM5Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-06T14:59:11.000000Z", "updated_at": "2018-12-06T14:59:11.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 presently we're only storing that information which _cannot_ be derived from the schema itself. So for things like name `mapping`s, you can't piece that information together from the schema, so we store all of the information about that column inside the mapping. But for a stock and standard column, whose name is the exact same (casing and everything) as its originating field/property, we don't store anything.\r\n\r\nWe could store that data, but I'm not sure how much we'd get from that.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445383901", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-445383901", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 445383901, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTM4MzkwMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-07T22:21:42.000000Z", "updated_at": "2018-12-07T22:21:42.000000Z", "author_association": "COLLABORATOR", "body": "So while working on the table name mapping stuff, I think there is actually some benefit to be gotten by persisting all of the column information as well. I'm going to leave that alone for now as I think there's some stabilization work to be done before next Wednesday anyways.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445385837", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-445385837", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 445385837, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTM4NTgzNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-07T22:30:45.000000Z", "updated_at": "2018-12-07T22:30:45.000000Z", "author_association": "COLLABORATOR", "body": "So this touches on a couple things:\r\n\r\n- we need to pick a name for the column under which to put these values in the `root_table_name__categories` table\r\n   - proposal: `root_table_name__categories: __literal`\r\n- nested arrays of arrays are also not handled...which is a whole other bit o' fun. ie:\r\n  - `{... 'categories': [[1, 2], [3, 4], ...] ...}` and more levels of nesting\r\n  - To handle this, I'd propose doing:\r\n    - `root_table_name__categories: __index__0, __index__1 ...` (or something such as)\r\n- Another fun problem: `{type: array,  items: {type: oneOf ...}`\r\n  - in this case, I _think_ we want to _merge_ the resulting tables, not try to postfix them with a type...I think...", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:36.777403Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445413594", "html_url": "https://github.com/datamill-co/target-postgres/issues/42#issuecomment-445413594", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42", "id": 445413594, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQxMzU5NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-08T00:45:12.000000Z", "updated_at": "2018-12-08T00:45:12.000000Z", "author_association": "COLLABORATOR", "body": "https://github.com/datamill-co/target-postgres/pull/63 demonstrates the above.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445413622", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-445413622", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 445413622, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQxMzYyMg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-08T00:45:26.000000Z", "updated_at": "2018-12-08T00:45:26.000000Z", "author_association": "COLLABORATOR", "body": "https://github.com/datamill-co/target-postgres/pull/63 demonstrates the above.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445900130", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-445900130", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 445900130, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTkwMDEzMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-10T17:27:41.000000Z", "updated_at": "2018-12-10T17:27:41.000000Z", "author_association": "COLLABORATOR", "body": "https://www.stitchdata.com/docs/data-structure/nested-data-structures-row-count-impact", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445900177", "html_url": "https://github.com/datamill-co/target-postgres/issues/42#issuecomment-445900177", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/42", "id": 445900177, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTkwMDE3Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-10T17:27:50.000000Z", "updated_at": "2018-12-10T17:27:50.000000Z", "author_association": "COLLABORATOR", "body": "https://www.stitchdata.com/docs/data-structure/nested-data-structures-row-count-impact", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445904000", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-445904000", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 445904000, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTkwNDAwMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-10T17:39:11.000000Z", "updated_at": "2018-12-10T17:39:48.000000Z", "author_association": "COLLABORATOR", "body": "# Reference\r\n## Nested dictionaries per stitch:\r\n\r\n> `[object_name]__[property_name]__[sub_propery_name]...`\r\n\r\n## Nested arrays per stitch:\r\n\r\nMentions `_sdc_level_n` column, but does not go in depth about what happens when n\r\n\r\n## Literal arrays per stitch:\r\n\r\nN/A\r\n\r\n# Proposal\r\n\r\n## Nested dictionaries\r\n\r\nHandle in a similar manner to that provided by Stitch. ie, denest into parent table, make the column name long and ugly.\r\n\r\n## Literal Arrays\r\n\r\nSeparate table. Use similar pks as to how we deal with object arrays currently. Value goes into `__value` column, index goes into `__index` column. (better prefix desired, but don't want to use `sdc` like everything else as this is _not_ a `sdc` thing)\r\n\r\n## Nested Arrays\r\n\r\nSimilar handling to literal arrays. Continue de-nesting values, making long ugly tables with names like:\r\n\r\n`root__nested_array_column____value____value____value` etc.\r\n\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/445973370", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-445973370", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 445973370, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTk3MzM3MA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-10T21:07:50.000000Z", "updated_at": "2018-12-10T21:07:50.000000Z", "author_association": "COLLABORATOR", "body": "Per Stitch:\r\n\r\n> Arrays of literals are treated the same as arrays of objects _except_ the values in the array will be denested into a `value` column` and the index of the value will be placed in the `_sdc_level_<n>_id`\r\n\r\n@awm33 I might still propose that we tuck values into somthing like `_sdc_value` etc. (choose your prefix etc.)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446060481", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-446060481", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 446060481, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjA2MDQ4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T03:34:22.000000Z", "updated_at": "2018-12-11T03:34:22.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 this pr now has fixes for _some_ of the known bugs: https://github.com/datamill-co/target-postgres/pull/63\r\n\r\nThe only one which is remaining, is defaulting for arrays or objects. This is _probably_ reasonable to leave as feature work.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446209181", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-446209181", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 446209181, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjIwOTE4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T13:51:51.000000Z", "updated_at": "2018-12-11T13:51:51.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 another bug which is not presently covered is multiple types for a column in a single batch. Getting the upserting of the schema functionality to work was quite straightforward, but getting the denesting to be able to handle splitting values between things is not yet so straightforward.\r\n\r\nI can tackle this today, but I could also see this as being something to push to post v0.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446255848", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-446255848", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 446255848, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjI1NTg0OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T16:00:40.000000Z", "updated_at": "2018-12-11T16:00:40.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann For the prefix, that's tough. I'm guessing the thinking was `_sdc_*` are metadata columns where this is an actual data value? Though `_sdc_*` could mean any synthesized column. `value` will be no where in the original schema. Lets add the prefix.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446265057", "html_url": "https://github.com/datamill-co/target-postgres/issues/62#issuecomment-446265057", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/62", "id": 446265057, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjI2NTA1Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T16:23:29.000000Z", "updated_at": "2018-12-11T16:23:29.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann What would you replace the current names with? Maybe propose some naming changes and use examples.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446270041", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-446270041", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 446270041, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjI3MDA0MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T16:36:27.000000Z", "updated_at": "2018-12-11T16:36:27.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 to clarify, you _specifically_ mean make literal values into `_sdc_value` correct?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446270274", "html_url": "https://github.com/datamill-co/target-postgres/issues/58#issuecomment-446270274", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/58", "id": 446270274, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjI3MDI3NA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-11T16:37:07.000000Z", "updated_at": "2018-12-11T16:37:07.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Yes", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/446425012", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#issuecomment-446425012", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/63", "id": 446425012, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQyNTAxMg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-12T01:18:12.000000Z", "updated_at": "2018-12-12T01:18:12.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Just need to address tests", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/447398581", "html_url": "https://github.com/datamill-co/target-postgres/issues/44#issuecomment-447398581", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/44", "id": 447398581, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzM5ODU4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2018-12-14T17:42:46.000000Z", "updated_at": "2018-12-14T17:42:46.000000Z", "author_association": "COLLABORATOR", "body": "This should no longer be a concern due to leveraging column paths over serialized names to pull values out etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/451206688", "html_url": "https://github.com/datamill-co/target-postgres/issues/74#issuecomment-451206688", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74", "id": 451206688, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTIwNjY4OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-03T16:58:57.000000Z", "updated_at": "2019-01-03T16:58:57.000000Z", "author_association": "MEMBER", "body": "We should probably log things around table versions and version activation as well.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/451308667", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#issuecomment-451308667", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/76", "id": 451308667, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTMwODY2Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-03T23:16:50.000000Z", "updated_at": "2019-01-03T23:16:50.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Just a couple of things. Rather than comment on each use of JSON, I think we want the logs to me human readable, and the metrics to be the machine focused item. Metrics can use tags to add additional meta information.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/451679384", "html_url": "https://github.com/datamill-co/target-postgres/issues/74#issuecomment-451679384", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/74", "id": 451679384, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3OTM4NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-05T18:28:46.000000Z", "updated_at": "2019-01-05T18:28:46.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I'd vote we cut this/tag it and close this issue.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/453172272", "html_url": "https://github.com/datamill-co/target-postgres/issues/61#issuecomment-453172272", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61", "id": 453172272, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE3MjI3Mg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-10T17:01:46.000000Z", "updated_at": "2019-01-10T17:01:46.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I believe this to be done!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/453172593", "html_url": "https://github.com/datamill-co/target-postgres/issues/65#issuecomment-453172593", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/65", "id": 453172593, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE3MjU5Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-10T17:02:32.000000Z", "updated_at": "2019-01-10T17:02:32.000000Z", "author_association": "COLLABORATOR", "body": "Logger has been tackled here: https://github.com/datamill-co/target-postgres/pull/76\r\n\r\nError class would still be wise.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/454245723", "html_url": "https://github.com/datamill-co/target-postgres/issues/61#issuecomment-454245723", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/61", "id": 454245723, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDI0NTcyMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-15T02:33:37.000000Z", "updated_at": "2019-01-15T02:33:37.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Mhmmm", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/454528515", "html_url": "https://github.com/datamill-co/target-postgres/issues/80#issuecomment-454528515", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/80", "id": 454528515, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDUyODUxNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-15T19:54:39.000000Z", "updated_at": "2019-01-15T19:54:39.000000Z", "author_association": "COLLABORATOR", "body": "This has been tested now.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/456826903", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-456826903", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 456826903, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjgyNjkwMw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-23T14:43:45.000000Z", "updated_at": "2019-01-23T14:43:45.000000Z", "author_association": "MEMBER", "body": "@BenderV How much data are you streaming in (records and maybe bytes) and how long does it run before it drops the connection?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/456841586", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-456841586", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 456841586, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg0MTU4Ng==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-23T15:20:30.000000Z", "updated_at": "2019-01-23T15:20:30.000000Z", "author_association": "COLLABORATOR", "body": "@BenderV this is a pretty common problem. There are _a lot_ of settings which come up between any shell command and a remote psql connection.\r\n\r\nTo @awm33's questions above, data which you can include which will greatly help us here:\r\n- [ ] your configuration file **with all of your connection information redacted**\r\n  - ie, we don't need username, host, password, etc.\r\n- [ ] version of:\r\n  - `target-postgres` which you are running\r\n  - python you are running (looks like 3.6?)\r\n  - psql you're targetting\r\n- [ ] some stats around the size of stream in records and bytes (estimates are fine)\r\n  - curious about your batch sizes and whether we have some wiggle room to help you adjust those\r\n- [ ] timing between you starting to run things and this error occurring (maybe more logs?)\r\n- [ ] something detailing the schema\r\n  - If it's something severely nested that will have some impact here\r\n- [ ] is there an ssh tunnel between the process running `target-postgres` and your `postgres` instance?\r\n- [ ] have you modified the default `statement_timeout` in your conf file?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/459118300", "html_url": "https://github.com/datamill-co/target-postgres/pull/1#issuecomment-459118300", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/1", "id": 459118300, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTExODMwMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-30T21:34:46.000000Z", "updated_at": "2019-01-30T21:34:46.000000Z", "author_association": "COLLABORATOR", "body": "@kevinsanz93, I think you'll be interested in: https://pypi.org/project/target-redshift/\r\n\r\n@awm33 I'd like to vote we close this pr, and take up Redshift issues in https://github.com/datamill-co/target-redshift", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/459120095", "html_url": "https://github.com/datamill-co/target-postgres/issues/2#issuecomment-459120095", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "id": 459120095, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEyMDA5NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-30T21:40:14.000000Z", "updated_at": "2019-01-30T21:40:14.000000Z", "author_association": "COLLABORATOR", "body": "@kevinsanz93 @awm33 I think this has been resolved in https://pypi.org/project/target-redshift/", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/459203368", "html_url": "https://github.com/datamill-co/target-postgres/issues/2#issuecomment-459203368", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/2", "id": 459203368, "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTIwMzM2OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-01-31T03:40:31.000000Z", "updated_at": "2019-01-31T03:40:31.000000Z", "author_association": "MEMBER", "body": "@kevinsanz93 Closing this out. Please check out the now official `target-redshift` :)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/461965064", "html_url": "https://github.com/datamill-co/target-postgres/pull/94#issuecomment-461965064", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94", "id": 461965064, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTk2NTA2NA==", "user": {"login": "mirelagrigoras", "id": 47386964, "node_id": "MDQ6VXNlcjQ3Mzg2OTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/47386964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirelagrigoras", "html_url": "https://github.com/mirelagrigoras", "followers_url": "https://api.github.com/users/mirelagrigoras/followers", "following_url": "https://api.github.com/users/mirelagrigoras/following{/other_user}", "gists_url": "https://api.github.com/users/mirelagrigoras/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirelagrigoras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirelagrigoras/subscriptions", "organizations_url": "https://api.github.com/users/mirelagrigoras/orgs", "repos_url": "https://api.github.com/users/mirelagrigoras/repos", "events_url": "https://api.github.com/users/mirelagrigoras/events{/privacy}", "received_events_url": "https://api.github.com/users/mirelagrigoras/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-08T22:13:29.000000Z", "updated_at": "2019-02-08T22:13:29.000000Z", "author_association": "NONE", "body": "Thank you for your feedback.I will do the changes you suggested and also\nrun the tests that you wrote, if you don't mind and get back to you\ntomorrow.\n\n\u00cen Vin, 8 feb. 2019, 23:29 Alexander Mann <notifications@github.com a scris:\n\n> *@AlexanderMann* requested changes on this pull request.\n>\n> @mirelagrigoras <https://github.com/mirelagrigoras> I took a stab at this\n> as well before seeing your work in here. This is great! Also, good catch\n> with the key_properties being passed into persist_csv.\n>\n> I don't see any failing tests herein, and we'll need those for future\n> proofing etc. If you wanna check out my pr and steal the tests feel free.\n>\n> #95 <https://github.com/datamill-co/target-postgres/pull/95>\n>\n> I'll leave it up to you as to whether you want to merge the prs, or if you\n> want to review mine and we can try to get that one through!\n> ------------------------------\n>\n> In target_postgres/postgres.py\n> <https://github.com/datamill-co/target-postgres/pull/94#discussion_r255240971>\n> :\n>\n> > @@ -459,7 +463,7 @@ def persist_csv_rows(self,\n>\n>          update_sql = self._get_update_sql(remote_schema['name'],\n>                                            temp_table_name,\n> -                                          remote_schema['key_properties'],\n> +                                          [key.lower() for key in remote_schema['key_properties']],\n>\n> I think you also have an issue with other values being canonicalized to _\n> by the canonicalize_identifier code. I think for your persist_csv code\n> you'll need to do the same thing as what you did on line 142.\n> ------------------------------\n>\n> In target_postgres/postgres.py\n> <https://github.com/datamill-co/target-postgres/pull/94#discussion_r255241238>\n> :\n>\n> > @@ -125,6 +124,8 @@ def write_batch(self, stream_buffer):\n>                                                               (stream_buffer.stream,),\n>                                                               stream_buffer.stream)\n>\n> +                table_metadata = self._get_table_metadata(cur,\n>\n> This should probably be moved to line ~140 as it's only used there. By\n> doing that it better scopes the variable so that it's not being used\n> accidentally in more places.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/datamill-co/target-postgres/pull/94#pullrequestreview-201792733>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AtMRVAWidLq9wvubNtH9L3XuVBadqKlkks5vLexNgaJpZM4aq0hN>\n> .\n>\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/461975951", "html_url": "https://github.com/datamill-co/target-postgres/pull/94#issuecomment-461975951", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/94", "id": 461975951, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTk3NTk1MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-08T22:59:12.000000Z", "updated_at": "2019-02-08T22:59:12.000000Z", "author_association": "COLLABORATOR", "body": "@mirelagrigoras sounds good. It looks like @awm33 already approved the other pr. I'll go ahead and merge and get releases cut so that we can get Redshift updated with the same changes.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/464760948", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-464760948", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 464760948, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDc2MDk0OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-18T14:54:56.000000Z", "updated_at": "2019-02-18T14:54:56.000000Z", "author_association": "COLLABORATOR", "body": "@BenderV \ud83c\udfd3 if you haven't seen this already. I think @awm33 and I have _some_ ideas around how to make things better for folks as far as connections etc. go. If we don't hear back from you by the end of the week, I think we'll detail the improvements we think make the best sense broadly, then try and get those scheduled for fix. \ud83d\udc4d is a vote of confidence!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/465085593", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-465085593", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 465085593, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTA4NTU5Mw==", "user": {"login": "BenderV", "id": 2799516, "node_id": "MDQ6VXNlcjI3OTk1MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2799516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenderV", "html_url": "https://github.com/BenderV", "followers_url": "https://api.github.com/users/BenderV/followers", "following_url": "https://api.github.com/users/BenderV/following{/other_user}", "gists_url": "https://api.github.com/users/BenderV/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenderV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenderV/subscriptions", "organizations_url": "https://api.github.com/users/BenderV/orgs", "repos_url": "https://api.github.com/users/BenderV/repos", "events_url": "https://api.github.com/users/BenderV/events{/privacy}", "received_events_url": "https://api.github.com/users/BenderV/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-19T10:58:56.000000Z", "updated_at": "2019-02-19T10:58:56.000000Z", "author_association": "NONE", "body": "I'll let do your magic ;)\r\nI don't know how that will help you but here is my config.\r\nIf you need me to test a new version, I'm happy to help\r\n\r\n---\r\n\r\n* your configuration file\r\n\r\n```\r\n{\r\n  \"postgres_host\": \"xxx\",\r\n  \"postgres_port\": 5432,\r\n  \"postgres_database\": \"xxx\",\r\n  \"postgres_username\": \"xxx\",\r\n  \"postgres_password\": \"xxx\",\r\n  \"postgres_schema\": \"data\",\r\n  \"disable_collection\": true\r\n}\r\n```\r\n\r\n* version of:\r\n  * `target-postgres` which you are running\r\n    `singer-target-postgres==0.1.1`\r\n  * python you are running (looks like 3.6?)\r\n    `python 3.6.5`\r\n   * psql you're targetting\r\n    `I don't use psql ??`\r\n\r\n* some stats around the size of stream in records and bytes (estimates are fine)\r\n`~ from 100 to 1000 records (1 to 10Mbits). I've tried to split the input file into multiple chunks (10), it worked but still failed many times` \r\n\r\n*  timing between you starting to run things and this error occurring (maybe more logs?)\r\n`~2-5 min`\r\n\r\n*  something detailing the schema\r\n   * If it's something severely nested that will have some impact her\r\n   `The source is pipedrive` : https://github.com/singer-io/tap-pipedrive/\r\n\r\n* is there an ssh tunnel between the process running `target-postgres` and your `postgres` instance?\r\nNo\r\n\r\n*  have you modified the default statement_timeout in your conf file?\r\nNo\r\n\r\n---", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.153734Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/465622681", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-465622681", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 465622681, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTYyMjY4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-20T15:21:52.000000Z", "updated_at": "2019-02-20T15:21:52.000000Z", "author_association": "COLLABORATOR", "body": "Interesting. That's super helpful! Thanks @BenderV.\r\n\r\n> I don't use psql ??\r\n\r\nSorry, I meant PostgreSQL, ie, what version is the server for you?\r\n\r\nIt's not necessary for us to move forward here, but if you get the chance and can provide some of the nested data as the json stream (***cleansed of course***) I can make a test to improve this functionality specifically.\r\n\r\n------\r\n\r\nIt _sounds_ like to me that we're creating the connection, we then do a _bunch_ of denesting which takes a long long time, and that by the time we get back to our cursor/connection has forced a timeout and dropped with the server.\r\n\r\n@BenderV we're up to Version `0.1.4` now. In `0.1.3` (I think?) we introduced a `logging_level` flag which makes `target-postgres` _wayyyyyyy_ chattier and helps with (unsurprisingly) debugging. If you get a chance, can you bump to that version and rerun to see if the logs give any clearer indication as to the behaviour etc.? https://github.com/datamill-co/target-postgres/pull/92\r\n\r\n-----\r\n\r\nLastly, if you want to share logs and data more securely and have us do the cleansing etc., we can potentially arrange something to help you out", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/466329609", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-466329609", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 466329609, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjMyOTYwOQ==", "user": {"login": "BenderV", "id": 2799516, "node_id": "MDQ6VXNlcjI3OTk1MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2799516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenderV", "html_url": "https://github.com/BenderV", "followers_url": "https://api.github.com/users/BenderV/followers", "following_url": "https://api.github.com/users/BenderV/following{/other_user}", "gists_url": "https://api.github.com/users/BenderV/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenderV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenderV/subscriptions", "organizations_url": "https://api.github.com/users/BenderV/orgs", "repos_url": "https://api.github.com/users/BenderV/repos", "events_url": "https://api.github.com/users/BenderV/events{/privacy}", "received_events_url": "https://api.github.com/users/BenderV/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-22T09:17:53.000000Z", "updated_at": "2019-02-22T09:17:53.000000Z", "author_association": "NONE", "body": "@AlexanderMann `PostgreSQL 9.6.6 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.3 20140911 (Red Hat 4.8.3-9), 64-bit`\r\n\r\nI'll get back with some logs of `0.1.4` !", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/466432913", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-466432913", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 466432913, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjQzMjkxMw==", "user": {"login": "BenderV", "id": 2799516, "node_id": "MDQ6VXNlcjI3OTk1MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2799516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenderV", "html_url": "https://github.com/BenderV", "followers_url": "https://api.github.com/users/BenderV/followers", "following_url": "https://api.github.com/users/BenderV/following{/other_user}", "gists_url": "https://api.github.com/users/BenderV/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenderV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenderV/subscriptions", "organizations_url": "https://api.github.com/users/BenderV/orgs", "repos_url": "https://api.github.com/users/BenderV/repos", "events_url": "https://api.github.com/users/BenderV/events{/privacy}", "received_events_url": "https://api.github.com/users/BenderV/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-22T15:20:05.000000Z", "updated_at": "2019-02-22T15:20:05.000000Z", "author_association": "NONE", "body": "@AlexanderMann Well, I have good news, and bad news. \r\n\r\nI upgrade to `0.1.4`.\r\nThe good news is that I don't have the bug. \r\nThe bad news is that I can't reproduce it ahah\r\n\r\n\u00af\\_(\u30c4)_/\u00af \r\n\r\nI will notify you if I have it again. Thanks !", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/466524852", "html_url": "https://github.com/datamill-co/target-postgres/issues/91#issuecomment-466524852", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/91", "id": 466524852, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjUyNDg1Mg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-02-22T19:51:02.000000Z", "updated_at": "2019-02-22T19:51:02.000000Z", "author_association": "COLLABORATOR", "body": "@BenderV woot! Glad to hear you're unblocked...though...I obviously _wish_ it were not quantum in nature...\r\n\r\nI'm going to close this for the time being, and if we get similar issues/you run into this again, hopefully we'll be in a better place to snag what's going on!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/471751695", "html_url": "https://github.com/datamill-co/target-postgres/issues/99#issuecomment-471751695", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99", "id": 471751695, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTc1MTY5NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-11T21:56:39.000000Z", "updated_at": "2019-03-11T21:56:39.000000Z", "author_association": "COLLABORATOR", "body": "I think I've identified the bug here. It has to do with how we're serializing fields which have _multiple_ types. There are, I think, a couple bugs therein:\r\n\r\n- multi type, non numeric\r\n- single type, `[null, number]` which has values being sent as `integer`s (ie, the schema is `[null, number]`, but the values are something like `1234, 567, 8, 90` etc.\r\n\r\nI'm fixing this bug, and _then_ I will improve the error message.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/471765615", "html_url": "https://github.com/datamill-co/target-postgres/issues/99#issuecomment-471765615", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/99", "id": 471765615, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTc2NTYxNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-11T22:30:24.000000Z", "updated_at": "2019-03-11T22:30:24.000000Z", "author_association": "COLLABORATOR", "body": "Correction: the single type for `[null, number]` is perfectly fine.\r\n\r\nI've found the issue. When we have a `null` value we _cannot_ assign it a \"python type\". ie, we don't _really_ know what value \"lack of value\" represents in Postgres. As such, for split column types, we don't know which column to write \"nothing\" to.\r\n\r\nThe fix, is effectively to do _less_ work. Presently we set default `null` values for _every_ column in the remote schema. Since we've already done this, if we see that we're going to write yet _another_ `null` value to the column, we can avoid this, which circumvents us trying to find a column mapping for an unknown schema.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/471780508", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#issuecomment-471780508", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/100", "id": 471780508, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTc4MDUwOA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-11T23:24:21.000000Z", "updated_at": "2019-03-11T23:24:21.000000Z", "author_association": "COLLABORATOR", "body": "Additionally: I ran the _full_ `catalog.json` file through the sandbox testing. I did _not_ generate values for the records for each table...as that would have been...something...\r\n\r\nButtttt there was no issue persisting the tables to remote. So that's good!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/473047272", "html_url": "https://github.com/datamill-co/target-postgres/issues/7#issuecomment-473047272", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/7", "id": 473047272, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzA0NzI3Mg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-14T20:26:29.000000Z", "updated_at": "2019-03-14T20:26:29.000000Z", "author_association": "MEMBER", "body": "We've been adding more as we encounter them in the wild. Of course we should be constantly adding more test cases as we encounter more data, but this covered enough to close this issue.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/473943347", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-473943347", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 473943347, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzk0MzM0Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-18T14:52:56.000000Z", "updated_at": "2019-03-18T14:52:56.000000Z", "author_association": "COLLABORATOR", "body": "# Test Cases\r\n\r\nBelow are some things I think we should be concerned about with _whatever_ solution we choose. @awm33 if you could weigh in with your gut reaction to how you think each situation should behave:\r\n\r\n## Non-Standard Stream Name\r\n\r\nStream comes in with a name like `x`, produces a root table with the name `y`?:\r\n\r\n- `` : Empty string -> ???\r\n- `streaM` : Contains capital letters -> ???\r\n- `Stream` : Starts with capital letters -> ???\r\n- `xxxx...xxx` : Extremely _long_ field (longer than the max identifier length) -> ???\r\n- `@#%^&*((` : Non alphanumeric, underscor, dollar sign -> ???\r\n\r\n## Non-Standard Stream Name, Nested Data\r\n\r\nStream comes in with a name like `x` and nested data, produces a child tables with names like `y__`?:\r\n\r\n## Colliding Stream Name\r\n\r\nStream named `x` comes, another stream named `X` comes. These produce ???\r\n\r\nie, do we get _two_ distinct root tables, or do we let them populate the same remote table? If we make them distinct, what are they named?\r\n\r\n## Colliding Stream Name, Nested Data\r\n\r\nStream named `x` comes with nested fields `a` and `c`, another stream named `X` comes with nested fields `b` and `d`. These produce ???\r\n\r\n# Proposed Results\r\n\r\n- Non-Standard Stream Name\r\n  - Follow conventions set by nested fields/child tables:\r\n    - Empty -> `_`\r\n    - Capitals get lowercased\r\n    - Long identifiers get truncated\r\n    - Non alphanumeric, underscore, dollar sign -> `_`\r\n  - Nested fields/data\r\n    - Whatever the root table's name _ends up_ being, we use that as the prefix with `__` separating\r\n      - **_NOTE_**: for long identifiers, this can potentially result in incredibly ugly/unusable table names etc.\r\n- Colliding Stream Name\r\n  - follow the conventions by other identifiers and append an integer till we get a unique value\r\n    - NOTE: This will make nested fields etc. potentially _very_ confusing\r\n  - Nested fields/data\r\n    - same solution as above with the root table name being what we prefix with\r\n\r\n# Proposed Solution\r\n\r\nAfter having had time to think about this, I don't _think_ we have the information stored in a format presently which makes modifying this particularly convenient. ie, we're not storing the `path` to tables in the `metadata` already.\r\n\r\nI think the simplest solution for us, is probably to go with the `Load Table Mappings` option from above. However, this _will_ required a schema bump, and migration etc.\r\n\r\nThe advantage to this approach is that adding and managing `table mappings` becomes _really_ straightforward. The disadvantage (potentially) is around managing the mappings when there are a _lot_ of resultant tables in a single Postgres schema.\r\n\r\nThat all being said, I think a spike to investigate this is worth it\r\n\r\n# Proposed Hack\r\n\r\nSooooooooo...a route we could go here is to provide a config option for `dangerous__canonicalize_stream_name`. This would just disable the validation on the stream name, and then canonicalize it etc. I'm not sure how much work will be necessary for this, nor am I sure whether this can be even remotely forward compatible...", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/474502655", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-474502655", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 474502655, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDUwMjY1NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-19T18:05:17.000000Z", "updated_at": "2019-03-19T18:05:17.000000Z", "author_association": "COLLABORATOR", "body": "An issue that's popping up with this change is how we're currently handling table versioning stuffs. That logic has been shaky/known to be a bit bug ridden for a while due to it relying upon postfixes and whatnot. I think that if we're going to invest _more_ time into this procedure, we'll also need to invest time into shoring that logic up and making it a bit more airtight.\r\n\r\n_This_ more than the other schema changes, could present a problem to existing schemas. If an activate version command has not yet come in, and then we decide to run this migration etc., we could easily break things etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/474505114", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-474505114", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 474505114, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDUwNTExNA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-19T18:09:53.000000Z", "updated_at": "2019-03-19T18:09:53.000000Z", "author_association": "COLLABORATOR", "body": "Also, utilizing casting to json will not work with _native_ 8.4.22. _Redshift_ however has a bunch of json support baked into it...going to look into what all we _can_ and _cannot_ do across versions. Additionally, we may have to install some extensions etc. into our 8.4.22 tests.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/474837383", "html_url": "https://github.com/datamill-co/target-postgres/issues/103#issuecomment-474837383", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "id": 474837383, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDgzNzM4Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-20T13:50:03.000000Z", "updated_at": "2019-03-20T13:50:03.000000Z", "author_association": "COLLABORATOR", "body": "Yup, that all looks about right! @gpetepg do you want to fork and add in the necessary docs into the readme/etc.? If not @awm33 or myself will get around to it prolly before next week.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/474944367", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-474944367", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 474944367, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk0NDM2Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-20T17:27:11.000000Z", "updated_at": "2019-03-20T17:27:11.000000Z", "author_association": "COLLABORATOR", "body": "Redshift supports the common [PSQL function JSON_EXTRACT_PATH_TEXT](https://docs.aws.amazon.com/redshift/latest/dg/JSON_EXTRACT_PATH_TEXT.html).\r\n\r\nThis is not available in 8.4.22...but...the _simplest_ thing to do _might_ be to make a function in 8.4.22 which is _called_ that, but really just takes text, a field, and returns a string array. That way it'd _behave_ like the actual call and response we expect, without us having to ditch the useful testing of 8.4.22 in lieu of more costly/time-consuming Redshift calls etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/474952515", "html_url": "https://github.com/datamill-co/target-postgres/issues/103#issuecomment-474952515", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "id": 474952515, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk1MjUxNQ==", "user": {"login": "gpetepg", "id": 24799706, "node_id": "MDQ6VXNlcjI0Nzk5NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/24799706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpetepg", "html_url": "https://github.com/gpetepg", "followers_url": "https://api.github.com/users/gpetepg/followers", "following_url": "https://api.github.com/users/gpetepg/following{/other_user}", "gists_url": "https://api.github.com/users/gpetepg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpetepg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpetepg/subscriptions", "organizations_url": "https://api.github.com/users/gpetepg/orgs", "repos_url": "https://api.github.com/users/gpetepg/repos", "events_url": "https://api.github.com/users/gpetepg/events{/privacy}", "received_events_url": "https://api.github.com/users/gpetepg/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-20T17:43:35.000000Z", "updated_at": "2019-03-20T17:43:35.000000Z", "author_association": "CONTRIBUTOR", "body": "> Yup, that all looks about right! @gpetepg do you want to fork and add in the necessary docs into the readme/etc.? If not @awm33 or myself will get around to it prolly before next week.\r\n\r\nI'll fork and make a PR before the end of the week. I'll take a look at the other taps and targets too and see what I can add so I can get more involved slowly.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/475259540", "html_url": "https://github.com/datamill-co/target-postgres/issues/103#issuecomment-475259540", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "id": 475259540, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTI1OTU0MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-21T14:47:16.000000Z", "updated_at": "2019-03-21T14:47:16.000000Z", "author_association": "MEMBER", "body": "I wouldn't make Slack an official/required part of the process, but recommend asking in the Singer Slack, and in particular the #target-postgres channel.\r\n\r\nI like \"File new issue -> Fork -> PR -> Approval -> Merge\"\r\n\r\nUsers can file an issue without submitting a PR. I consider that contributing, they just can't expect it will be addressed.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/475288956", "html_url": "https://github.com/datamill-co/target-postgres/issues/103#issuecomment-475288956", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "id": 475288956, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTI4ODk1Ng==", "user": {"login": "gpetepg", "id": 24799706, "node_id": "MDQ6VXNlcjI0Nzk5NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/24799706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpetepg", "html_url": "https://github.com/gpetepg", "followers_url": "https://api.github.com/users/gpetepg/followers", "following_url": "https://api.github.com/users/gpetepg/following{/other_user}", "gists_url": "https://api.github.com/users/gpetepg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpetepg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpetepg/subscriptions", "organizations_url": "https://api.github.com/users/gpetepg/orgs", "repos_url": "https://api.github.com/users/gpetepg/repos", "events_url": "https://api.github.com/users/gpetepg/events{/privacy}", "received_events_url": "https://api.github.com/users/gpetepg/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-03-21T15:54:39.000000Z", "updated_at": "2019-03-21T15:54:39.000000Z", "author_association": "CONTRIBUTOR", "body": "Makes sense, I'll note both of those in the README. Working on it now.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478656287", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-478656287", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 478656287, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY1NjI4Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-01T16:46:43.000000Z", "updated_at": "2019-04-01T16:46:54.000000Z", "author_association": "COLLABORATOR", "body": "- To note:\r\n    - not a lot of other targets with metrics\r\n    - less defined things/types etc.\r\n    - timing type\r\n    - count type\r\n    - tagging system\r\n    - taps for databases will have metrics in them which are most likely the metrics we want\r\n    - `target-redshift` might want s3 information", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478661695", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-478661695", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 478661695, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY2MTY5NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-01T17:02:20.000000Z", "updated_at": "2019-04-01T17:02:20.000000Z", "author_association": "COLLABORATOR", "body": "Spec from Singer on metrics: https://github.com/singer-io/getting-started/blob/4cc04f5b2dc2fa9173412c7cd84df4bf2ed0ca91/docs/SYNC_MODE.md#metric-messages", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478662611", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-478662611", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 478662611, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY2MjYxMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-01T17:05:08.000000Z", "updated_at": "2019-04-01T17:05:08.000000Z", "author_association": "COLLABORATOR", "body": "Code in [`singer-python`](https://github.com/singer-io/singer-python/blob/a70e03f108307ee29f02811303bc95324650f10b/singer/metrics.py)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478664488", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-478664488", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 478664488, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY2NDQ4OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-01T17:10:36.000000Z", "updated_at": "2019-04-01T17:10:36.000000Z", "author_association": "COLLABORATOR", "body": "Timer examples:\r\n- https://github.com/singer-io/tap-mysql/blob/5bac530b6f5fe07194311cbb5626cc3f87be7e3b/tap_mysql/__init__.py#L639-L652\r\n\r\nCounter examples:\r\n- https://github.com/singer-io/tap-mysql/blob/cfd04fcf8cf60d5c679207abaa42d11af0c996be/tap_mysql/sync_strategies/common.py#L173-L175\r\n- https://github.com/singer-io/tap-postgres/blob/3dce12abc2729fee2719d782739b0945591ec0c9/tap_postgres/sync_strategies/incremental.py#L56\r\n- https://github.com/singer-io/tap-postgres/blob/3dce12abc2729fee2719d782739b0945591ec0c9/tap_postgres/sync_strategies/full_table.py#L41\r\n- https://github.com/singer-io/tap-postgres/blob/3dce12abc2729fee2719d782739b0945591ec0c9/tap_postgres/sync_strategies/full_table.py#L98", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478686807", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-478686807", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 478686807, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY4NjgwNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-01T18:14:24.000000Z", "updated_at": "2019-04-01T18:14:24.000000Z", "author_association": "COLLABORATOR", "body": "Soooo... `tap-postgres` doesn't do anything with tags (confirmed in this repo's usage of it as well, ie CCI logs). `tap-mysql` _however_ does, but not using the \"recommended\" `singer-python` mechanisms:\r\n\r\n```\r\n    with metrics.record_counter(None) as counter:\r\n        counter.tags['database'] = database_name\r\n        counter.tags['table'] = catalog_entry.table\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/478823573", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-478823573", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 478823573, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODgyMzU3Mw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-02T02:52:22.000000Z", "updated_at": "2019-04-02T02:52:22.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Why can't we know the table name for row counts and have to use paths? Even nested arrays eventually become tables. We place them in a table when we merge the tmp table or the current batch size for a full-table rep.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479000581", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-479000581", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 479000581, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTAwMDU4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-02T13:41:12.000000Z", "updated_at": "2019-04-02T13:41:29.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I put in place both the path and the table:\r\n\r\n```\r\n{\"path\": [\"pull_requests\"],\r\n \"database\": \"target_postgres_test\",\r\n \"schema\": \"public\",\r\n \"table\": \"pull_requests\"}\r\n```\r\n\r\nFor the top level stream we can't (necessarily) have a table name since that's cumulative inserts from all of the various nested objects. We could put in place a `stream` tag as well? Personally I think _more_ tags than fewer are useful for slicing metrics up, but that's just my experience building observability and monitoring systems.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479101505", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-479101505", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 479101505, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTEwMTUwNQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-02T17:14:17.000000Z", "updated_at": "2019-04-02T17:14:17.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 I redact my previous comment. The `stream` name is a little bit harder to get in place for this. We don't pass that information down into `SQLBase` presently (I think that's actually one of the refactor things we had wanted to do) and to get it down in there would be a bit of work.\r\n\r\nFor the time being, I'd vote that we _don't_ include the `stream` tag, but if we decide that it's actually more useful to have (etc.) I can bite that off as a part of this work.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479243499", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-479243499", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 479243499, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTI0MzQ5OQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-02T22:57:57.000000Z", "updated_at": "2019-04-02T22:57:57.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann Ok that may make sense then. I think what we'll probably want, which are aggregates, are for a given run, or over period of time, row counts per table in the data warehouse. It looks like the reverse is possible too given the path? ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479636636", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-479636636", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 479636636, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTYzNjYzNg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-03T19:58:49.000000Z", "updated_at": "2019-04-03T19:58:49.000000Z", "author_association": "COLLABORATOR", "body": "@awm33 back to you!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479712327", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#issuecomment-479712327", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/108", "id": 479712327, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTcxMjMyNw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-04T01:10:42.000000Z", "updated_at": "2019-04-04T01:10:42.000000Z", "author_association": "MEMBER", "body": "@AlexanderMann So beautiful \ud83d\ude0d . Imma query the crap out of these metrics once we start running this in prod.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/479999482", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-479999482", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 479999482, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTk5OTQ4Mg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-04T17:54:18.000000Z", "updated_at": "2019-04-04T17:54:18.000000Z", "author_association": "COLLABORATOR", "body": "@CStejmar intriguing, not the behaviour I would have expected!\r\n\r\nSo it _sounds_ like the denesting on the Schema is actually working as expected which is great, but that the denesting on the _records_ is broken somehow.\r\n\r\nI think the likely culprit is to double check the tests [here](https://github.com/datamill-co/target-postgres/blob/master/tests/test_denest.py#L50-L103). Those were thrown together somewhat hastily and could use love.\r\n\r\nI'll poke around with those and see if I can't get more details for you, but that's where I'd start.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480013465", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-480013465", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 480013465, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDAxMzQ2NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-04T18:33:39.000000Z", "updated_at": "2019-04-04T18:33:39.000000Z", "author_association": "COLLABORATOR", "body": "@CStejmar https://github.com/datamill-co/target-postgres/pull/110\r\n\r\nIt doesn't look like the problem is necessarily in the denesting logic, so it might be in the upserting logic? Very odd..added your tests as well to that branch to try and start looking into what in the heck is going on...", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480020330", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-480020330", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 480020330, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDAyMDMzMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-04T18:53:50.000000Z", "updated_at": "2019-04-04T18:53:50.000000Z", "author_association": "COLLABORATOR", "body": "@CStejmar I _think_ I found the problem. It looks like the denesting logic for the _schema_ is in fact the problem. Your observation about the issue is exactly correct, and luckily your full blown Sandbox tests can be reduced down to _just_ a single test on the `denest.py` module.\r\n\r\nSo what's happening is that we are denesting the _records_ correctly and placing values under the column path _inside of the table_. BUT in the schema denesting, we are not removing the table path as  a _prefix_.\r\n\r\nEx.\r\n\r\n```\r\nDenested schema:\r\n  table: (a, b)\r\n  column: (a, b, c, d)\r\n\r\nDenested record:\r\n  table: (a, b)\r\n  column: (c, d)\r\n```\r\n\r\nSo yeah, we just need to figure out _why_ that's happening and fix it. I'm not sure how breaking that will be for users of this repo... Feel free to fork and start working on that branch. I've pushed up the simplified reproducing test.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.462035Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480126801", "html_url": "https://github.com/datamill-co/target-postgres/issues/103#issuecomment-480126801", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/103", "id": 480126801, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDEyNjgwMQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T02:22:05.000000Z", "updated_at": "2019-04-05T02:22:05.000000Z", "author_association": "MEMBER", "body": "Closed by https://github.com/datamill-co/target-postgres/pull/105", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480126880", "html_url": "https://github.com/datamill-co/target-postgres/issues/75#issuecomment-480126880", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/75", "id": 480126880, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDEyNjg4MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T02:22:34.000000Z", "updated_at": "2019-04-05T02:22:34.000000Z", "author_association": "MEMBER", "body": "Closed by https://github.com/datamill-co/target-postgres/pull/108", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480176686", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-480176686", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 480176686, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDE3NjY4Ng==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T07:30:08.000000Z", "updated_at": "2019-04-05T07:30:08.000000Z", "author_association": "NONE", "body": "@AlexanderMann Great! Thanks for your analysis! I will fork and branch from where you left of \ud83d\udc4d ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480257283", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-480257283", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 480257283, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI1NzI4Mw==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T12:28:09.000000Z", "updated_at": "2019-04-05T12:28:09.000000Z", "author_association": "NONE", "body": "I think I solved the issue: https://github.com/datamill-co/target-postgres/pull/111\r\n\r\nAll tests (branched from master) pass and I get data in the database which I didn't get before for nested objects in arrays! However, we might want it the other way around where we instead change the record to match the schema we have now to keep the naming table structure we had before. What do you think @AlexanderMann?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480267743", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480267743", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480267743, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI2Nzc0Mw==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T13:04:35.000000Z", "updated_at": "2019-04-05T13:04:35.000000Z", "author_association": "NONE", "body": "If we do it the other way around, changing the record denesting instead to match the schema we get:\r\n```\r\ngmp_db=# \\d\r\n                     List of relations\r\n Schema |             Name              | Type  |  Owner   \r\n--------+-------------------------------+-------+----------\r\n public | cats                          | table | postgres\r\n public | cats__adoption__immunizations | table | postgres\r\n(2 rows)\r\n\r\ngmp_db=# \\d cats\r\n                               Table \"public.cats\"\r\n        Column        |           Type           | Collation | Nullable | Default \r\n----------------------+--------------------------+-----------+----------+---------\r\n id                   | bigint                   |           | not null | \r\n name                 | text                     |           | not null | \r\n paw_size             | bigint                   |           | not null | \r\n paw_colour           | text                     |           | not null | \r\n flea_check_complete  | boolean                  |           | not null | \r\n pattern              | text                     |           |          | \r\n age                  | bigint                   |           |          | \r\n adoption__adopted_on | timestamp with time zone |           |          | \r\n adoption__was_foster | boolean                  |           |          | \r\n _sdc_received_at     | timestamp with time zone |           |          | \r\n _sdc_sequence        | bigint                   |           |          | \r\n _sdc_table_version   | bigint                   |           |          | \r\n _sdc_batched_at      | timestamp with time zone |           |          | \r\n\r\ngmp_db=# \\d cats__adoption__immunizations \r\n                                Table \"public.cats__adoption__immunizations\"\r\n                     Column                      |           Type           | Collation | Nullable | Default \r\n-------------------------------------------------+--------------------------+-----------+----------+---------\r\n type                                            | text                     |           | not null | \r\n date_administered                               | timestamp with time zone |           | not null | \r\n adoption__immunizations__vaccination_type__shot | text                     |           |          | \r\n _sdc_source_key_id                              | bigint                   |           | not null | \r\n _sdc_sequence                                   | bigint                   |           |          | \r\n _sdc_level_0_id                                 | bigint                   |           | not null | \r\n\r\ngmp_db=# \r\ngmp_db=# select * from cats__adoption__immunizations;\r\n      type       |   date_administered    | adoption__immunizations__vaccination_type__shot | _sdc_source_key_id | _sdc_sequence | _sdc_level_0_id \r\n-----------------+------------------------+-------------------------------------------------+--------------------+---------------+-----------------\r\n Rabies          | 2537-09-12 15:34:00+02 | Yes                                             |                  1 |    1554384634 |               0\r\n Panleukopenia   | 2889-03-01 18:18:00+01 | No                                              |                  1 |    1554384634 |               1\r\n Feline Leukemia | 2599-08-08 09:47:00+02 | No                                              |                  1 |    1554384634 |               2\r\n Feline Leukemia | 2902-04-14 03:34:00+02 | No                                              |                  1 |    1554384634 |               3\r\n(4 rows)\r\n```\r\nTo get this change, the `_denest_record` function in `denest.py` is slightly altered and looks like this:\r\n```python\r\ndef _denest_record(table_path, record, records_map, key_properties, pk_fks, level):\r\n    \"\"\"\"\"\"\r\n    \"\"\"\r\n    {...}\r\n    \"\"\"\r\n    denested_record = {}\r\n    for prop, value in record.items():\r\n        \"\"\"\r\n        str : {...} | [...] | None | <literal>\r\n        \"\"\"\r\n\r\n        if isinstance(value, dict):\r\n            \"\"\"\r\n            {...}\r\n            \"\"\"\r\n            _denest_subrecord(table_path + (prop,),\r\n                              table_path + (prop,),\r\n                              denested_record,\r\n                              value,\r\n                              records_map,\r\n                              key_properties,\r\n                              pk_fks,\r\n                              level)\r\n\r\n        elif isinstance(value, list):\r\n            \"\"\"\r\n            [...]\r\n            \"\"\"\r\n            _denest_records(table_path + (prop,),\r\n                            value,\r\n                            records_map,\r\n                            key_properties,\r\n                            pk_fks=pk_fks,\r\n                            level=level + 1)\r\n\r\n        elif value is None:\r\n            \"\"\"\r\n            None\r\n            \"\"\"\r\n            continue\r\n\r\n        else:\r\n            \"\"\"\r\n            <literal>\r\n            \"\"\"\r\n            denested_record[(prop,)] = (json_schema.python_type(value), value)\r\n\r\n    if table_path not in records_map:\r\n        records_map[table_path] = []\r\n    records_map[table_path].append(denested_record)\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480271717", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480271717", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480271717, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI3MTcxNw==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T13:17:45.000000Z", "updated_at": "2019-04-05T13:17:45.000000Z", "author_association": "NONE", "body": "I have prepared a branch for this other scenario and will push that as well and then you can decide what fix to use.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480276549", "html_url": "https://github.com/datamill-co/target-postgres/pull/112#issuecomment-480276549", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112", "id": 480276549, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI3NjU0OQ==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T13:32:23.000000Z", "updated_at": "2019-04-05T13:32:23.000000Z", "author_association": "NONE", "body": "Merge either this PR or https://github.com/datamill-co/target-postgres/pull/111", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480276742", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480276742", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480276742, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI3Njc0Mg==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T13:32:56.000000Z", "updated_at": "2019-04-05T13:32:56.000000Z", "author_association": "NONE", "body": "Merge either this PR or https://github.com/datamill-co/target-postgres/pull/112", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480349098", "html_url": "https://github.com/datamill-co/target-postgres/pull/112#issuecomment-480349098", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112", "id": 480349098, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM0OTA5OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-05T17:00:35.000000Z", "updated_at": "2019-04-05T17:00:35.000000Z", "author_association": "COLLABORATOR", "body": "@CStejmar if you have no objections, I'd like to move to close this PR.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480729156", "html_url": "https://github.com/datamill-co/target-postgres/pull/112#issuecomment-480729156", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/112", "id": 480729156, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDcyOTE1Ng==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T08:08:07.000000Z", "updated_at": "2019-04-08T08:08:07.000000Z", "author_association": "NONE", "body": "I have no objections, we should close this PR and go with #111 as discussed. I'll close it.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480735512", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480735512", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480735512, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDczNTUxMg==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T08:27:19.000000Z", "updated_at": "2019-04-08T08:27:19.000000Z", "author_association": "NONE", "body": "@AlexanderMann Thank you! Glad I can help! Yes I think we should do as you suggest, merge this and then rebase your tests on top of that \ud83d\udc4d .\r\n\r\nRegarding your list:\r\na) Great! \ud83d\udc4d \r\nb) Not sure I follow here, what exactly do you mean?\r\n\r\nYes I understand, discuss it with @awm33 and get back to me. Btw, what do you mean with \"whether we need to \"fix\" this for current schemas\". Because the fix shouldn't break any schemas or records, only match them. However, current databases and their tables could change if the schema used to create them are complex (nested) enough. Am I right?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480752614", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-480752614", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 480752614, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDc1MjYxNA==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T09:17:45.000000Z", "updated_at": "2019-04-08T09:17:45.000000Z", "author_association": "NONE", "body": "I noticed one thing now when looking trough my tables in a test database. The objects looks fine and all data enters the database. However, naming of subtables (arrays in the schemas) miss their array name when we have arrays within arrays. The first array name is dropped in the table name.\r\n\r\n### With denest fix for schema:\r\n```\r\ndb=# \\d\r\n                                 List of relations\r\n Schema |                         Name                          | Type  |  Owner   \r\n--------+-------------------------------------------------------+-------+----------\r\n public | campaign                                              | table | postgres\r\n public | campaign__external_ids                                | table | postgres\r\n public | campaign__media_types                                 | table | postgres\r\n public | tv_plan                                               | table | postgres\r\n public | tv_plan__actual_summary__index_percent                | table | postgres\r\n public | tv_plan__actual_values__index_percent                 | table | postgres\r\n public | tv_plan__actual_values__periods                       | table | postgres\r\n public | tv_plan__actual_values__periods__film_code_breakdown  | table | postgres\r\n public | tv_plan__actual_values__periods__index_percent        | table | postgres\r\n public | tv_plan__channels                                     | table | postgres\r\n public | tv_plan__film_codes                                   | table | postgres\r\n public | tv_plan__planned_summary__index_percent               | table | postgres\r\n public | tv_plan__planned_values__index_percent                | table | postgres\r\n public | tv_plan__planned_values__periods                      | table | postgres\r\n public | tv_plan__planned_values__periods__film_code_breakdown | table | postgres\r\n public | tv_plan__planned_values__periods__index_percent       | table | postgres\r\n public | tv_plan__regions                                      | table | postgres\r\n public | tv_spot                                               | table | postgres\r\n public | tv_spot__target_audience_values                       | table | postgres\r\n(19 rows)\r\n\r\ndb=# \\d tv_plan__channels \r\n                                  Table \"public.tv_plan__channels\"\r\n                     Column                     |       Type       | Collation | Nullable | Default \r\n------------------------------------------------+------------------+-----------+----------+---------\r\n channel_name                                   | text             |           |          | \r\n planned_values__conversion_index_to_generic_ta | double precision |           |          | \r\n planned_values__discount_percent               | double precision |           |          | \r\n planned_values__net                            | double precision |           |          | \r\n planned_values__net_net                        | double precision |           |          | \r\n planned_values__grp                            | double precision |           |          | \r\n planned_values__grp30                          | double precision |           |          | \r\n planned_values__spots                          | double precision |           |          | \r\n planned_values__spots30                        | double precision |           |          | \r\n actual_values__conversion_index_to_generic_ta  | double precision |           |          | \r\n actual_values__discount_percent                | double precision |           |          | \r\n actual_values__net                             | double precision |           |          | \r\n actual_values__net_net                         | double precision |           |          | \r\n actual_values__grp                             | double precision |           |          | \r\n actual_values__grp30                           | double precision |           |          | \r\n actual_values__spots                           | double precision |           |          | \r\n actual_values__spots30                         | double precision |           |          | \r\n _sdc_source_key_id                             | text             |           | not null | \r\n _sdc_source_key_campaign_id                    | text             |           | not null | \r\n _sdc_sequence                                  | bigint           |           |          | \r\n _sdc_level_0_id                                | bigint           |           | not null | \r\n```\r\n### Without denest fix/fixing record instead:\r\n```\r\ndb=> \\d\r\n                                     List of relations\r\n Schema |                              Name                               | Type  |  Owner  \r\n--------+-----------------------------------------------------------------+-------+---------\r\n public | campaign                                                        | table | adverai\r\n public | campaign__external_ids                                          | table | adverai\r\n public | campaign__media_types                                           | table | adverai\r\n public | tv_plan                                                         | table | adverai\r\n public | tv_plan__actual_summary__index_percent                          | table | adverai\r\n public | tv_plan__channels                                               | table | adverai\r\n public | tv_plan__channels__actual_values__index_percent                 | table | adverai\r\n public | tv_plan__channels__actual_values__periods                       | table | adverai\r\n public | tv_plan__channels__actual_values__periods__film_code_breakdown  | table | adverai\r\n public | tv_plan__channels__actual_values__periods__index_percent        | table | adverai\r\n public | tv_plan__channels__planned_values__index_percent                | table | adverai\r\n public | tv_plan__channels__planned_values__periods                      | table | adverai\r\n public | tv_plan__channels__planned_values__periods__film_code_breakdown | table | adverai\r\n public | tv_plan__channels__planned_values__periods__index_percent       | table | adverai\r\n public | tv_plan__film_codes                                             | table | adverai\r\n public | tv_plan__planned_summary__index_percent                         | table | adverai\r\n public | tv_plan__regions                                                | table | adverai\r\n public | tv_spot                                                         | table | adverai\r\n public | tv_spot__target_audience_values                                 | table | adverai\r\n(19 rows)\r\n\r\ndb=> \\d tv_plan__channels\r\n                                       Table \"public.tv_plan__channels\"\r\n                          Column                          |       Type       | Collation | Nullable | Default \r\n----------------------------------------------------------+------------------+-----------+----------+---------\r\n channels__actual_values__net_net                         | double precision |           |          | \r\n channels__planned_values__conversion_index_to_generic_ta | double precision |           |          | \r\n channel_name                                             | text             |           |          | \r\n channels__actual_values__grp30                           | double precision |           |          | \r\n channels__actual_values__net                             | double precision |           |          | \r\n _sdc_level_0_id                                          | bigint           |           | not null | \r\n channels__actual_values__discount_percent                | double precision |           |          | \r\n channels__actual_values__conversion_index_to_generic_ta  | double precision |           |          | \r\n channels__actual_values__spots                           | double precision |           |          | \r\n channels__planned_values__net_net                        | double precision |           |          | \r\n channels__planned_values__grp                            | double precision |           |          | \r\n channels__planned_values__spots30                        | double precision |           |          | \r\n _sdc_source_key_id                                       | text             |           | not null | \r\n channels__planned_values__spots                          | double precision |           |          | \r\n channels__planned_values__net                            | double precision |           |          | \r\n channels__planned_values__discount_percent               | double precision |           |          | \r\n channels__planned_values__grp30                          | double precision |           |          | \r\n _sdc_sequence                                            | bigint           |           |          | \r\n channels__actual_values__grp                             | double precision |           |          | \r\n channels__actual_values__spots30                         | double precision |           |          | \r\n _sdc_source_key_campaign_id                              | text             |           | not null | \r\n```\r\nThe above has errors in the naming of nested objects as you can see in `tv_plan__channels`. For example `channels__actual_values*`and `channels__planned_values*` should be named `actual_values*`and `planned_values*` respectively. Just as in the \"fixed\" example.\r\n\r\nSo my conclusion is that we need some more work with the fix regarding this denesting before merging. I will start looking into it now!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480752702", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480752702", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480752702, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDc1MjcwMg==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T09:18:01.000000Z", "updated_at": "2019-04-08T09:18:01.000000Z", "author_association": "NONE", "body": "I noticed one thing now when looking trough my tables in a test database. The objects looks fine and all data enters the database. However, naming of subtables (arrays in the schemas) miss their array name when we have arrays within arrays. The first array name is dropped in the table name.\r\n\r\n### With denest fix for schema:\r\n```\r\ndb=# \\d\r\n                                 List of relations\r\n Schema |                         Name                          | Type  |  Owner   \r\n--------+-------------------------------------------------------+-------+----------\r\n public | campaign                                              | table | postgres\r\n public | campaign__external_ids                                | table | postgres\r\n public | campaign__media_types                                 | table | postgres\r\n public | tv_plan                                               | table | postgres\r\n public | tv_plan__actual_summary__index_percent                | table | postgres\r\n public | tv_plan__actual_values__index_percent                 | table | postgres\r\n public | tv_plan__actual_values__periods                       | table | postgres\r\n public | tv_plan__actual_values__periods__film_code_breakdown  | table | postgres\r\n public | tv_plan__actual_values__periods__index_percent        | table | postgres\r\n public | tv_plan__channels                                     | table | postgres\r\n public | tv_plan__film_codes                                   | table | postgres\r\n public | tv_plan__planned_summary__index_percent               | table | postgres\r\n public | tv_plan__planned_values__index_percent                | table | postgres\r\n public | tv_plan__planned_values__periods                      | table | postgres\r\n public | tv_plan__planned_values__periods__film_code_breakdown | table | postgres\r\n public | tv_plan__planned_values__periods__index_percent       | table | postgres\r\n public | tv_plan__regions                                      | table | postgres\r\n public | tv_spot                                               | table | postgres\r\n public | tv_spot__target_audience_values                       | table | postgres\r\n(19 rows)\r\n\r\ndb=# \\d tv_plan__channels \r\n                                  Table \"public.tv_plan__channels\"\r\n                     Column                     |       Type       | Collation | Nullable | Default \r\n------------------------------------------------+------------------+-----------+----------+---------\r\n channel_name                                   | text             |           |          | \r\n planned_values__conversion_index_to_generic_ta | double precision |           |          | \r\n planned_values__discount_percent               | double precision |           |          | \r\n planned_values__net                            | double precision |           |          | \r\n planned_values__net_net                        | double precision |           |          | \r\n planned_values__grp                            | double precision |           |          | \r\n planned_values__grp30                          | double precision |           |          | \r\n planned_values__spots                          | double precision |           |          | \r\n planned_values__spots30                        | double precision |           |          | \r\n actual_values__conversion_index_to_generic_ta  | double precision |           |          | \r\n actual_values__discount_percent                | double precision |           |          | \r\n actual_values__net                             | double precision |           |          | \r\n actual_values__net_net                         | double precision |           |          | \r\n actual_values__grp                             | double precision |           |          | \r\n actual_values__grp30                           | double precision |           |          | \r\n actual_values__spots                           | double precision |           |          | \r\n actual_values__spots30                         | double precision |           |          | \r\n _sdc_source_key_id                             | text             |           | not null | \r\n _sdc_source_key_campaign_id                    | text             |           | not null | \r\n _sdc_sequence                                  | bigint           |           |          | \r\n _sdc_level_0_id                                | bigint           |           | not null | \r\n```\r\n### Without denest fix/fixing record instead:\r\n```\r\ndb=> \\d\r\n                                     List of relations\r\n Schema |                              Name                               | Type  |  Owner  \r\n--------+-----------------------------------------------------------------+-------+---------\r\n public | campaign                                                        | table | adverai\r\n public | campaign__external_ids                                          | table | adverai\r\n public | campaign__media_types                                           | table | adverai\r\n public | tv_plan                                                         | table | adverai\r\n public | tv_plan__actual_summary__index_percent                          | table | adverai\r\n public | tv_plan__channels                                               | table | adverai\r\n public | tv_plan__channels__actual_values__index_percent                 | table | adverai\r\n public | tv_plan__channels__actual_values__periods                       | table | adverai\r\n public | tv_plan__channels__actual_values__periods__film_code_breakdown  | table | adverai\r\n public | tv_plan__channels__actual_values__periods__index_percent        | table | adverai\r\n public | tv_plan__channels__planned_values__index_percent                | table | adverai\r\n public | tv_plan__channels__planned_values__periods                      | table | adverai\r\n public | tv_plan__channels__planned_values__periods__film_code_breakdown | table | adverai\r\n public | tv_plan__channels__planned_values__periods__index_percent       | table | adverai\r\n public | tv_plan__film_codes                                             | table | adverai\r\n public | tv_plan__planned_summary__index_percent                         | table | adverai\r\n public | tv_plan__regions                                                | table | adverai\r\n public | tv_spot                                                         | table | adverai\r\n public | tv_spot__target_audience_values                                 | table | adverai\r\n(19 rows)\r\n\r\ndb=> \\d tv_plan__channels\r\n                                       Table \"public.tv_plan__channels\"\r\n                          Column                          |       Type       | Collation | Nullable | Default \r\n----------------------------------------------------------+------------------+-----------+----------+---------\r\n channels__actual_values__net_net                         | double precision |           |          | \r\n channels__planned_values__conversion_index_to_generic_ta | double precision |           |          | \r\n channel_name                                             | text             |           |          | \r\n channels__actual_values__grp30                           | double precision |           |          | \r\n channels__actual_values__net                             | double precision |           |          | \r\n _sdc_level_0_id                                          | bigint           |           | not null | \r\n channels__actual_values__discount_percent                | double precision |           |          | \r\n channels__actual_values__conversion_index_to_generic_ta  | double precision |           |          | \r\n channels__actual_values__spots                           | double precision |           |          | \r\n channels__planned_values__net_net                        | double precision |           |          | \r\n channels__planned_values__grp                            | double precision |           |          | \r\n channels__planned_values__spots30                        | double precision |           |          | \r\n _sdc_source_key_id                                       | text             |           | not null | \r\n channels__planned_values__spots                          | double precision |           |          | \r\n channels__planned_values__net                            | double precision |           |          | \r\n channels__planned_values__discount_percent               | double precision |           |          | \r\n channels__planned_values__grp30                          | double precision |           |          | \r\n _sdc_sequence                                            | bigint           |           |          | \r\n channels__actual_values__grp                             | double precision |           |          | \r\n channels__actual_values__spots30                         | double precision |           |          | \r\n _sdc_source_key_campaign_id                              | text             |           | not null | \r\n```\r\nThe above has errors in the naming of nested objects as you can see in `tv_plan__channels`. For example `channels__actual_values*`and `channels__planned_values*` should be named `actual_values*`and `planned_values*` respectively. Just as in the \"fixed\" example.\r\n\r\nSo my conclusion is that we need some more work with the fix regarding this denesting before merging. I will start looking into it now!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480857544", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480857544", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480857544, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDg1NzU0NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T14:33:55.000000Z", "updated_at": "2019-04-08T14:33:55.000000Z", "author_association": "COLLABORATOR", "body": "Yeah @CStejmar I think you're correct here.\r\n\r\nIn looking into the code, it looks like the `records` logic has the notion of `table_path` AND `prop_path` while `schema`'s logic doesn't really.\r\n\r\nAnd then on top of that, the denesting logic for `records` doesn't do the correct thing (I think?) with unpacking the child objects into the parent.\r\n\r\n# Expected Behaviour\r\n\r\n@awm33 should confirm this, but my recollection of how this logic _should_ be working is based on the [StitchData docs](https://www.stitchdata.com/docs/data-structure/nested-data-structures-row-count-impact)\r\n\r\nSpecifically, a JSON object can only have three cases:\r\n\r\n```\r\n{\r\n  scalar: 123\r\n  object: {...}\r\n  array: [...]\r\n}\r\n```\r\n\r\nFor each case, we should be doing the following (schema and records alike):\r\n\r\n- scalars do nothing unexpected\r\n- objects change the property path\r\n- arrays change the table path\r\n\r\n## Scalar\r\n\r\n- Table Path: `table_path` (no changes)\r\n- Property Path: `(key,)`\r\n- Action: scalar value is placed into parent at property path, ie, `{(key,): value}`\r\n\r\n## Object\r\n\r\n- Table Path: `table_path` (no changes)\r\n- Property Path: `(key,) + object_keys`\r\n- Action: recursively operate on each of the `object_keys` and their associated values\r\n\r\n## Array\r\n\r\n- Table Path: `table_path + property_path`\r\n- Property Path: `()` (resets for new values being denested)\r\n- Action: create a subtable with new `Table Path`, recursively operate on all items in the array\r\n\r\n# Changes which are probable necessary in the denesting logic...\r\n\r\n@CStejmar I'm curious to see where you get with this, but I'm nervous that for the current schema denesting logic we need to introduce the concept of `prop_path` to be able to handle the new edge case you've highlighted.\r\n\r\nThen, for records denesting we'll need to fix the issues around object denesting changing/not-changing the table path...\r\n\r\nIf I get the time I'm going to update my fork/branch with the broken tests to also include tests for the additional bug you've got up top here. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/480866564", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#issuecomment-480866564", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/111", "id": 480866564, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDg2NjU2NA==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-08T14:54:36.000000Z", "updated_at": "2019-04-08T14:54:36.000000Z", "author_association": "NONE", "body": "@AlexanderMann thanks for the breakdown of the problem! It is similar or exact to the thoughts I have had this morning :). I have been working with a fix for this today and just pushed it. It produces the correct and expected tables with all data in the database and also passes all tests present at the moment on the master branch. As you wrote, I needed to introduce the `prop_path` to the `_denest_schema_helper` function and then just input the paths correctly. I think I got it right, so please take a look at the changes and test it!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/481134831", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-481134831", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 481134831, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEzNDgzMQ==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-09T07:25:41.000000Z", "updated_at": "2019-04-09T07:25:41.000000Z", "author_association": "NONE", "body": "### Update\r\nPull request is updated to fix the above problem with incorrect naming of subtables: https://github.com/datamill-co/target-postgres/pull/111\r\n\r\nThe plan ahead is now to first merge the tests @AlexanderMann set up in this PR: https://github.com/datamill-co/target-postgres/pull/110 and then rebase the changes from #111 on top of that to see if tests pass. If they do not pass, more work is needed.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/481706474", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#issuecomment-481706474", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/110", "id": 481706474, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTcwNjQ3NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-10T14:08:18.000000Z", "updated_at": "2019-04-10T14:08:18.000000Z", "author_association": "COLLABORATOR", "body": "@CStejmar \ud83c\udfd3 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/485681949", "html_url": "https://github.com/datamill-co/target-postgres/issues/109#issuecomment-485681949", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/109", "id": 485681949, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTY4MTk0OQ==", "user": {"login": "CStejmar", "id": 8696159, "node_id": "MDQ6VXNlcjg2OTYxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8696159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CStejmar", "html_url": "https://github.com/CStejmar", "followers_url": "https://api.github.com/users/CStejmar/followers", "following_url": "https://api.github.com/users/CStejmar/following{/other_user}", "gists_url": "https://api.github.com/users/CStejmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CStejmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CStejmar/subscriptions", "organizations_url": "https://api.github.com/users/CStejmar/orgs", "repos_url": "https://api.github.com/users/CStejmar/repos", "events_url": "https://api.github.com/users/CStejmar/events{/privacy}", "received_events_url": "https://api.github.com/users/CStejmar/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-23T07:43:53.000000Z", "updated_at": "2019-04-23T07:43:53.000000Z", "author_association": "NONE", "body": "Fix and tests are merged to master.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/485906417", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-485906417", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 485906417, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTkwNjQxNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-23T17:48:58.000000Z", "updated_at": "2019-04-23T17:48:58.000000Z", "author_association": "COLLABORATOR", "body": "@DylanDriessen ahha! This one is actually pretty straightforward:\r\n\r\n```json\r\n    \"date\": {\r\n      \"inclusion\": \"automatic\",\r\n      \"anyOf\": [\r\n        {\r\n          \"type\": [\r\n            \"string\"\r\n          ],\r\n          \"format\": \"date-time\"\r\n        },\r\n        {\r\n          \"type\": [\r\n            \"string\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n```\r\n\r\nYour problem types are of `anyOf` type. _Currently_ `target-postgres` doesn't support this...\r\n\r\n> JSON Schema combinations such as anyOf and allOf are not supported.\r\n\r\nWe've talked before about trying to support it in one mechanism or another, but right now it's not gonna go well \ud83d\ude22. We _could_ make the error message better though if you think that'd be helpful.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/485924224", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-485924224", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 485924224, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTkyNDIyNA==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-23T18:37:11.000000Z", "updated_at": "2019-04-23T18:37:11.000000Z", "author_association": "NONE", "body": "@AlexanderMann I've tried fixing this already before this post, seems like my current code didn't save to the one I've uploaded. I changed this with:\r\n` \"date\": {\r\n                  \"inclusion\": \"automatic\",\r\n                  \"format\": \"date-time\",\r\n                  \"type\": [\r\n                    \"string\"\r\n                  ]\r\n                }`\r\n\r\nBut this resolves in the same error..", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486228120", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486228120", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486228120, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjIyODEyMA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T13:25:29.000000Z", "updated_at": "2019-04-24T13:25:29.000000Z", "author_association": "COLLABORATOR", "body": "@DylanDriessen can you upload the new schema and error logs for the updated?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486233316", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486233316", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486233316, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjIzMzMxNg==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T13:38:36.000000Z", "updated_at": "2019-04-24T13:44:21.000000Z", "author_association": "NONE", "body": "Here is the new specific schema with his error log which is exactly the same error as before\r\n[postgres_error.txt](https://github.com/datamill-co/target-postgres/files/3112525/postgres_error.txt)\r\n[catalog_activities.zip](https://github.com/datamill-co/target-postgres/files/3112519/catalog_activities.zip)\r\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486281611", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486281611", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486281611, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjI4MTYxMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T15:05:45.000000Z", "updated_at": "2019-04-24T15:05:45.000000Z", "author_association": "COLLABORATOR", "body": "@DylanDriessen I threw together a simple set of tests in here: https://github.com/datamill-co/target-postgres/pull/115\r\n\r\nIf you look at the commit history, I have the first commit as a `fail` with your original `anyOf` type. After I change _just that_ everything seems to work correctly.\r\n\r\nI'm wondering if _maybe_ some of your configs are pointing at the wrong place?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486290923", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486290923", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486290923, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjI5MDkyMw==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T15:27:41.000000Z", "updated_at": "2019-04-24T15:27:41.000000Z", "author_association": "NONE", "body": "I see, after changing it to your schema it still gives me the same error.. :cry: \r\nDo you mean my target-postgres config file? Because despite the leads and activities schemas, everything else works (tasks, user,..).\r\nCould the problem be with my metadata configuration?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486296381", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486296381", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486296381, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjI5NjM4MQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T15:40:30.000000Z", "updated_at": "2019-04-24T15:40:30.000000Z", "author_association": "COLLABORATOR", "body": "Yeah, I mean it might be worth simplifying your schema down to _just_ the working stuff. ie, get the trouble schema _working_ even by deleting the troublesome field from the schema altogether, maybe remove the metadata, then start adding things back one by one till you get the issue again.\r\n\r\nI am curious as to whether the problem you're having _might be_ that somehow what you're editing/making changes to isn't being picked up by `target-postgres`, like somehow the file path to your config/schema is off by a little bit, there's something cached, etc.?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486302685", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486302685", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486302685, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjMwMjY4NQ==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T15:54:47.000000Z", "updated_at": "2019-04-24T15:54:47.000000Z", "author_association": "NONE", "body": "Seems like it caches indeed, even when I only set 1 property it returns the whole schema", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486307301", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486307301", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486307301, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjMwNzMwMQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T16:04:33.000000Z", "updated_at": "2019-04-24T16:04:33.000000Z", "author_association": "COLLABORATOR", "body": "```\r\ndylan@Dylan-linux:~/Documents/Stage/Singer$\r\n\r\n  ~/.virtualenvs/tap-closeio/bin/tap-closeio\r\n    --config tap-closeio/config.json\r\n    --catalog tap-closeio/catalog_activities.json |\r\n\r\n  ~/.virtualenvs/target-postgres/bin/target-postgres\r\n    --config target-postgres/config.json\r\n```\r\n\r\nBased on your command, I'd do the following:\r\n- check your `config.json` for `target-postgres`. I presume that's a standard config which just has a few connection things in it\r\n- pipe the output from `tap-closeio` into a json file so that you can look at that. I am willing to bet that it's always outputting the same thing no matter what changes you make", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/486347465", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-486347465", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 486347465, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjM0NzQ2NQ==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-24T17:39:10.000000Z", "updated_at": "2019-04-24T17:39:23.000000Z", "author_association": "NONE", "body": "[test.zip](https://github.com/datamill-co/target-postgres/files/3113523/test.zip)\r\nIt does :man_facepalming:, what do I owe you?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/487054207", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-487054207", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 487054207, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzA1NDIwNw==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-26T13:20:45.000000Z", "updated_at": "2019-04-26T13:20:45.000000Z", "author_association": "NONE", "body": "Is there a way I can solve this @AlexanderMann ? I've been trying some things, but nothing seems to work out. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/487113336", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-487113336", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 487113336, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzExMzMzNg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-04-26T16:11:12.000000Z", "updated_at": "2019-04-26T16:11:12.000000Z", "author_association": "COLLABORATOR", "body": "@DylanDriessen welllllllll `tap-closeio` (and most api taps) [hardcode their schemas](https://github.com/singer-io/tap-closeio/tree/master/tap_closeio/schemas). This makes development of this suppppper simple and allows for validating breaking schema changes from the source.\r\n\r\nFor _targets_, there are a couple options:\r\n- fully support JSON Schema (for `target-postgres`, currently we don't have support for `anyOf`, `allOf`, and global/non-local `$ref`s)\r\n- ignore/gracefully handle the bits of JSON Schema we _don't_ handle\r\n\r\nThe _better_ option is to support _as much of JSON Schema_ as possible. We have a couple issues kicking around in here which speak to that effect.\r\n\r\nThe _simpler_ option is to gracefully handle things (potentially a config/feature flag).\r\n\r\nIf you wanna discuss trying to support the missing features that'd make your life simpler here I'm happy to help however I can!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:37.789442Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/497429877", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-497429877", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 497429877, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzQyOTg3Nw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-05-30T18:16:15.000000Z", "updated_at": "2019-05-30T18:16:15.000000Z", "author_association": "COLLABORATOR", "body": "This issue has been open for a _while_ without any activity. @DylanDriessen did you ever get a conclusion to this?\r\n\r\nFor the record, I think this issue is most closely related to these other open issues:\r\n\r\n#14 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/497453565", "html_url": "https://github.com/datamill-co/target-postgres/issues/114#issuecomment-497453565", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/114", "id": 497453565, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzQ1MzU2NQ==", "user": {"login": "DylanDriessen", "id": 22490837, "node_id": "MDQ6VXNlcjIyNDkwODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/22490837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanDriessen", "html_url": "https://github.com/DylanDriessen", "followers_url": "https://api.github.com/users/DylanDriessen/followers", "following_url": "https://api.github.com/users/DylanDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/DylanDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanDriessen/subscriptions", "organizations_url": "https://api.github.com/users/DylanDriessen/orgs", "repos_url": "https://api.github.com/users/DylanDriessen/repos", "events_url": "https://api.github.com/users/DylanDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanDriessen/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-05-30T19:24:29.000000Z", "updated_at": "2019-05-30T19:24:29.000000Z", "author_association": "NONE", "body": "I've changed the hardcoded schema from closeio. The problem was indeed the anyOf in the schema. Thanks for all the help @AlexanderMann!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/498278921", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-498278921", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 498278921, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODI3ODkyMQ==", "user": {"login": "micaelbergeron", "id": 991233, "node_id": "MDQ6VXNlcjk5MTIzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/991233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micaelbergeron", "html_url": "https://github.com/micaelbergeron", "followers_url": "https://api.github.com/users/micaelbergeron/followers", "following_url": "https://api.github.com/users/micaelbergeron/following{/other_user}", "gists_url": "https://api.github.com/users/micaelbergeron/gists{/gist_id}", "starred_url": "https://api.github.com/users/micaelbergeron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micaelbergeron/subscriptions", "organizations_url": "https://api.github.com/users/micaelbergeron/orgs", "repos_url": "https://api.github.com/users/micaelbergeron/repos", "events_url": "https://api.github.com/users/micaelbergeron/events{/privacy}", "received_events_url": "https://api.github.com/users/micaelbergeron/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-03T14:25:16.000000Z", "updated_at": "2019-06-03T14:26:00.000000Z", "author_association": "NONE", "body": "@bradleyprice I just want to bring something to your attention here. Albeit this implementation \"works\" I think there will be a problem if the target fails with records buffered: a STATE message could be emitted and records would be not be persisted.\r\n\r\nThe way the STATE message should be handled in the target is that it should make sure all records are persisted **before** emitting the STATE message back.\r\n\r\nThere are multiple ways to handle that, from simply flushing the whole buffers when a STATE message is received, but that might have some performance issues.\r\n\r\nAnother approach is to introspect the STATE messages and flush only the corresponding records, but that is much more work.\r\n\r\nAnother approach would be to ignore STATE messages until N-records are buffered.\r\n\r\nI hope this is helpful to you.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/498305615", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-498305615", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 498305615, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODMwNTYxNQ==", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-03T15:28:37.000000Z", "updated_at": "2019-06-03T15:28:37.000000Z", "author_association": "CONTRIBUTOR", "body": "@micaelbergeron Thanks for the feedback! I'll try to work on the implementation and see if I can make it handle these failure points.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/499632147", "html_url": "https://github.com/datamill-co/target-postgres/pull/122#issuecomment-499632147", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/122", "id": 499632147, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTYzMjE0Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-06T19:21:05.000000Z", "updated_at": "2019-06-06T19:21:05.000000Z", "author_association": "MEMBER", "body": "@bradleyprice Thanks for catching that!!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/499638000", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-499638000", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 499638000, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTYzODAwMA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-06T19:38:38.000000Z", "updated_at": "2019-06-06T19:38:38.000000Z", "author_association": "MEMBER", "body": "@bradleyprice Thank for contributing!\r\n\r\n@bradleyprice @micaelbergeron Yeahh, the difficulty here is that we batch by stream and records could be mixed. A potential solution, though complex:\r\n- Use https://github.com/singer-io/singer-python/blob/master/singer/statediff.py to only track state messages that are different from the previous. (Stitch does this internally when running taps)\r\n- Create a structure to track unique states to stream buffers that contain them and only flush state when all buffers associated with a state have been flushed. EG have a set with each buffer per unique state, you could hook into the buffer's flush function to remove itself from the set, when the set is empty, flush state.\r\n\r\nOr just flush it at the end, maybe only the last state. Singer tap streams should be idempotent, so if the state/bookmarks are off, it should just mean a longer load time next run, not data discrepancies. Even that may be an improvement for those seeking this functionlality.\r\n\r\n1) I'd like this to be optional defaulting to false, since it doesn't do this currently. This can be done using the config.\r\n2) Can we use the full message structure? eg {\"type\":\"STATE\", \"value\":...}. I realize target-stitch doesn't do this, but it feels like communications between Singer components should use the message spec. All of state handling isn't well spec'ed out in Singer, and the most common use case laid out is only using it against Stitch.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/499681807", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-499681807", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 499681807, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTY4MTgwNw==", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-06T21:52:38.000000Z", "updated_at": "2019-06-06T21:52:38.000000Z", "author_association": "CONTRIBUTOR", "body": "@awm33 I'll take a look into how stitch is handling state and see if I can come up with a better solution. \r\n\r\nThanks for the feedback!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/500537342", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-500537342", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 500537342, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDUzNzM0Mg==", "user": {"login": "robmoore", "id": 152990, "node_id": "MDQ6VXNlcjE1Mjk5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/152990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmoore", "html_url": "https://github.com/robmoore", "followers_url": "https://api.github.com/users/robmoore/followers", "following_url": "https://api.github.com/users/robmoore/following{/other_user}", "gists_url": "https://api.github.com/users/robmoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmoore/subscriptions", "organizations_url": "https://api.github.com/users/robmoore/orgs", "repos_url": "https://api.github.com/users/robmoore/repos", "events_url": "https://api.github.com/users/robmoore/events{/privacy}", "received_events_url": "https://api.github.com/users/robmoore/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-10T18:30:53.000000Z", "updated_at": "2019-06-10T18:31:07.000000Z", "author_association": "NONE", "body": "@bradleyprice It might be worth reviewing the work that @micaelbergeron did implementing a [Snowflake target](https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py). In particular, I think that `StateBuffer` on line 114 might be helpful.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/500892287", "html_url": "https://github.com/datamill-co/target-postgres/pull/124#issuecomment-500892287", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/124", "id": 500892287, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDg5MjI4Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-11T15:24:42.000000Z", "updated_at": "2019-06-11T15:24:42.000000Z", "author_association": "MEMBER", "body": "@citruspi Thank you for contributing!\r\n\r\nThis looks pretty straight forward, I'm going to merge. It will be in our next release, which isn't scheduled, but I think will be once we get some dependency upgrade PRs merged and potentially STATE management.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/501463664", "html_url": "https://github.com/datamill-co/target-postgres/issues/123#issuecomment-501463664", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123", "id": 501463664, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTQ2MzY2NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-12T21:34:34.000000Z", "updated_at": "2019-06-12T21:34:34.000000Z", "author_association": "COLLABORATOR", "body": "@bradleyprice I think we'd be extremely happy with any help on this!\r\n\r\nThe documentation is an obvious low hanging fruit, so any recommendations you have on that are very welcome.\r\n\r\nAs far as a code enhancement, do you have any specific ideas or requests for the feature?\r\n\r\nI think we've been managing our larger installations by routinely running some `add index` commands, so it sounds like this could definitely be an improvement for everyone using this codebase. I have some ideas as to what would make the most sense, but you have more recent pain in this area and are arguably a better expert on this than I \ud83d\ude04 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/501474907", "html_url": "https://github.com/datamill-co/target-postgres/issues/123#issuecomment-501474907", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123", "id": 501474907, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTQ3NDkwNw==", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-12T22:16:37.000000Z", "updated_at": "2019-06-12T22:16:37.000000Z", "author_association": "CONTRIBUTOR", "body": "So, I haven't had much of a chance to think about it. As soon as I have a chance I am going to gather some logs from postgres to analyze the queries being generated.\r\n\r\nI was thinking it would be easy enough to generate an index when new schemas are being created, since we know what queries are being used to insert data into the database. The downside to this is that we could potentially be creating unused indexes, since not all tables will be large enough to need an index. Some of my tables have upwards of 10 million records, while some of them have less than 10.\r\n\r\nI see 2 potential methods we could take:\r\n\r\n1. Create indexes for all new tables\r\n    * pros\r\n      * easy\r\n      * if a user wanted to opt-in to using the auto creation of indexes, but had previously setup indexes for their existing tables, there wouldn't be an issue\r\n    * cons\r\n      * potentially creating indexes that aren't needed, in the case of a small dataset\r\n      * existing tables wouldn't get indexed (in the case of someone who is already using this target)\r\n2. Analyze table as import happens\r\n    * pros\r\n      * not creating useless indexes (depending on how we decide when to create an index)\r\n      * retroactively takes care of existing tables\r\n    * cons\r\n      * less efficient, since we'd have to continually check for some threshold\r\n      * if a user had existing tables with indexes, we'd need to either check to see if an indexes exist or allow a user to configure what tables to index or not index\r\n\r\nI assume with any method that was taking, this would need to be an \"opt-in\" feature, since there are probably people who would want to handle indexing themselves.\r\n\r\nI'd love to hear more about your thoughts around potential implementations or potential issues.\r\n\r\nThanks!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/501475079", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-501475079", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 501475079, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTQ3NTA3OQ==", "user": {"login": "bradleyprice", "id": 25420, "node_id": "MDQ6VXNlcjI1NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/25420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradleyprice", "html_url": "https://github.com/bradleyprice", "followers_url": "https://api.github.com/users/bradleyprice/followers", "following_url": "https://api.github.com/users/bradleyprice/following{/other_user}", "gists_url": "https://api.github.com/users/bradleyprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradleyprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradleyprice/subscriptions", "organizations_url": "https://api.github.com/users/bradleyprice/orgs", "repos_url": "https://api.github.com/users/bradleyprice/repos", "events_url": "https://api.github.com/users/bradleyprice/events{/privacy}", "received_events_url": "https://api.github.com/users/bradleyprice/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-12T22:17:22.000000Z", "updated_at": "2019-06-12T22:17:22.000000Z", "author_association": "CONTRIBUTOR", "body": "@robmoore Thanks! I'll take a look at that as soon as I have a chance.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/502729160", "html_url": "https://github.com/datamill-co/target-postgres/issues/123#issuecomment-502729160", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/123", "id": 502729160, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjcyOTE2MA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-17T15:22:19.000000Z", "updated_at": "2019-06-17T15:22:19.000000Z", "author_association": "COLLABORATOR", "body": "Those are more or less the pros/cons I was thinking as well.\r\n\r\nThe \"fun\" part with the implementation is that _currently_ our logic for upserting a table breaks each operation necessary to upsert a table into a separate comand. ie, we have a `create_table`, `add_column`, `make_column_nullable`, etc. etc. Since we don't construct one large command to run on each table, we'd have to add some special logic to either:\r\n\r\n- ensure that the columns which need indexes _exist_\r\n- when we go to `add_column` for one of our target columns, we _also_ add index after the operation is complete\r\n\r\nI think this _has_ to be opt-in. The simplest is definitely \"add indexes for join columns\" and if we run into performance problems with this for folks down the road, we can add a more complex flag which has some threshold.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/503769492", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-503769492", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 503769492, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzc2OTQ5Mg==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-19T22:26:48.000000Z", "updated_at": "2019-06-19T22:26:48.000000Z", "author_association": "COLLABORATOR", "body": "Hey @jimgibbs! So I punched the above into a test and was able to get it to validate correctly...I'm wondering if there's something funky with your config/schema...\r\n\r\nIf it's _not_ sensitive, can you upload the schema, any notable configuration, and then the command you're using to run this?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/503982636", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-503982636", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 503982636, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzk4MjYzNg==", "user": {"login": "jimgibbs", "id": 7727539, "node_id": "MDQ6VXNlcjc3Mjc1Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7727539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimgibbs", "html_url": "https://github.com/jimgibbs", "followers_url": "https://api.github.com/users/jimgibbs/followers", "following_url": "https://api.github.com/users/jimgibbs/following{/other_user}", "gists_url": "https://api.github.com/users/jimgibbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimgibbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimgibbs/subscriptions", "organizations_url": "https://api.github.com/users/jimgibbs/orgs", "repos_url": "https://api.github.com/users/jimgibbs/repos", "events_url": "https://api.github.com/users/jimgibbs/events{/privacy}", "received_events_url": "https://api.github.com/users/jimgibbs/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-20T11:04:10.000000Z", "updated_at": "2019-06-20T11:05:06.000000Z", "author_association": "NONE", "body": "@AlexanderMann this is the schema for the record shown in the log provided.\r\n\r\n[tenants.zip](https://github.com/datamill-co/target-postgres/files/3310080/tenants.zip)\r\n\r\ntap-rentmanager --config config.json | target-postgres --config postgres.json\r\n\r\nLet me know if you need anything else.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/504121532", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-504121532", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 504121532, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDEyMTUzMg==", "user": {"login": "jimgibbs", "id": 7727539, "node_id": "MDQ6VXNlcjc3Mjc1Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7727539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimgibbs", "html_url": "https://github.com/jimgibbs", "followers_url": "https://api.github.com/users/jimgibbs/followers", "following_url": "https://api.github.com/users/jimgibbs/following{/other_user}", "gists_url": "https://api.github.com/users/jimgibbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimgibbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimgibbs/subscriptions", "organizations_url": "https://api.github.com/users/jimgibbs/orgs", "repos_url": "https://api.github.com/users/jimgibbs/repos", "events_url": "https://api.github.com/users/jimgibbs/events{/privacy}", "received_events_url": "https://api.github.com/users/jimgibbs/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-20T17:52:38.000000Z", "updated_at": "2019-06-20T17:52:38.000000Z", "author_association": "NONE", "body": "@AlexanderMann appears that the datetime coming from our system is incorrect OR there is a validation issue with the date-time parser.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/504131548", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-504131548", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 504131548, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDEzMTU0OA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-06-20T18:23:11.000000Z", "updated_at": "2019-06-20T18:23:11.000000Z", "author_association": "COLLABORATOR", "body": "@jimgibbs so I won't be able to look at this in depth till next week probably (family travel and the ever dreaded _worrrrrkkkkk_) but I'd recommend doing two things:\r\n\r\n1. Look at our [Sandbox Tests](https://github.com/datamill-co/target-postgres/blob/master/tests/test_sandbox.py) for bonafide examples of `date-time`s which _do_ work\r\n2. Also try pulling and running those tests locally, and modify some of the `date-time`s to _match_ yours\r\n\r\nI'm curious if this _is_ a format thing, or whether we've somehow encountered a JSONSchema version and dependency management issue \ud83d\ude04 ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/513600233", "html_url": "https://github.com/datamill-co/target-postgres/issues/117#issuecomment-513600233", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117", "id": 513600233, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzYwMDIzMw==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-22T00:18:12.000000Z", "updated_at": "2019-07-22T00:18:12.000000Z", "author_association": "CONTRIBUTOR", "body": "Is there any guidance on why this target doesn't support actually doing something with STATE messages? Is it that it's hard, or not needed by the original authors? I would have figured everyone needed to store STATEs somewhere, and I feel like the big database all the data is going into is as good a place as any. @AlexanderMann perhaps you could comment -- do you ever want to support storing state messages somehow in this target? ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/513601259", "html_url": "https://github.com/datamill-co/target-postgres/issues/127#issuecomment-513601259", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127", "id": 513601259, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzYwMTI1OQ==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-22T00:28:05.000000Z", "updated_at": "2019-07-22T00:28:05.000000Z", "author_association": "CONTRIBUTOR", "body": "I believe this is actually an issue in combination with `tap-exchangeratesapi` (that I also ran into). The schema it emits at the start uses the `additionalProperties: true` schema feature to declare that that the schema provided is incomplete, and the only column it does actually specify is the `date` column, which `target-postgres` then uses as the only one. I think you'd have to get the `exchangeratesapi` tap to emit a complete schema, or teach `target-postgres` to infer the schema for the additional properties to get this to work cleanly. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/514010768", "html_url": "https://github.com/datamill-co/target-postgres/pull/128#issuecomment-514010768", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128", "id": 514010768, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDAxMDc2OA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-23T00:57:08.000000Z", "updated_at": "2019-07-23T00:57:08.000000Z", "author_association": "MEMBER", "body": "@airhorns Seems like this might really hit performance considering `_flush_streams` with `force=True` would be called whenever a state message is encountered.\r\n\r\n> The downside of this approach is that it may lead to superfluous flushes of the buffered streams, especially if a tap emits a lot of STATE messages. From my experience with several different taps, they all tend to be written in such a way that they emit STATE messages as a single last step, so I don't think this is too big an issue.\r\n\r\nI've written many taps, including many used by Stitch, and I don't believe this to be true. They typically write a state message after each stream is synced (which might not be too bad), or sometimes after each page from an API (which would be a performance issue).\r\n\r\nI'd also suggust using https://github.com/singer-io/singer-python/blob/master/singer/statediff.py#L31 to detect states that have not changed, I've seen a decent number of taps that do that (Stitch has seen enough to write a helper function)\r\n\r\nIf you do only care about the final state, and don't want to write the more complex buffer to state stracker, you could just track the state and emit the final state before the target exits.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/514013700", "html_url": "https://github.com/datamill-co/target-postgres/issues/129#issuecomment-514013700", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129", "id": 514013700, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDAxMzcwMA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-23T01:12:27.000000Z", "updated_at": "2019-07-23T01:12:27.000000Z", "author_association": "MEMBER", "body": "@airhorns Stitch does handle pretty much anything you can place in JSON. The engine behind that is actually pretty complex (think of handle type changes on nested records, etc) and closed source.\r\n\r\nMixpanel and some other SaaS sources to come to mind, you can't always know the schema.\r\n\r\nA JSONB column on objects with `additionalProperties` marked true in the schema is interesting. I think we'd want to make it an option to turn on in the config. Maybe making the column `__sdc_additional_properties` to follow the __sdc convention.\r\n\r\nThe complications come from:\r\n- Pre 9.4 postgres as you mentioned. We actually somewhat target 8.4 to test redshift compatibility.\r\n- We use the target as a basis for target-redshift, so we'd need a way of bypassing the logic in that target.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/514209231", "html_url": "https://github.com/datamill-co/target-postgres/pull/128#issuecomment-514209231", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/128", "id": 514209231, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDIwOTIzMQ==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-23T13:27:04.000000Z", "updated_at": "2019-07-23T13:27:04.000000Z", "author_association": "CONTRIBUTOR", "body": "> I've written many taps, including many used by Stitch, and I don't believe this to be true. They typically write a state message after each stream is synced (which might not be too bad), or sometimes after each page from an API (which would be a performance issue).\r\n\r\nOk, I checked with `tap-shopify` which is what I want to use and you're right, my bad. It emits a state after every API call. Dang.\r\n\r\nSo, would you folks be in favour of adding state tracking that relied on knowing which state records are safe to emit by tracking when all the records before them have been emitted? Optionally with the don't-emit-the-state-if-it-hasn't-changed bit?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/515220811", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-515220811", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 515220811, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTIyMDgxMQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-25T21:26:54.000000Z", "updated_at": "2019-07-25T21:26:54.000000Z", "author_association": "MEMBER", "body": "@airhorns This is great!\r\n\r\nI added a few comments inline.\r\n\r\nBut once thing to think about, since `StateTracker`  is now responsible for handling certain messages as well as the root for streams, perhaps it should really be called `StreamTracker` or `Streams` or `MessageHandler`?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/515224569", "html_url": "https://github.com/datamill-co/target-postgres/pull/126#issuecomment-515224569", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/126", "id": 515224569, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTIyNDU2OQ==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-25T21:38:38.000000Z", "updated_at": "2019-07-25T21:38:38.000000Z", "author_association": "MEMBER", "body": "@aroder Thanks for the contribution!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/515226060", "html_url": "https://github.com/datamill-co/target-postgres/issues/127#issuecomment-515226060", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/127", "id": 515226060, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTIyNjA2MA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-25T21:43:42.000000Z", "updated_at": "2019-07-25T21:43:42.000000Z", "author_association": "MEMBER", "body": "@luipillmann target-postgres requires each field to be in the schema. This was also fixed in this taps code, but not relased https://github.com/singer-io/tap-exchangeratesapi/blob/master/tap_exchangeratesapi/__init__.py#L66\r\n\r\nIf you clone it or use `pip install git+https://github.com/singer-io/tap-exchangeratesapi.git` that should fix your issue", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516040266", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516040266", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516040266, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjA0MDI2Ng==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-29T15:28:08.000000Z", "updated_at": "2019-07-29T15:28:08.000000Z", "author_association": "CONTRIBUTOR", "body": "@awm33 ok, I will rename it. Also I don't see your comments, is your review maybe pending still? Also, also, do you want me to go further with the refactor right now and move more into the `StreamTracker` or is how it is suitable for you? ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516445837", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516445837", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516445837, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ0NTgzNw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T14:32:45.000000Z", "updated_at": "2019-07-30T14:32:45.000000Z", "author_association": "COLLABORATOR", "body": "Hey @airhorns, I'm dedicating my day to all things Target-Postgres and am hoping to get you critical feedback here etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516470152", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516470152", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516470152, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ3MDE1Mg==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T15:28:19.000000Z", "updated_at": "2019-07-30T15:28:19.000000Z", "author_association": "MEMBER", "body": "@airhorns @AlexanderMann Sorry! Forgot to hit Submit Review", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516491824", "html_url": "https://github.com/datamill-co/target-postgres/pull/120#issuecomment-516491824", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/120", "id": 516491824, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ5MTgyNA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T16:22:08.000000Z", "updated_at": "2019-07-30T16:22:08.000000Z", "author_association": "COLLABORATOR", "body": "Going to vote we close this in favour of #130. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516493056", "html_url": "https://github.com/datamill-co/target-postgres/pull/121#issuecomment-516493056", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/121", "id": 516493056, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ5MzA1Ng==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T16:25:20.000000Z", "updated_at": "2019-07-30T16:25:20.000000Z", "author_association": "COLLABORATOR", "body": "@bradleyprice this looks good to me. I'm wondering if this'll end up being a problem with Redshift, but I do want to keep up to date with PsycoPG2.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.267555Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516596886", "html_url": "https://github.com/datamill-co/target-postgres/issues/117#issuecomment-516596886", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117", "id": 516596886, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU5Njg4Ng==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T21:09:43.000000Z", "updated_at": "2019-07-30T21:09:43.000000Z", "author_association": "COLLABORATOR", "body": "Hey @airhorns, sorry, was on vacation then got swamped with a client!\r\n\r\n## So some easy questions then the meaty one:\r\n\r\n> Do you ever want to support storing state messages somehow in this target?\r\n\r\nPresently, no. I don't see the benefit to this as I think it muddies the presently single concern of a target of \"I get information, I persist it\" and instead would make it need to somehow understand state which I _think_ is typically only useful for the tap right?\r\n\r\n## The meaty question:\r\n\r\n> any guidance on why this target doesn't support actually doing something with STATE messages? Is it that it's hard, or not needed by the original authors?\r\n\r\nDataMill originally crafted a runner for Singer `tap`s and `target`s to handle `state` and  whatnot. This took state out of the input and did some voodoo on it to persist it remotely as you can imagine wanting to persist `STATE` messages to something like s3, Postgres, etc. which is different than the target.\r\n\r\nThis is to say, we didn't need it and felt that ignoring it to start was simpler and got something \"pretty-good\" working much more quickly.\r\n\r\n## Conclusion\r\n\r\nI _think_ your PR of #130 handles this in a more robust way for all folks if I'm not mistaken? I'd propose that being the conclusion to this issue.\r\n\r\nIf folks have other suggestions, I'm definitely up for hearing it!\r\n\r\n(Also thanks everyone in here for contributing, super helpful)", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516627274", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-516627274", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 516627274, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjYyNzI3NA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T22:59:26.000000Z", "updated_at": "2019-07-30T22:59:26.000000Z", "author_association": "COLLABORATOR", "body": "@jimgibbs did you have any luck tracking any of this down?\r\n\r\nLast I checked my local tests seemed happy based on the input you provided. Happy to cook up a branch to try and reproduce etc.\r\n\r\nIf this is still an ongoing issue for you, then I'll make it a bug and try to track it down with more focus as this week I have set aside for open source maintenance etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516628827", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-516628827", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 516628827, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjYyODgyNw==", "user": {"login": "jimgibbs", "id": 7727539, "node_id": "MDQ6VXNlcjc3Mjc1Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7727539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimgibbs", "html_url": "https://github.com/jimgibbs", "followers_url": "https://api.github.com/users/jimgibbs/followers", "following_url": "https://api.github.com/users/jimgibbs/following{/other_user}", "gists_url": "https://api.github.com/users/jimgibbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimgibbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimgibbs/subscriptions", "organizations_url": "https://api.github.com/users/jimgibbs/orgs", "repos_url": "https://api.github.com/users/jimgibbs/repos", "events_url": "https://api.github.com/users/jimgibbs/events{/privacy}", "received_events_url": "https://api.github.com/users/jimgibbs/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T23:05:59.000000Z", "updated_at": "2019-07-30T23:05:59.000000Z", "author_association": "NONE", "body": "We put this portion of our project on hold. I do however think that some\ntimestamps do cause issues coming from \"non-standard\" JSON payloads. I\nwould not claim this is a high priority bug, but I do think it is worth\ninvestigating at some point.\n\nThanks!\n\nOn Tue, Jul 30, 2019 at 6:59 PM Alexander Mann <notifications@github.com>\nwrote:\n\n> @jimgibbs <https://github.com/jimgibbs> did you have any luck tracking\n> any of this down?\n>\n> Last I checked my local tests seemed happy based on the input you\n> provided. Happy to cook up a branch to try and reproduce etc.\n>\n> If this is still an ongoing issue for you, then I'll make it a bug and try\n> to track it down with more focus as this week I have set aside for open\n> source maintenance etc.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/datamill-co/target-postgres/issues/125?email_source=notifications&email_token=AB26TM7GGLEI6IKDRPLBG2DQCDBU7A5CNFSM4HZLR3GKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3FRWSQ#issuecomment-516627274>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB26TM5R5MAFJZXRITUV443QCDBU7ANCNFSM4HZLR3GA>\n> .\n>\n", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516631253", "html_url": "https://github.com/datamill-co/target-postgres/issues/129#issuecomment-516631253", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129", "id": 516631253, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjYzMTI1Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T23:17:16.000000Z", "updated_at": "2019-07-30T23:17:16.000000Z", "author_association": "COLLABORATOR", "body": "Weighing in, maybe a simpler approach here would be what do we want this to do ultimately?\r\n\r\nWe have some desire to persist data _forward_ into our target so as to make sure nothing gets lost along the way right? `__sdc_additional_properties` seems quite useful, and I'm thinking that the simple solution is to have it default to `TEXT` and then use JSONB if it's available (etc.).\r\n\r\nMy questions would mainly be around:\r\n- updates to a particular row in the db\r\n- updates to a particular table's schema\r\n\r\n## Upsert for a row\r\n\r\nIn this instance do we want to try and deep merge the value which is present in the remote? If we are unable due to something like a list vs an object vs a scalar, do we overwrite with latest?\r\n\r\nDo we want to wipe out the column on each update and simply use the latest payload each time?\r\n\r\n## Upserting the Schema\r\n\r\n### Dropping a column\r\n\r\nOur schema declared value `foo` and now doesn't: Do we move the data over to our JSONB column?\r\n\r\nOur schema declared value `foo` and now doesn't, but our payloads _still do_. Do we want to drop the column and then start persisting the values into the JSONB column, or do we want to leave the column around?\r\n\r\n### Adding a column\r\n\r\nSchemas did not contain field `foo` but our payloads did. Our schemas now contain field `foo`. Do we want to \"migrate\" over the values present in the JSONB column?\r\n\r\n## What does Stitch do?\r\n\r\nWell, aside from some of the \"magic\" which _finds_ missing fields etc., it does also have an \"errors\" table it uses for debugging. This table ends up having a link to the source table, and source pk, and then the payload.\r\n\r\nWe could do something like this with a table which has text columns etc.\r\n\r\n## Proposal\r\n\r\nI think it'd be pretty straightforward to add a flag to the config to allow persisting things into a \"bonus\" column.\r\n\r\n`target-postgres` and `target-redshift` have a good deal of login in place for something like this. The main \"trick\" will be getting `csv` uploads to not fight with the JSON payloads etc. (I think this will be fine).\r\n\r\nAs far as logic, I'd vote for a dumb \"latest-write-wins\" scenario, where whatever comes along last gets put into the bonus column. If this means that there actually _aren't_ any additional properties on a payload, then it'd be an empty dict.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516639834", "html_url": "https://github.com/datamill-co/target-postgres/issues/125#issuecomment-516639834", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/125", "id": 516639834, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjYzOTgzNA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-30T23:58:09.000000Z", "updated_at": "2019-07-30T23:58:09.000000Z", "author_association": "COLLABORATOR", "body": "@jimgibbs can you give a look over this test here: https://github.com/datamill-co/target-postgres/pull/132\r\n\r\nI wasn't able to reproduce this locally, but I'm hoping maybe CI will catch something? Or possibly I messed up something with the data you provided etc...", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516876014", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516876014", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516876014, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg3NjAxNA==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T14:34:18.000000Z", "updated_at": "2019-07-31T14:34:18.000000Z", "author_association": "CONTRIBUTOR", "body": "Comments addressed :) ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516894343", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516894343", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516894343, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg5NDM0Mw==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T15:16:22.000000Z", "updated_at": "2019-07-31T15:16:22.000000Z", "author_association": "COLLABORATOR", "body": "Looks good @airhorns! I'm going to leave this open till end of day to allow others to comment if there's dissent. Pending none, I'll merge!\r\n\r\n(PS: like the exceptions module \ud83e\udd47 )", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516895618", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-516895618", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 516895618, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg5NTYxOA==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T15:19:31.000000Z", "updated_at": "2019-07-31T15:19:31.000000Z", "author_association": "COLLABORATOR", "body": "@gpetepg I think you were the one originally pushing for this functionality. The PR #131 _should_ address this. If you have any interest in looking that over for the functionality you're after, that'd be \ud83d\udc4d ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516898014", "html_url": "https://github.com/datamill-co/target-postgres/issues/102#issuecomment-516898014", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/102", "id": 516898014, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg5ODAxNA==", "user": {"login": "gpetepg", "id": 24799706, "node_id": "MDQ6VXNlcjI0Nzk5NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/24799706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpetepg", "html_url": "https://github.com/gpetepg", "followers_url": "https://api.github.com/users/gpetepg/followers", "following_url": "https://api.github.com/users/gpetepg/following{/other_user}", "gists_url": "https://api.github.com/users/gpetepg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpetepg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpetepg/subscriptions", "organizations_url": "https://api.github.com/users/gpetepg/orgs", "repos_url": "https://api.github.com/users/gpetepg/repos", "events_url": "https://api.github.com/users/gpetepg/events{/privacy}", "received_events_url": "https://api.github.com/users/gpetepg/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T15:25:23.000000Z", "updated_at": "2019-07-31T15:25:23.000000Z", "author_association": "CONTRIBUTOR", "body": "@AlexanderMann awesome! I am currently using a fork of the PR but will test this out asap and ping you in the slack channel. Haven't had as much time to use Singer as my project got shelved.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516907428", "html_url": "https://github.com/datamill-co/target-postgres/issues/117#issuecomment-516907428", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117", "id": 516907428, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjkwNzQyOA==", "user": {"login": "robmoore", "id": 152990, "node_id": "MDQ6VXNlcjE1Mjk5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/152990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmoore", "html_url": "https://github.com/robmoore", "followers_url": "https://api.github.com/users/robmoore/followers", "following_url": "https://api.github.com/users/robmoore/following{/other_user}", "gists_url": "https://api.github.com/users/robmoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmoore/subscriptions", "organizations_url": "https://api.github.com/users/robmoore/orgs", "repos_url": "https://api.github.com/users/robmoore/repos", "events_url": "https://api.github.com/users/robmoore/events{/privacy}", "received_events_url": "https://api.github.com/users/robmoore/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T15:47:28.000000Z", "updated_at": "2019-07-31T15:47:28.000000Z", "author_association": "NONE", "body": "@airhorns Will the changes in #130 output state for use by the tap on future runs?", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516925059", "html_url": "https://github.com/datamill-co/target-postgres/issues/117#issuecomment-516925059", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/117", "id": 516925059, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjkyNTA1OQ==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T16:33:55.000000Z", "updated_at": "2019-07-31T16:33:55.000000Z", "author_association": "CONTRIBUTOR", "body": "@robmoore yep. Thats the intention. It won't however store it or automagically do anything with it, so managing the state and passing the previous state into the next invocation is still the user's responsibility, not `target-postgres`'. ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516950487", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516950487", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516950487, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjk1MDQ4Nw==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T17:44:15.000000Z", "updated_at": "2019-07-31T17:44:15.000000Z", "author_association": "MEMBER", "body": "@airhorns I just had one quick comment on updating the docs to that class, but otherwise looks great!\r\n\r\nThis is an amazing contribution!!!", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/516986102", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-516986102", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 516986102, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjk4NjEwMg==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-07-31T19:22:52.000000Z", "updated_at": "2019-07-31T19:22:52.000000Z", "author_association": "CONTRIBUTOR", "body": "I added one small commit but big bugfix -- this was only emitting the `value` key of the `STATE` message instead of the whole `STATE` message including the `{\"type\": \"STATE\" ...` preamble or any other keys the tap might have added. Oops. I noticed this by actually trying to swap this in for my (rather infantile) infrastructure and figured that out. Updated the tests to expect the whole `STATE` message as well! ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/517077279", "html_url": "https://github.com/datamill-co/target-postgres/pull/131#issuecomment-517077279", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/131", "id": 517077279, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzA3NzI3OQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-08-01T01:02:56.000000Z", "updated_at": "2019-08-01T01:02:56.000000Z", "author_association": "COLLABORATOR", "body": "Of note: I realized recently that we assume _all the time_ that there is only **one** target running per db all the time. This is due to us using transactions on the db, so something _should_ just fail quickly if there's a conflict etc.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/517078617", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#issuecomment-517078617", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/130", "id": 517078617, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzA3ODYxNw==", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-08-01T01:10:49.000000Z", "updated_at": "2019-08-01T01:10:49.000000Z", "author_association": "CONTRIBUTOR", "body": "Thanks folks! ", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/517083285", "html_url": "https://github.com/datamill-co/target-postgres/issues/129#issuecomment-517083285", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/129", "id": 517083285, "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzA4MzI4NQ==", "user": {"login": "AlexanderMann", "id": 3885029, "node_id": "MDQ6VXNlcjM4ODUwMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3885029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexanderMann", "html_url": "https://github.com/AlexanderMann", "followers_url": "https://api.github.com/users/AlexanderMann/followers", "following_url": "https://api.github.com/users/AlexanderMann/following{/other_user}", "gists_url": "https://api.github.com/users/AlexanderMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexanderMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexanderMann/subscriptions", "organizations_url": "https://api.github.com/users/AlexanderMann/orgs", "repos_url": "https://api.github.com/users/AlexanderMann/repos", "events_url": "https://api.github.com/users/AlexanderMann/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexanderMann/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-08-01T01:36:34.000000Z", "updated_at": "2019-08-01T01:36:34.000000Z", "author_association": "COLLABORATOR", "body": "So @airhorns, in my refactoring/future thinking today, I started piecing together what a pr for your above would look like, then I went a step further and started thinking through schema inspection.\r\n\r\nInterestingly, that functionality is something which relies upon our `batch`ing logic herein, but not really a lot else. You could also make the argument that it relies upon our `denesting` logic.\r\n\r\nFor _both_ of those things, they are distinctly different from the role of the `target` itself. ie, they make life simpler for the code which is ultimately concerned with persisting data to remote. Due to to this and some ideas I've had brewing for a while, I started to think of transformations to the _messages_ being output by `tap`s as `pipe`s.\r\n\r\nIdeally, what we're talking about here with schema inspection, is something which would transform a `table_batch` (a set of records the `target` should persist which has been denested) into _another_ `table_batch` only updating the `schema`s associated.\r\n\r\nTo do this, I created a draft PR https://github.com/AlexanderMann/target-postgres/pull/29 which starts by ripping out a bunch of the stream transformation logic we _already_ have and turns it into a series of [Python Generators](https://wiki.python.org/moin/Generators) to make the stream processing nature of everything as apparent as possible. (this already sort of happens when we represent the input stream as an iterator using `io.TextIOWrapper`)\r\n\r\nIf you get a chance, I'd appreciate other eyes on the general concept of the code changes.\r\n\r\nIf this is more or less \ud83d\udc4d then adding in a function which takes `table_batch`es and inspects each record becomes pretty easy, and also becomes something which we can possibly turn into another command, ie:\r\n\r\n```sh\r\ntap-hubspot | pipe-inspect-schema | target-postgres >> state.json\r\n```", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "RECORD", "stream": "comments", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/issues/comments/520454374", "html_url": "https://github.com/datamill-co/target-postgres/pull/136#issuecomment-520454374", "issue_url": "https://api.github.com/repos/datamill-co/target-postgres/issues/136", "id": 520454374, "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ1NDM3NA==", "user": {"login": "awm33", "id": 3846080, "node_id": "MDQ6VXNlcjM4NDYwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3846080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awm33", "html_url": "https://github.com/awm33", "followers_url": "https://api.github.com/users/awm33/followers", "following_url": "https://api.github.com/users/awm33/following{/other_user}", "gists_url": "https://api.github.com/users/awm33/gists{/gist_id}", "starred_url": "https://api.github.com/users/awm33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awm33/subscriptions", "organizations_url": "https://api.github.com/users/awm33/orgs", "repos_url": "https://api.github.com/users/awm33/repos", "events_url": "https://api.github.com/users/awm33/events{/privacy}", "received_events_url": "https://api.github.com/users/awm33/received_events", "type": "User", "site_admin": "False"}, "created_at": "2019-08-12T14:42:54.000000Z", "updated_at": "2019-08-12T14:42:54.000000Z", "author_association": "MEMBER", "body": "@airhorns I could see running SQL before or after a target run as useful, though I'm a little concerned about this loading to scope bloat. I've typically handled this sort of stuff after the target run using something like [dbt](https://www.getdbt.com/). I've also seen people use the SQL Airflow operators to run similar commands.", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:38.519017Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}, "assignees": {"since": "2019-08-12T18:12:33.661657Z"}, "issues": {"since": "2019-08-12T18:12:35.765459Z"}, "comments": {"since": "2019-08-12T18:12:38.519017Z"}}}}}
{"type": "SCHEMA", "stream": "pull_requests", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"_sdc_repository": {"type": ["string"]}, "id": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}, "number": {"type": ["null", "integer"]}, "state": {"type": ["null", "string"]}, "title": {"type": ["null", "string"]}, "body": {"type": ["null", "string"]}, "user": {"type": ["null", "object"], "additionalProperties": false, "properties": {"login": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}}}, "merged_at": {"type": ["null", "string"], "format": "date-time"}, "closed_at": {"type": ["null", "string"], "format": "date-time"}, "created_at": {"type": ["null", "string"], "format": "date-time"}, "updated_at": {"type": ["null", "string"], "format": "date-time"}}}, "key_properties": ["id"]}
{"type": "SCHEMA", "stream": "reviews", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"_sdc_repository": {"type": ["string"]}, "id": {"type": ["null", "integer"]}, "user": {"type": ["null", "object"], "additionalProperties": false, "properties": {"login": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}}}, "body": {"type": ["null", "string"]}, "state": {"type": ["null", "string"]}, "commit_id": {"type": ["null", "string"]}, "html_url": {"type": ["null", "string"]}, "pull_request_url": {"type": ["null", "string"]}}}, "key_properties": ["id"]}
{"type": "SCHEMA", "stream": "review_comments", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"_sdc_repository": {"type": ["string"]}, "id": {"type": ["null", "integer"]}, "user": {"type": ["null", "object"], "additionalProperties": false, "properties": {"login": {"type": ["null", "string"]}, "id": {"type": ["null", "integer"]}}}, "body": {"type": ["null", "string"]}, "node_id": {"type": ["null", "string"]}, "pull_request_review_id": {"type": ["null", "integer"]}, "diff_hunk": {"type": ["null", "string"]}, "path": {"type": ["null", "string"]}, "position": {"type": ["null", "integer"]}, "original_position": {"type": ["null", "integer"]}, "commit_id": {"type": ["null", "string"]}, "original_commit_id": {"type": ["null", "string"]}, "in_reply_to_id": {"type": ["null", "integer"]}, "created_at": {"type": ["null", "string"], "format": "date-time"}, "updated_at": {"type": ["null", "string"], "format": "date-time"}, "html_url": {"type": ["null", "string"]}, "pull_request_url": {"type": ["null", "string"]}, "assignee": {"type": ["null", "string"]}, "assignees": {"type": ["null", "string"]}, "author_association": {"type": ["null", "string"]}, "base": {"type": ["null", "string"]}, "comments_url": {"type": ["null", "string"]}, "commits_url": {"type": ["null", "string"]}, "diff_url": {"type": ["null", "string"]}, "head": {"type": ["null", "string"]}, "issue_url": {"type": ["null", "string"]}, "labels": {"type": ["null", "string"]}, "locked": {"type": ["null", "string"]}, "merge_commit_sha": {"type": ["null", "string"]}, "milestone": {"type": ["null", "string"]}, "patch_url": {"type": ["null", "string"]}, "requested_reviewers": {"type": ["null", "string"]}, "requested_teams": {"type": ["null", "string"]}, "review_comment_url": {"type": ["null", "string"]}, "review_comments_url": {"type": ["null", "string"]}, "statuses_url": {"type": ["null", "string"]}}}, "key_properties": ["id"]}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/137", "id": "306601800", "number": 137, "state": "closed", "title": "Release/0 1 9", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPre-release/housekeeping for 0.1.9.", "created_at": "2019-08-12T18:06:21.000000Z", "updated_at": "2019-08-12T18:06:33.000000Z", "closed_at": "2019-08-12T18:06:29.000000Z", "merged_at": "2019-08-12T18:06:29.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/135", "id": "303855599", "number": 135, "state": "closed", "title": "Fix/activate version not flushing buffer", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhen we issue an activate version record, we presently do not flush the buffer after writing the batch. This results in more records being written to remote than need to be.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/kaytranada/weight-off", "created_at": "2019-08-02T16:34:26.000000Z", "updated_at": "2019-08-12T17:49:40.000000Z", "closed_at": "2019-08-12T17:49:37.000000Z", "merged_at": "2019-08-12T17:49:37.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 273728411, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/135#pullrequestreview-273728411", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/135", "commit_id": "513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/136", "id": "305231815", "number": 136, "state": "open", "title": "Add an initial_sql config option to execute arbitrary SQL upon boot", "user": {"login": "airhorns", "id": 158950}, "body": "This lets users execute some SQL before target-postgres spins up and does it's thing. This is useful for SQL like `SET ROLE` or setting up encoding business, and I think will end up being generally useful for other stuff I haven't (and don't need to) predict.\r\n\r\nFor me, this was prompted by needing to `SET ROLE` on Google Cloud SQL. On some postgres deployments, target-postgres may be running as a user with limited permissions, or as a user different than the downstream consumer of the data. In these instances it's important that the table owner of the target-postgres created tables is controllable, especially in deployments where the superuser isn't in the developers control, like Google Cloud SQL. `SET ROLE` is the only way to really control the table owner of the created tables so that other users may be able to grant permissions on those tables outside of the normal `target-postgres` lifecycle. See https://stackoverflow.com/questions/2276644/list-all-tables-in-postgresql-information-schema for a more thourough description of the pieces at play here.", "created_at": "2019-08-07T16:36:05.000000Z", "updated_at": "2019-08-12T14:42:54.000000Z", "closed_at": null, "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "id": "300899347", "number": 130, "state": "closed", "title": "Performant STATE message flush", "user": {"login": "airhorns", "id": 158950}, "body": "This is on top of #120 and a follow up to #128. \r\n\r\nIn order for orchestrating systems to properly keep track of the STATE of Singer streams, target-postgres needs to emit the STATE messages it receives from the tap to stdout for the orchestrator to persist. This keeps target-postgres Singer-spec compliant and lets users pass that STATE back into the tap to incrementally load from any big sources.\r\n\r\nThe Singer spec however does not specify what exactly is in STATE messages, so, they can relate to any or all of the active streams. That means that target-postgres doesn't and can't know which records that it may have buffered in memory are \"covered\" by an incoming STATE record. If target-postgres eagerly emitted the STATE record to stdout, but didn't flush all the records, the system becomes open to inconsistency. If the STATE message were persisted by the outside orchestrator, but then the process crashed later, the buffers in target-postgres process would be lost and data dropped. The implementation from #120 suffers from this bug, see #120 for more discussion.\r\n\r\nThis commit prevents this bug by \"late\" flushing buffered STATE messages when all the records that arrived prior to that STATE message have been flushed. STATE messages are \"delayed\" until the records that came before have all been put on a buffered stream and then flushed. target-snowflake implements this here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py.\r\n\r\nThis is accomplished by keeping a low watermark of the least recently arriving record for each stream, and upon flushing a buffer, checking to see if there are any unflushed STATE messages that have become safe to flush because they are below that watermark. The way to think about this is as a \"safety cursor\" that lags behind the incoming stream, pointing to the point in the stream where all records before that point have been saved to the database. Some records ahead of that point will likely have been saved, as different streams records may be interleaved or arriving at different rates, but because of the whole \"states are on one timeline different than each stream\" thing, the STATE message has to wait for all prior records to be flushed.\r\n\r\nThis is implemented using a new StateTracker class, which wraps a bit of business logic around the old streams dict that is used to hold the BufferedSingerStream objects. I'm happy to get feedback on the style or further refactorings that this might prompt so please review away. I tried to make this change in a not super invasive way such that we could potentially chunk up further changes into future PRs. ", "created_at": "2019-07-24T21:18:07.000000Z", "updated_at": "2019-08-01T01:10:51.000000Z", "closed_at": "2019-07-31T22:39:53.000000Z", "merged_at": "2019-07-31T22:39:53.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 266889419, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-266889419", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 268444196, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@airhorns overall I think this looks great.\r\n\r\nMainly the stuff I have are nits. The fact that existing tests _work_ correctly is the thing I think encourages this being \"safe\".", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-268444196", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269027549, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269027549", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269027873, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269027873", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269054259, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269054259", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "3fbce0602814dc8be7d429b360ac2649876cfd24", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269054651, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269054651", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "3fbce0602814dc8be7d429b360ac2649876cfd24", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269056587, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269056587", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269087036, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269087036", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269175486, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269175486", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269193184, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269193184", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269193655, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269193655", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269200966, "user": {"login": "airhorns", "id": 158950}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269200966", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 269284699, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#pullrequestreview-269284699", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 266889419, "id": 307504285, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzUwNDI4NQ==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 7, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "user": {"login": "awm33", "id": 3846080}, "body": "Since this is very generic, this should probably go into `target_tools.py`", "created_at": "2019-07-25T21:14:49.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r307504285", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 266889419, "id": 307505139, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzUwNTEzOQ==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 7, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "user": {"login": "awm33", "id": 3846080}, "body": "I now see why you moved it, it would create a circular import. Perhaps it's time for an `exceptions.py`", "created_at": "2019-07-25T21:17:12.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r307505139", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "MEMBER", "in_reply_to_id": 307504285, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 266889419, "id": 307506034, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzUwNjAzNA==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StateTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 50, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "user": {"login": "awm33", "id": 3846080}, "body": "I would use Stitch's state_diff function to cut down on emitting extraneous states. They actually do that internally.", "created_at": "2019-07-25T21:19:41.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r307506034", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308762878, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODc2Mjg3OA==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 46, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "This is a huge nit and not an overly obvious thing in the codebase. The test names are named with single underscores denoting a sentence style thing, and double underscores denoting a grouping of something.\r\n\r\nie, if I have a bunch of tests for the function `add` I'd have `test_add__` as the prefix, and then maybe for empty state adds those'd be grouped together underneath `test_add__empty__` as the prefix.\r\n\r\nSo for all these tests, I think it'd be something like `test_state__capture`/`test_state__capture__can_be_disabled`/`test_state__capture__emits_only_messages_when_all_records_have_been_flushed`/etc.", "created_at": "2019-07-30T14:41:52.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308762878", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308769319, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODc2OTMxOQ==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 57, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Love that these tests are purely additive and that the old tests still pass without issue! Makes reviewing this feel wayyyyyy safer. Many thanks @airhorns!", "created_at": "2019-07-30T14:52:15.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308769319", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308773686, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODc3MzY4Ng==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(100))\n+    target = Target()\n+\n+    def test_stream():\n+        yield rows[0]\n+        for row in rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+        for row in rows[slice(6, 10)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+        for row in rows[slice(11, 15)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 0\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in rows[slice(16, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 1\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-3'\n+\n+        for row in rows[slice(26, 31)]:\n+            yield row\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__emits__most__recent__state__when__final__flush__occurs(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(5))\n+    rows.append(json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}))\n+\n+    target_tools.stream_to_target(rows, Target(), config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded despite not reaching\n+    # one full flushable batch\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-1'\n+\n+\n+class DogStream(CatStream):\n+    stream = 'dogs'\n+    schema = CatStream.schema.copy()\n+\n+\n+DogStream.schema['stream'] = 'dogs'\n+\n+\n+def test_state__doesnt__emit__when__only__one__of__several__streams__is__flushing(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    cat_rows = list(CatStream(100))\n+    dog_rows = list(DogStream(50))\n+    target = Target()\n+\n+    # Simulate one stream that yields a lot of records with another that yields few records and ensure both need to be flushed\n+    # before any state messages are emitted\n+    def test_stream():\n+        yield cat_rows[0]\n+        yield dog_rows[0]\n+        for row in cat_rows[slice(1, 5)]:\n+            yield row\n+        for row in dog_rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+\n+        for row in cat_rows[slice(6, 45)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+\n+        for row in cat_rows[slice(46, 65)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit for both streams no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 3\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in dog_rows[slice(6, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 4\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-2'\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last dog records were loaded despite not reaching one full flushable batch\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__doesnt__emit__when__it__isnt__different__than__the__previous__emission(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 5\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(100))\n+    target = Target()\n+\n+    def test_stream():\n+        yield rows[0]\n+        for row in rows[slice(1, 21)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+\n+        for row in rows[slice(22, 99)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+\n+        output = filtered_output(capsys)\n+        assert len(output) == 0\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    output = filtered_output(capsys)\n+    assert len(output) == 0", "path": "tests/test_target_tools.py", "position": null, "original_position": 201, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Line break at the end. Not critical, but if you're in there \ud83d\udc4d ", "created_at": "2019-07-30T14:59:18.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308773686", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308778457, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODc3ODQ1Nw==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0][1] <= all_flushed_watermark):\n+            emittable_state = self.state_queue.popleft()[0]\n+\n+        if emittable_state:\n+            if len(statediff.diff(emittable_state, self.last_emitted_state or {})) > 0:\n+                line = json.dumps(emittable_state)\n+                sys.stdout.write(\"{}\\n\".format(line))\n+                sys.stdout.flush()\n+\n+            self.last_emitted_state = emittable_state", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 78, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: line break \ud83d\udc4d ", "created_at": "2019-07-30T15:07:43.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308778457", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308789494, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODc4OTQ5NA==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0][1] <= all_flushed_watermark):", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 69, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "So I'm curious here about the usage of tuples in the `state_queue`. I'm thinking it might be beneficial to use simple lightweight dicts here instead, where the dicts looked something like:\r\n\r\n```py\r\nstate_queue = deque([\r\n  {'message': ...,\r\n   'watermark': 123},\r\n  {'message': ...,\r\n   'watermark': 456},\r\n  ...])\r\n```\r\n\r\nIf we did that, I think this line might be simpler for those new to this class to grok, ie:\r\n\r\n```py\r\n... or self.state_queue[0]['watermark'] <= all_flushed_watermark ...\r\n```\r\n\r\nThoughts?", "created_at": "2019-07-30T15:26:47.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308789494", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308816248, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNjI0OA==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 66, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "If we wanted to get crazy about performance, this'd prolly make sense to be a min heap. I'd personally vote for this to be tackled later if there're tonnes of open streams at any given time etc.", "created_at": "2019-07-30T16:18:16.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308816248", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308816819, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNjgxOQ==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(100))\n+    target = Target()\n+\n+    def test_stream():\n+        yield rows[0]\n+        for row in rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+        for row in rows[slice(6, 10)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+        for row in rows[slice(11, 15)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 0\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in rows[slice(16, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 1\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-3'\n+\n+        for row in rows[slice(26, 31)]:\n+            yield row\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__emits__most__recent__state__when__final__flush__occurs(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(5))\n+    rows.append(json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}))\n+\n+    target_tools.stream_to_target(rows, Target(), config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded despite not reaching\n+    # one full flushable batch\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-1'\n+\n+\n+class DogStream(CatStream):\n+    stream = 'dogs'\n+    schema = CatStream.schema.copy()\n+\n+\n+DogStream.schema['stream'] = 'dogs'\n+\n+\n+def test_state__doesnt__emit__when__only__one__of__several__streams__is__flushing(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    cat_rows = list(CatStream(100))\n+    dog_rows = list(DogStream(50))\n+    target = Target()\n+\n+    # Simulate one stream that yields a lot of records with another that yields few records and ensure both need to be flushed\n+    # before any state messages are emitted\n+    def test_stream():\n+        yield cat_rows[0]\n+        yield dog_rows[0]\n+        for row in cat_rows[slice(1, 5)]:\n+            yield row\n+        for row in dog_rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+\n+        for row in cat_rows[slice(6, 45)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+\n+        for row in cat_rows[slice(46, 65)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit for both streams no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 3\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in dog_rows[slice(6, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 4\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-2'\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last dog records were loaded despite not reaching one full flushable batch\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__doesnt__emit__when__it__isnt__different__than__the__previous__emission(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 176, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: underscores \ud83d\udc4d ", "created_at": "2019-07-30T16:19:27.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308816819", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308816851, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNjg1MQ==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(100))\n+    target = Target()\n+\n+    def test_stream():\n+        yield rows[0]\n+        for row in rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+        for row in rows[slice(6, 10)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+        for row in rows[slice(11, 15)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 0\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in rows[slice(16, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 1\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-3'\n+\n+        for row in rows[slice(26, 31)]:\n+            yield row\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__emits__most__recent__state__when__final__flush__occurs(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(5))\n+    rows.append(json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}))\n+\n+    target_tools.stream_to_target(rows, Target(), config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded despite not reaching\n+    # one full flushable batch\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-1'\n+\n+\n+class DogStream(CatStream):\n+    stream = 'dogs'\n+    schema = CatStream.schema.copy()\n+\n+\n+DogStream.schema['stream'] = 'dogs'\n+\n+\n+def test_state__doesnt__emit__when__only__one__of__several__streams__is__flushing(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 126, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: underscores \ud83d\udc4d ", "created_at": "2019-07-30T16:19:32.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308816851", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308816937, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNjkzNw==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):\n+    config = CONFIG.copy()\n+    config['max_batch_rows'] = 20\n+    config['batch_detection_threshold'] = 1\n+    rows = list(CatStream(100))\n+    target = Target()\n+\n+    def test_stream():\n+        yield rows[0]\n+        for row in rows[slice(1, 5)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }})\n+        for row in rows[slice(6, 10)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})\n+        for row in rows[slice(11, 15)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-3' }})\n+\n+        # After some state messages but before the batch size has been hit no state messages should have been emitted\n+        assert len(target.calls['write_batch']) == 0\n+        output = filtered_output(capsys)\n+        assert output == []\n+\n+        for row in rows[slice(16, 25)]:\n+            yield row\n+        yield json.dumps({'type': 'STATE', 'value': { 'test': 'state-4' }})\n+\n+        # After the batch size has been hit and a write_batch call was made, the most recent safe to emit state should have been emitted\n+        assert len(target.calls['write_batch']) == 1\n+        output = filtered_output(capsys)\n+        assert len(output) == 1\n+        assert json.loads(output[0])['test'] == 'state-3'\n+\n+        for row in rows[slice(26, 31)]:\n+            yield row\n+\n+    target_tools.stream_to_target(test_stream(), target, config=config)\n+\n+    # The final state message should have been outputted after the last records were loaded\n+    output = filtered_output(capsys)\n+    assert len(output) == 1\n+    assert json.loads(output[0])['test'] == 'state-4'\n+\n+\n+def test_state__emits__most__recent__state__when__final__flush__occurs(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 102, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: underscores \ud83d\udc4d ", "created_at": "2019-07-30T16:19:41.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308816937", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308817027, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNzAyNw==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 57, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: underscores \ud83d\udc4d ", "created_at": "2019-07-30T16:19:52.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308817027", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268444196, "id": 308817447, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODgxNzQ0Nw==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 3, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "nit: alphabetize the imports in here \ud83d\udc4d ", "created_at": "2019-07-30T16:20:47.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r308817447", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269027549, "id": 309232704, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTIzMjcwNA==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StateTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 50, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "user": {"login": "airhorns", "id": 158950}, "body": "I agree, but I did it below in the `_emit_safe_queued_states` function so that the diff is done as late as possible. That way it's comparing states it would actually emit and skipping any intermediates in the queue that might be different but not matter. ", "created_at": "2019-07-31T13:53:13.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309232704", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 307506034, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269027873, "id": 309232963, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTIzMjk2Mw==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 46, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "airhorns", "id": 158950}, "body": "Ah that makes sense, I didn't get that off the bat. I will update! ", "created_at": "2019-07-31T13:53:41.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309232963", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 308762878, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269054259, "id": 309253390, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTI1MzM5MA==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 7, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "ef1c163fd6b165c1e22d5a1467168133c0bc6d96", "user": {"login": "airhorns", "id": 158950}, "body": "Ok, I added that file, definitely feels cleaner", "created_at": "2019-07-31T14:30:41.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309253390", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 307504285, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269054651, "id": 309253685, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTI1MzY4NQ==", "diff_hunk": "@@ -0,0 +1,78 @@\n+from collections import deque\n+import json\n+import sys\n+import singer.statediff as statediff\n+\n+\n+class TargetError(Exception):\n+    \"\"\"\n+    Raise when there is an Exception streaming data to the target.\n+    \"\"\"\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains tuples of (state, message_counter)\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append((value, self.message_counter))\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0][1] <= all_flushed_watermark):", "path": "target_postgres/state_tracker.py", "position": null, "original_position": 69, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "airhorns", "id": 158950}, "body": "I agree, I think the tuple is unnecessarily opaque! Switched to a dict. ", "created_at": "2019-07-31T14:31:10.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309253685", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 308789494, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269056587, "id": 309255227, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTI1NTIyNw==", "diff_hunk": "@@ -70,3 +76,174 @@ def test_loading__invalid__records__threshold():\n         target_tools.stream_to_target(InvalidCatStream(20), target, config=config)\n \n     assert len(target.calls['write_batch']) == 0\n+\n+\n+def test_state__capture(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target())\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 2\n+    assert json.loads(output[0])['test'] == 'state-1'\n+    assert json.loads(output[1])['test'] == 'state-2'\n+\n+\n+def test_state__capture__can__be__disabled(capsys):\n+    stream = [\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-1' }}),\n+        json.dumps({'type': 'STATE', 'value': { 'test': 'state-2' }})]\n+\n+    target_tools.stream_to_target(stream, Target(), {'state_support': False})\n+    output = filtered_output(capsys)\n+\n+    assert len(output) == 0\n+\n+\n+def test_state__emits__only__messages__when__all__records__before__have__been__flushed(capsys):", "path": "tests/test_target_tools.py", "position": null, "original_position": 57, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "bbf96f05cad2b62ee336e79196bc61aa6554fe32", "user": {"login": "airhorns", "id": 158950}, "body": "\ud83d\udcaf ", "created_at": "2019-07-31T14:33:54.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309255227", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 308769319, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269175486, "id": 309348486, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTM0ODQ4Ng==", "diff_hunk": "@@ -0,0 +1,74 @@\n+from collections import deque\n+import json\n+import singer.statediff as statediff\n+import sys\n+\n+from target_postgres.exceptions import TargetError\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.", "path": "target_postgres/stream_tracker.py", "position": null, "original_position": 11, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "user": {"login": "awm33", "id": 3846080}, "body": "nit: Should this be updated to reflect the new class? It does more than tracking state messages.", "created_at": "2019-07-31T17:43:06.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309348486", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269193184, "id": 309362302, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTM2MjMwMg==", "diff_hunk": "@@ -0,0 +1,74 @@\n+from collections import deque\n+import json\n+import singer.statediff as statediff\n+import sys\n+\n+from target_postgres.exceptions import TargetError\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains dicts of {'state': <state blob>, 'watermark': number}\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append({'state': value, 'watermark': self.message_counter})\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0]['watermark'] <= all_flushed_watermark):\n+            emittable_state = self.state_queue.popleft()['state']\n+\n+        if emittable_state:", "path": "target_postgres/stream_tracker.py", "position": 69, "original_position": 68, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@airhorns just noticed this but shouldn't this emit _all_ states which are safe to emit? ie, this conditional block should really be wrapped up underneath the `while` loop?", "created_at": "2019-07-31T18:14:15.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309362302", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269193655, "id": 309362634, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTM2MjYzNA==", "diff_hunk": "@@ -0,0 +1,74 @@\n+from collections import deque\n+import json\n+import singer.statediff as statediff\n+import sys\n+\n+from target_postgres.exceptions import TargetError\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains dicts of {'state': <state blob>, 'watermark': number}\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append({'state': value, 'watermark': self.message_counter})\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0]['watermark'] <= all_flushed_watermark):\n+            emittable_state = self.state_queue.popleft()['state']\n+\n+        if emittable_state:", "path": "target_postgres/stream_tracker.py", "position": 69, "original_position": 68, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "I'm thinking that the bug here would be if I had a couple states which became safe to emit, this would only emit the latest each time. Not sure if that's expected?", "created_at": "2019-07-31T18:15:04.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309362634", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "COLLABORATOR", "in_reply_to_id": 309362302, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 269200966, "id": 309368408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTM2ODQwOA==", "diff_hunk": "@@ -0,0 +1,74 @@\n+from collections import deque\n+import json\n+import singer.statediff as statediff\n+import sys\n+\n+from target_postgres.exceptions import TargetError\n+\n+\n+class StreamTracker:\n+    \"\"\"\n+    Object to track STATE messages coming in from the tap and which streams need to be flushed before they can be safely emitted.\n+    Because Singer taps don't have a standard way of expressing which streams correspond to which STATEs, the target can only safely\n+    emit a STATE message once all the records that came in prior to that STATE in the stream. Because target-postgres buffers\n+    the records in BufferedSingerStreams, the STATE messages need to be delayed until all the records that came before them have been\n+    saved to the database from their buffers.\n+    \"\"\"\n+\n+    def __init__(self, target, emit_states):\n+        self.target = target\n+        self.emit_states = emit_states\n+\n+        self.streams = {}\n+        self.stream_add_watermarks = {}\n+        self.stream_flush_watermarks = {}\n+\n+        self.state_queue = deque()  # contains dicts of {'state': <state blob>, 'watermark': number}\n+        self.message_counter = 0\n+        self.last_emitted_state = None\n+\n+    def register_stream(self, stream, buffered_stream):\n+        self.streams[stream] = buffered_stream\n+        self.stream_add_watermarks[stream] = 0\n+        self.stream_flush_watermarks[stream] = 0\n+\n+    def flush_streams(self, force=False):\n+        for (stream, stream_buffer) in self.streams.items():\n+            if force or stream_buffer.buffer_full:\n+                self.target.write_batch(stream_buffer)\n+                stream_buffer.flush_buffer()\n+                self.stream_flush_watermarks[stream] = self.stream_add_watermarks[stream]\n+\n+        self._emit_safe_queued_states(force=force)\n+\n+    def handle_state_message(self, value):\n+        if self.emit_states:\n+            self.state_queue.append({'state': value, 'watermark': self.message_counter})\n+            self._emit_safe_queued_states()\n+\n+    def handle_record_message(self, stream, line_data):\n+        if stream not in self.streams:\n+            raise TargetError('A record for stream {} was encountered before a corresponding schema'.format(stream))\n+\n+        self.message_counter += 1\n+        self.stream_add_watermarks[stream] = self.message_counter\n+        self.streams[stream].add_record_message(line_data)\n+\n+    def _emit_safe_queued_states(self, force=False):\n+        # State messages that occured before the least recently flushed record are safe to emit.\n+        # If they occurred after some records that haven't yet been flushed, they aren't safe to emit.\n+        # Because records arrive at different rates from different streams, we take the earliest unflushed record as the threshold for what\n+        # STATE messages are safe to emit.\n+        all_flushed_watermark = min(self.stream_flush_watermarks.values(), default=0)\n+        emittable_state = None\n+\n+        while len(self.state_queue) > 0 and (force or self.state_queue[0]['watermark'] <= all_flushed_watermark):\n+            emittable_state = self.state_queue.popleft()['state']\n+\n+        if emittable_state:", "path": "target_postgres/stream_tracker.py", "position": 69, "original_position": 68, "commit_id": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "original_commit_id": "14f5876db1827505ad454dcaa5025e7449c94b12", "user": {"login": "airhorns", "id": 158950}, "body": "My reading of the Singer spec was that this behaviour is ok (and in some circumstances desirable), but, I am totally open to changing this. The reason I think it's ok is that because the state messages are opaque, downstream consumers of them can't really presume to do any merging or munging of the states, so the tap itself has to emit a full state each time. I also think it's desirable to not emit superfluous states because they probably trigger some sort of persistence (it is state after all) downstream, so minimizing the amount of persistence that happens seems ideal. In the instance where a tap emits one state per API call, this is potentially a huge reduction in STATE messages emitted and thus STATE messages processed. \r\n\r\nFWIW this matches `target-snowflake`'s `StateBuffer` doodad here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py#L134-136", "created_at": "2019-07-31T18:27:11.000000Z", "updated_at": "2019-07-31T19:15:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/130#discussion_r309368408", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/130", "author_association": "CONTRIBUTOR", "in_reply_to_id": 309362302, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/134", "id": "303154556", "number": 134, "state": "closed", "title": "Spike/pipes", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "created_at": "2019-07-31T22:50:37.000000Z", "updated_at": "2019-08-01T01:07:25.000000Z", "closed_at": "2019-08-01T01:07:25.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/131", "id": "302716801", "number": 131, "state": "open", "title": "Feature/stream name  root table  canonicalization", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/102\r\n\r\n- Provide logic which works in `target-redshift` as well as `target-postgres`\r\n  - works across all versions\r\n- Migrates existing remote databases seamlessly\r\n- Existing tests remain untouched\r\n\r\n## Notes\r\n\r\nThis will break instances where _multiple_ versions of `target-postgres` are trying to upsert _different_ streams (taps) to the same remote.\r\n\r\nI'm unsure as to whether we _want_ to support this use case.\r\n\r\nie, as a user, I have a long running tap persisting data to postgres db A, via `target-postgres v0.1.8`. I also want to be able to run the latest `target-postgres v0.1.X` to persist another `tap` to db A.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/snottynoserezkids/sets/snotty-nose-rez-kids-lp", "created_at": "2019-07-30T22:15:47.000000Z", "updated_at": "2019-08-01T01:02:56.000000Z", "closed_at": null, "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 268698377, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/131#pullrequestreview-268698377", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/131", "commit_id": "ca694696c83f499f9c15c59cae56433a6f959954", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 268698377, "id": 308967476, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODk2NzQ3Ng==", "diff_hunk": "@@ -255,6 +256,7 @@ jobs:\n           name: Repeatability of Data -> Target\n           command: |\n             source venv--target-postgres/bin/activate\n+            pip install .", "path": ".circleci/config.yml", "position": 21, "original_position": 21, "commit_id": "38baae4c0130549944e8e57eceb753db68ce579a", "original_commit_id": "ca694696c83f499f9c15c59cae56433a6f959954", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "unsure as to _why_ this is needed but somehow the `virtualenv` ended up getting borked somewhere along the way.", "created_at": "2019-07-30T22:16:30.000000Z", "updated_at": "2019-07-31T22:43:15.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/131#discussion_r308967476", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/131", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/104", "id": "262267780", "number": 104, "state": "closed", "title": "Canonicalize Root Stream Name", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/102\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/snottynoserezkids/sets/snotty-nose-rez-kids-lp", "created_at": "2019-03-19T00:04:56.000000Z", "updated_at": "2019-07-31T15:28:47.000000Z", "closed_at": "2019-07-30T22:12:43.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/133", "id": "303007471", "number": 133, "state": "closed", "title": "Bump: singer-python to 5.6.1", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nTrying to cut a release for the end of the week. Latest dependencies are best.\r\n\r\n## Suggested Musical Pairing\r\n\r\nBloomberg Radio", "created_at": "2019-07-31T15:23:20.000000Z", "updated_at": "2019-07-31T15:26:30.000000Z", "closed_at": "2019-07-31T15:26:28.000000Z", "merged_at": "2019-07-31T15:26:28.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/132", "id": "302737824", "number": 132, "state": "open", "title": "Fail: Datetime validation issue", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Example branch for: #125 ", "created_at": "2019-07-30T23:56:45.000000Z", "updated_at": "2019-07-30T23:56:45.000000Z", "closed_at": null, "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/121", "id": "283895618", "number": 121, "state": "closed", "title": "Bump psycopg2 from 2.7.7 -> 2.8.2", "user": {"login": "bradleyprice", "id": 25420}, "body": "Fixes #119\r\n\r\npsycopg2 2.8 release introduced mappings between Postgresql errors\r\nand python exceptions.\r\n\r\nI assume this came with additional, more granular exceptions that are\r\nnow subclassed.\r\n\r\nIf the original code had been throwing the `IntegrityError` exception, the\r\ncode would have still worked, since the `NotNullValidation` is a subclass.\r\nHowever, since the exception is wrapped in `postgres.PostgresError` and\r\nit's using a matcher, the matching string had to be updated to match the\r\nnew exception being thrown.\r\n\r\nREFERENCES:\r\n* http://initd.org/psycopg/articles/2019/04/04/psycopg-28-released/\r\n* http://initd.org/psycopg/docs/errors.html", "created_at": "2019-05-31T04:45:18.000000Z", "updated_at": "2019-07-30T16:25:26.000000Z", "closed_at": "2019-07-30T16:25:25.000000Z", "merged_at": "2019-07-30T16:25:25.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/120", "id": "283855803", "number": 120, "state": "closed", "title": "Send STATE records to stdout", "user": {"login": "bradleyprice", "id": 25420}, "body": "Fixes #117 \r\n\r\n\r\nThis will pass all `STATE` records to stdout.\r\n\r\nThe command could now be:\r\n\r\n`tap | target >> state.json`\r\n\r\nAnd the resulting state file would look something like this:\r\n\r\n```\r\n{ \"users\": 1 }\r\n{ \"users\": 2 }\r\n```\r\n\r\nWith this approach, if the end user only cares about the latest\r\n`STATE` record, they can manually handle updating their state file:\r\n\r\n`tail -1 state.json > state.json.tmp && mv state.json.tmp state.json`", "created_at": "2019-05-31T00:18:23.000000Z", "updated_at": "2019-07-30T16:22:08.000000Z", "closed_at": "2019-07-30T16:22:08.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/126", "id": "289888519", "number": 126, "state": "closed", "title": "windows equivalent to run target", "user": {"login": "aroder", "id": 23650}, "body": "", "created_at": "2019-06-19T21:37:10.000000Z", "updated_at": "2019-07-25T21:38:53.000000Z", "closed_at": "2019-07-25T21:38:52.000000Z", "merged_at": "2019-07-25T21:38:52.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 266899374, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/126#pullrequestreview-266899374", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/126", "commit_id": "de2b003cb644c1964f60b96e9f79172ed1637ec6", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/128", "id": "299908221", "number": 128, "state": "closed", "title": "Send STATE records to stdout with eager flushing", "user": {"login": "airhorns", "id": 158950}, "body": "This is on top of #120 and would supersede it if accepted. This adds less buggy support for `STATE` messages as well as a config option to turn off the new behaviour. \r\n\r\nThis adds support for writing `STATE` messages to stdout for an orchestrator of some sort to persist and feed back into the next invocation of the tap. It's a little trickier than one would hope because the `STATE` message is a checkpoint of sorts for the whole system. If data from before a `STATE` message is lost somehow, and the tap is rerun starting from that state, that data would be permanently lost, so it's important that all records from before a given `STATE` have been saved to the database before that `STATE` is emitted.\r\n\r\nThe Singer spec however does not specify what exactly is in STATE messages, so, they can relate to any or all of the active streams. That means that target-postgres doesn't and can't know which records that it may have buffered in memory are \"covered\" by an incoming STATE record. If target-postgres eagerly emitted the STATE record to stdout, but didn't flush all the records, the system becomes open to inconsistency. If the STATE message were persisted by the outside orchestrator, but then the process crashed later, the buffers in target-postgres process would be lost and data dropped. The implementation prior to this commit suffers from this bug, see #120 for more discussion.\r\n\r\nWe prevent this bug by eagerly flushing all the buffered records whenever a STATE message is encountered. When the orchestrator sees a STATE message, it becomes guaranteed safe to persist it as everything seen from the tap has been committed to the database.\r\n\r\nThe downside of this approach is that it may lead to superfluous flushes of the buffered streams, especially if a tap emits a lot of STATE messages. From my experience with several different taps, they all tend to be written in such a way that they emit STATE messages as a single last step, so I don't think this is too big an issue.\r\n\r\nAn alternative to this approach would be tracking which records were received before a given STATE message, and then only writing the STATE message out to the orchestrator once all those records had been flushed on their regularly scheduled programming. This means STATE messages are \"delayed\" until the records they came after have all been flushed on the schedule they would have been flushed on without STATE messages. target-snowflake implements this here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py , but in my mind, this is significant additional complexity for a performance optimization that is in most circumstances unnecessary. It's arguable that writing STATE messages to stdout as soon as they arrive is actually valuable, so that in the presence of a sometimes-failing tap progress can actually be made by getting STATE persisted as soon as possible, and, while the taps are indeed idempotent, rerunning them isn't always free (in terms of API calls and whatnot). So, I think this simpler solution would be a great starting point, and after some real world usage we could re-evaluate and move to the more complex approach.\r\n", "created_at": "2019-07-22T14:34:28.000000Z", "updated_at": "2019-07-24T17:36:02.000000Z", "closed_at": "2019-07-24T17:36:02.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/124", "id": "286433249", "number": 124, "state": "closed", "title": "Enable Configuration of SSL", "user": {"login": "citruspi", "id": 2125849}, "body": "Enables configuration of SSL when connecting to Postgres with the following (optional) config keys:\r\n\r\n- `postgres_sslmode`\r\n- `postgres_sslcert`\r\n- `postgres_sslkey`\r\n- `postgres_sslrootcert`\r\n- `postgres_sslcrl`", "created_at": "2019-06-08T21:52:56.000000Z", "updated_at": "2019-06-11T15:24:50.000000Z", "closed_at": "2019-06-11T15:24:50.000000Z", "merged_at": "2019-06-11T15:24:50.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/122", "id": "284094823", "number": 122, "state": "closed", "title": "Fix typo disttribution -> distribution", "user": {"login": "bradleyprice", "id": 25420}, "body": "", "created_at": "2019-05-31T15:32:49.000000Z", "updated_at": "2019-06-06T19:21:05.000000Z", "closed_at": "2019-06-06T19:20:54.000000Z", "merged_at": "2019-06-06T19:20:54.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 246766815, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/122#pullrequestreview-246766815", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/122", "commit_id": "c107f6cf9541c3b04ef26a4f6789121ff52e2196", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/118", "id": "283398480", "number": 118, "state": "closed", "title": "Bump: All dependencies to latest", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nTarget Redshift has a minor security vulnerability with `urllib3`. If we're taking the time to tackle this, we might as well bump dependencies as it's a good hygiene type thing.\r\n\r\n## Notes\r\n\r\nPscycoPg2 is proving to be a problem in upgrading. This will be fixed as a separate issue.\r\n\r\n## Suggested Musical Pairing\r\n\r\nEconomist Radio.", "created_at": "2019-05-29T19:24:38.000000Z", "updated_at": "2019-05-30T17:55:06.000000Z", "closed_at": "2019-05-30T17:55:03.000000Z", "merged_at": "2019-05-30T17:55:03.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/116", "id": "280502014", "number": 116, "state": "closed", "title": "Keep up with STATE records and return to stdout", "user": {"login": "bradleyprice", "id": 25420}, "body": "This keeps up with all of the STATE records and returns\r\nthe latest one to stdout.", "created_at": "2019-05-20T18:47:39.000000Z", "updated_at": "2019-05-20T18:48:09.000000Z", "closed_at": "2019-05-20T18:48:09.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/115", "id": "273173948", "number": 115, "state": "closed", "title": "Investigation/date time being treated as object", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/114\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/thehorrors/still-life", "created_at": "2019-04-24T15:04:17.000000Z", "updated_at": "2019-04-29T13:56:44.000000Z", "closed_at": "2019-04-29T13:56:41.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "id": "270715955", "number": 113, "state": "closed", "title": "CHANGELOG: Bug for 0.1.7", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPrep for 0.1.7\r\n\r\n## Suggested Musical Pairing\r\n\r\nDogs chewing", "created_at": "2019-04-16T00:34:32.000000Z", "updated_at": "2019-04-16T17:42:42.000000Z", "closed_at": "2019-04-16T17:42:36.000000Z", "merged_at": "2019-04-16T17:42:36.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 227020828, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/113#pullrequestreview-227020828", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "commit_id": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 227024632, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/113#pullrequestreview-227024632", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "commit_id": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 227026110, "user": {"login": "CStejmar", "id": 8696159}, "body": "Two comments but otherwise good to go from me \ud83d\udc4d", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/113#pullrequestreview-227026110", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "commit_id": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 227020828, "id": 275659566, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTY1OTU2Ng==", "diff_hunk": "@@ -1,5 +1,14 @@\n # Changelog\n \n+## 0.1.7\n+\n+- **BUG FIX:** A bug was identified for de-nesting.\n+  - [ISSUE LINK](https://github.com/datamill-co/target-postgres/issues/109)\n+  - [FAILING TESTS LINK](https://github.com/datamill-co/target-postgres/pull/110)\n+  - [FIX LINK](https://github.com/datamill-co/target-postgres/pull/111)\n+  - Subtables with subtables do not serialize column names correctly", "path": "CHANGELOG.md", "position": null, "original_position": 9, "commit_id": "2f86d68a9c9b027d02cfc05463f75f38a34fe012", "original_commit_id": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "user": {"login": "CStejmar", "id": 8696159}, "body": "\"do not\" -> \"did not\" ?", "created_at": "2019-04-16T07:21:04.000000Z", "updated_at": "2019-04-16T14:18:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/113#discussion_r275659566", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 227024632, "id": 275662879, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTY2Mjg3OQ==", "diff_hunk": "@@ -1,5 +1,14 @@\n # Changelog\n \n+## 0.1.7\n+\n+- **BUG FIX:** A bug was identified for de-nesting.\n+  - [ISSUE LINK](https://github.com/datamill-co/target-postgres/issues/109)\n+  - [FAILING TESTS LINK](https://github.com/datamill-co/target-postgres/pull/110)\n+  - [FIX LINK](https://github.com/datamill-co/target-postgres/pull/111)\n+  - Subtables with subtables do not serialize column names correctly\n+    - The column names ended up having the _table names_ (paths) prepended on them\n+", "path": "CHANGELOG.md", "position": 20, "original_position": 11, "commit_id": "2f86d68a9c9b027d02cfc05463f75f38a34fe012", "original_commit_id": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "user": {"login": "CStejmar", "id": 8696159}, "body": "Here you could add something like this (since it was also part of the problem):\r\n`- Table schemas and records did not match which led to data not being ingested into database`", "created_at": "2019-04-16T07:30:41.000000Z", "updated_at": "2019-04-16T14:18:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/113#discussion_r275662879", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/113", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/111", "id": "267803134", "number": 111, "state": "closed", "title": "[bugfix] Fix for issue #109", "user": {"login": "CStejmar", "id": 8696159}, "body": "# Fix for issue #109 \r\n\r\nThe table_schemas and the table_records did not match for more complex and nested schemas. This is now fixed and they match. All nested data that I had trouble with before now enters the database as expected. One question remains: Is this the way we want to organize/structure the tables and naming of them? I guess we could change the records denesting instead to match the schema we had before, that should also work and that will give us a slightly different structure/naming of tables and objects.<br/>\r\nBelow you find an example of how the tables for schema and record mismatched before and how they now match for a simple example using data from the `CATS_SCHEMA` in target-postgres. Look for the `vaccination_type` especially.\r\n\r\n### Before:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 09:00:15.4599+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\n\r\n### After:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('vaccination_type', 'shot'): {'type': ['null', 'string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 12:05:11.2344+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\nIn the database for this example it now looks like this:\r\n```\r\ndb=# \\d\r\n                     List of relations\r\n Schema |             Name              | Type  |  Owner   \r\n--------+-------------------------------+-------+----------\r\n public | cats                          | table | postgres\r\n public | cats__adoption__immunizations | table | postgres\r\n(2 rows)\r\n\r\ndb=# \r\ndb=# \r\ndb=# \\d cats__adoption__immunizations \r\n                    Table \"public.cats__adoption__immunizations\"\r\n         Column         |           Type           | Collation | Nullable | Default \r\n------------------------+--------------------------+-----------+----------+---------\r\n type                   | text                     |           | not null | \r\n date_administered      | timestamp with time zone |           | not null | \r\n vaccination_type__shot | text                     |           |          | \r\n _sdc_source_key_id     | bigint                   |           | not null | \r\n _sdc_sequence          | bigint                   |           |          | \r\n _sdc_level_0_id        | bigint                   |           | not null | \r\n\r\ndb=# select * from cats__adoption__immunizations\r\ndb-# ;\r\n      type       |   date_administered    | vaccination_type__shot | _sdc_source_key_id | _sdc_sequence | _sdc_level_0_id \r\n-----------------+------------------------+------------------------+--------------------+---------------+-----------------\r\n Rabies          | 2537-09-12 15:34:00+02 | Yes                    |                  1 |    1554384634 |               0\r\n Panleukopenia   | 2889-03-01 18:18:00+01 | No                     |                  1 |    1554384634 |               1\r\n Feline Leukemia | 2599-08-08 09:47:00+02 | No                     |                  1 |    1554384634 |               2\r\n Feline Leukemia | 2902-04-14 03:34:00+02 | No                     |                  1 |    1554384634 |               3\r\n(4 rows)\r\n```\r\nAs you can see we now have data in the field `vaccination_type__shot` which didn't work before.", "created_at": "2019-04-05T12:24:41.000000Z", "updated_at": "2019-04-15T18:45:07.000000Z", "closed_at": "2019-04-15T18:45:06.000000Z", "merged_at": "2019-04-15T18:45:06.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 223381088, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@CStejmar we _definitely_ want this over changing the records. The way you have this implemented here is great. Nice job tracking down the problem! I think we should merge this, and then rebase my [tests fork](https://github.com/datamill-co/target-postgres/pull/110) on master and merge is as well. The tests which are therein are beneficial since this change:\r\n\r\na) doesn't break any tests \ud83d\ude2c \r\nb) doesn't _fix_ and tests\r\n\r\n@awm33 I think this _fixes_ current broken schemas etc. There will be a problem with things where tables which have this problem will still have the busted column remaining. I'm not sure whether trying to create a migration for this is _worth_ it. Thoughts?\r\n\r\n(@CStejmar I'd approve but I'd like to sus out the current implications of the bug with @awm33 here first so we understand what's going to change etc. and whether we need to \"fix\" this for current schemas)", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#pullrequestreview-223381088", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/111", "commit_id": "4a75ecb59b1041dda8dfbf21784b16d247fa73cb", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 226813017, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@CStejmar this is \ud83d\udc4d from me. I also don't think that this will break/mess up any current usages of Target Postgres. Anyone who is using this now, who doesn't _already_ have a problem, is someone who has nullable fields in their schema. Due to this, when we replicate, create new columns, and populate those, we'll have null values to populate the broken columns.\r\n\r\n@awm33 if this gets a \ud83d\udc4d from you, I can merge and get Target Redshift etc. deployed.", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#pullrequestreview-226813017", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/111", "commit_id": "3b865c09e0abe7ffacf122b574676346ad252f14", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 226815179, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/111#pullrequestreview-226815179", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/111", "commit_id": "3b865c09e0abe7ffacf122b574676346ad252f14", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "id": "267562626", "number": 110, "state": "closed", "title": "FIX: Nested Records of objects of objects.", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/109\r\n\r\nThis PR exists to lay down test cases which our denesting _should_ handle but currently doesn't.\r\n\r\n## Suggested Musical Pairing\r\n\r\nSpringtime in Milwaukee.", "created_at": "2019-04-04T18:28:10.000000Z", "updated_at": "2019-04-12T07:09:58.000000Z", "closed_at": "2019-04-11T18:24:18.000000Z", "merged_at": "2019-04-11T18:24:18.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224362245, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224362245", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224367371, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224367371", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224368696, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224368696", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224371607, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224371607", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224372237, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224372237", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224372975, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224372975", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224373708, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224373708", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224374462, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224374462", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224375732, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224375732", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224382321, "user": {"login": "CStejmar", "id": 8696159}, "body": "With some of the changes I proposed in comments I get this to run and pass all tests with my fix in #111. If you fix those that are crucial we could merge this. I'll post my version of the test function below that I got it working with and you can check if I made any mistakes or errors. Great work with setting this test up so quickly @AlexanderMann! To me it seems to cover all complex nesting cases \ud83d\udc4d. I tried it on master as well and there it failed with (as expected):\r\n```\r\n>               assert {'type': ['integer']} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\r\nE               KeyError: ('c', 'd')\r\n\r\ntests/test_denest.py:245: KeyError\r\n------------------------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------------------------\r\ndenested: [{'streamed_schema': {'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': [], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {}}}, 'records': [{}, {}, {}, {}, {}]}, {'streamed_schema': {'type': 'TABLE_SCHEMA', 'path': ('a', 'b', 'c', 'e'), 'level': 1, 'key_properties': [], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('f',): {'type': ['string']}, ('g',): {'type': ['boolean']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}, ('_sdc_level_1_id',): {'type': ['integer']}}}}, 'records': []}, {'streamed_schema': {'type': 'TABLE_SCHEMA', 'path': ('a', 'b'), 'level': 0, 'key_properties': [], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('a', 'b', 'c', 'd'): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}, 'records': [{('c', 'd'): ('integer', 1)}, {('c', 'd'): ('integer', 12)}, {('c', 'd'): ('integer', 123)}, {('c', 'd'): ('integer', 1234)}, {('c', 'd'): ('integer', 12345)}, {('c', 'd'): ('integer', 123456)}, {}]}]\r\ntable batch properties:  {('a', 'b', 'c', 'd'): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}\r\n=================================================================================== 1 failed, 72 passed in 54.83 seconds ===================================================================================\r\n```\r\n\r\n### Modified test function\r\n```python\r\ndef test__records__nested():\r\n    denested = denest.to_table_batches({\r\n        \"properties\": {\r\n            \"a\": {\"type\": \"object\",\r\n                  \"properties\": {\r\n                      \"b\": {\r\n                          \"type\": \"array\",\r\n                          \"items\": {\r\n                              \"type\": \"object\",\r\n                              \"properties\": {\r\n                                  \"c\": {\r\n                                      \"type\": \"object\",\r\n                                      \"properties\": {\r\n                                          \"d\": {\"type\": \"integer\"},\r\n                                          \"e\": {\"type\": \"array\",\r\n                                                \"items\": {\"type\": \"object\",\r\n                                                          \"properties\": {\r\n                                                              \"f\": {\"type\": \"string\"},\r\n                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\r\n        [],\r\n        [{\"a\": {\"b\": []}},\r\n         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\r\n         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\r\n                      {\"c\": {\"d\": 123}}]}},\r\n         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\r\n                      {\"c\": {\"d\": 12345}},\r\n                      {\"c\": {\"d\": 123456}}]}},\r\n         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\r\n                                    \"g\": True},\r\n                                   {\"f\": \"goodbye\",\r\n                                    \"g\": True}]}}]}}])\r\n\r\n    print('denested:', denested)\r\n\r\n    assert 3 == len(denested)\r\n\r\n    root_table_checked = False\r\n    nested_table_checked = False\r\n    nested_nested_table_checked = False\r\n\r\n    for table_batch in denested:\r\n        if tuple() == table_batch['streamed_schema']['path']:\r\n            root_table_checked = True\r\n\r\n            assert {} == table_batch['streamed_schema']['schema']['properties']\r\n\r\n            assert 5 == len(table_batch['records'])\r\n\r\n            for record in table_batch['records']:\r\n                assert {} == record\r\n\r\n    for table_batch in denested:\r\n        if ('a', 'b') == table_batch['streamed_schema']['path']:\r\n            nested_table_checked = True\r\n\r\n            assert {'type': ['integer']} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\r\n\r\n            assert 7 == len(table_batch['records'])\r\n\r\n            for record in table_batch['records']:\r\n                # Don't try to access key \"('c', 'd')\" if record is empty\r\n                if record == {}:\r\n                    continue\r\n                assert 'integer' == record[('c', 'd')][0]\r\n                assert int == type(record[('c', 'd')][1])\r\n\r\n    for table_batch in denested:\r\n        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\r\n            nested_nested_table_checked = True\r\n\r\n            assert {'type': ['string']} == table_batch['streamed_schema']['schema']['properties'][('f',)]\r\n            assert {'type': ['boolean']} == table_batch['streamed_schema']['schema']['properties'][('g',)]\r\n\r\n            assert 2 == len(table_batch['records'])\r\n\r\n            for record in table_batch['records']:\r\n                assert 'string' == record[('f',)][0]\r\n                assert str == type(record[('f',)][1])\r\n\r\n                assert 'boolean' == record[('g',)][0]\r\n                assert bool == type(record[('g',)][1])\r\n\r\n    assert root_table_checked\r\n    assert nested_table_checked\r\n    assert nested_nested_table_checked\r\n\r\n    for table_batch in denested:\r\n        assert [] == errors(table_batch)\r\n\r\n    print('PASSED')\r\n    print()\r\n```", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224382321", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224981882, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224981882", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224985168, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224985168", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224986064, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224986064", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 224986984, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-224986984", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225471527, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225471527", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225472477, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225472477", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225473296, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225473296", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225473619, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225473619", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225473673, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225473673", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225473757, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225473757", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225475508, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225475508", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225481546, "user": {"login": "CStejmar", "id": 8696159}, "body": "Fix the problem in `_get_table_batch_with_path` that I commented on and we are good to go! I like this refactoring \ud83d\udc4d. I will approve! All tests pass with my changes from PR #111 and fails on current master \ud83d\udc4d .\r\n\r\nHere is what is failing without my denesting fix:\r\n```\r\n================================================================================================= FAILURES =================================================================================================\r\n_________________________________________________________________________________ test__records__nested__child_table__a_b __________________________________________________________________________________\r\n\r\n    def test__records__nested__child_table__a_b():\r\n        denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)\r\n        table_batch = _get_table_batch_with_path(denested,\r\n                                                 ('a', 'b'))\r\n    \r\n>       assert {'type': ['integer']} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\r\nE       KeyError: ('c', 'd')\r\n\r\ntests/test_denest.py:255: KeyError\r\n_______________________________________________________________________________ test__records__nested__child_table__a_b_c_e ________________________________________________________________________________\r\n\r\n    def test__records__nested__child_table__a_b_c_e():\r\n        denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)\r\n        table_batch = _get_table_batch_with_path(denested,\r\n                                                 ('a', 'b', 'c', 'e'))\r\n    \r\n        assert {'type': ['string']} == table_batch['streamed_schema']['schema']['properties'][('f',)]\r\n        assert {'type': ['boolean']} == table_batch['streamed_schema']['schema']['properties'][('g',)]\r\n    \r\n>       assert 2 == len(table_batch['records'])\r\nE       assert 2 == 0\r\nE        +  where 0 = len([])\r\n\r\ntests/test_denest.py:275: AssertionError\r\n=================================================================================== 2 failed, 74 passed in 53.54 seconds ===================================================================================\r\n```\r\nwhich is as expected. It passes `test__records__nested__tables()` and `test__records__nested__root_empty()` which is expected as well.", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225481546", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225709874, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225709874", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 225925108, "user": {"login": "CStejmar", "id": 8696159}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#pullrequestreview-225925108", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224362245, "id": 273458954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1ODk1NA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False", "path": "tests/test_denest.py", "position": null, "original_position": 44, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Should we split up the test in three parts like this in the same test? We could place these three in separate test functions or just have one loop through `denested` in one test function in my opinion. What do you think is the way to go here?", "created_at": "2019-04-09T12:12:55.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273458954", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224367371, "id": 273463143, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2MzE0Mw==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])", "path": "tests/test_denest.py", "position": null, "original_position": 52, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "This is not really related to this PR:\r\nWhen I was running the tests and looking at the printed denested data I started thinking about this line. Why is there empty dicts ({}) added to the records field in the `_denest_record` function? Even if the record doesn't contain any items we still add an empty dict. Is that desired?\r\n\r\nWe could change this with a simple check in `_denest_record` when appending denested records:\r\n```python\r\nif denested_record != {}:\r\n        records_map[table_path].append(denested_record)\r\n```\r\nIf we want to change this we should do it in another PR. Also, this change makes some length asserts fail and that needs to be addressed as well in that case.", "created_at": "2019-04-09T12:24:05.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273463143", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224368696, "id": 273464214, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2NDIxNA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]", "path": "tests/test_denest.py", "position": null, "original_position": 61, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Needs to be `assert {'type': ['integer']} == ...` to match result from `table_batch`", "created_at": "2019-04-09T12:26:53.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273464214", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224371607, "id": 273466457, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2NjQ1Nw==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]", "path": "tests/test_denest.py", "position": null, "original_position": 66, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Above this line I needed to add:\r\n```python\r\nif record == {}:\r\n    continue\r\n```\r\ndue to one empty dict. Accessing key `('c', 'd')` will otherwise fail.", "created_at": "2019-04-09T12:32:49.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273466457", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224372237, "id": 273466955, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2Njk1NQ==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]", "path": "tests/test_denest.py", "position": null, "original_position": 73, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "'string' -> ['string']", "created_at": "2019-04-09T12:34:09.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273466955", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224372975, "id": 273467507, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2NzUwNw==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]", "path": "tests/test_denest.py", "position": null, "original_position": 73, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Same goes for line under but instead: 'boolean' -> ['boolean']", "created_at": "2019-04-09T12:35:42.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273467507", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 273466955, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224373708, "id": 273468087, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2ODA4Nw==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]", "path": "tests/test_denest.py", "position": null, "original_position": 80, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "I would change this to:\r\n```python\r\nfor record in table_batch['records']:\r\n    assert 'string' == record[('f',)][0]\r\n    assert str == type(record[('f',)][1])\r\n\r\n    assert 'boolean' == record[('g',)][0]\r\n    assert bool == type(record[('g',)][1])\r\n```", "created_at": "2019-04-09T12:37:17.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273468087", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224374462, "id": 273468729, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2ODcyOQ==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]", "path": "tests/test_denest.py", "position": null, "original_position": 80, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Just to have it consistent with what we have in `nested_table_checked` loop:\r\n```python\r\nassert 'integer' == record[('c', 'd')][0]\r\nassert int == type(record[('c', 'd')][1])\r\n```", "created_at": "2019-04-09T12:38:48.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273468729", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 273468087, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224375732, "id": 273469777, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ2OTc3Nw==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]\n+\n+    assert root_table_checked\n+    assert nested_table_checked\n+    assert nested_nested_table_checked\n+\n+    for table_batch in denested:\n+        assert [] == errors(table_batch)", "path": "tests/test_denest.py", "position": null, "original_position": 87, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "At the end maybe we should add:\r\n```python\r\nprint('PASSED')\r\nprint()\r\n```\r\nI have seen this in other test functions so to keep the consistency we should add that as well.", "created_at": "2019-04-09T12:41:21.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273469777", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224981882, "id": 273968785, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzk2ODc4NQ==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False", "path": "tests/test_denest.py", "position": null, "original_position": 44, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "I like that idea. I'll refactor for that. My main concern originally with going that route, was that there'll be a modicum of \"helper\" code around these tests which will be obfuscating the actual test. Additionally, I was worried that previously we did _really_ precise tests which looked for specific things and hence had specific schemas. The bug we're experiencing is because we didn't have a gnarlier schema and records to pick apart etc. As such, I'm going to plan on the three tests sharing the same schema and records.\r\n\r\nThat all sound right to you?", "created_at": "2019-04-10T13:48:55.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273968785", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "COLLABORATOR", "in_reply_to_id": 273458954, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224985168, "id": 273971800, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzk3MTgwMA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])", "path": "tests/test_denest.py", "position": null, "original_position": 52, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Yeah, it's necessary. So if you get rid of that, then there's no way for our code to create a key for the denested values to relate _back_ to.\r\n\r\nie, think of if you had a schema like this:\r\n\r\n```json\r\n{\"properties\":\r\n  {\"a\": {\"items\": [...]},\r\n   \"b\": {\"items\": [...]}}}\r\n```\r\n\r\nSo `a` and `b` _relate_ to each other in that they're on the same parent right? But when we denest, this'll turn into:\r\n\r\n```\r\nroot: {}\r\nroot__a: {...}\r\nroot__b: {...}\r\n```\r\n\r\nSince we generate uuids for tables which don't have `key_properties` set, we can then relate the child tables and records back to each other in postgres.\r\n\r\nIf we get rid of the record, it indicates to everything else that there's just nothing there...\r\n\r\n(now, mind you, the code _above_ here where we're setting up the `Singer Stream` etc., actually injects a `key_properties` and uuids etc. so you can't ever have this case of empty tables. There'll always be the StitchData `_sdc` columns/fields/properties)", "created_at": "2019-04-10T13:54:03.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273971800", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "COLLABORATOR", "in_reply_to_id": 273463143, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224986064, "id": 273972495, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzk3MjQ5NQ==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]", "path": "tests/test_denest.py", "position": null, "original_position": 80, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Good call", "created_at": "2019-04-10T13:55:21.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273972495", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "COLLABORATOR", "in_reply_to_id": 273468087, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 224986984, "id": 273973260, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzk3MzI2MA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]\n+\n+    assert root_table_checked\n+    assert nested_table_checked\n+    assert nested_nested_table_checked\n+\n+    for table_batch in denested:\n+        assert [] == errors(table_batch)", "path": "tests/test_denest.py", "position": null, "original_position": 87, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Ah, I'd actually vote to remove it from the other tests. It's a relic from when we didn't have Pytest setup to be as helpful", "created_at": "2019-04-10T13:56:45.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r273973260", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "COLLABORATOR", "in_reply_to_id": 273469777, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225471527, "id": 274373500, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3MzUwMA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False", "path": "tests/test_denest.py", "position": null, "original_position": 44, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Sounds perfect!", "created_at": "2019-04-11T11:16:19.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274373500", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 273458954, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225472477, "id": 274374290, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NDI5MA==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])", "path": "tests/test_denest.py", "position": null, "original_position": 52, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Ah I see, thanks for the explanation! Makes perfect sense \ud83d\udc4d ", "created_at": "2019-04-11T11:18:35.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274374290", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 273463143, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225473296, "id": 274374936, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NDkzNg==", "diff_hunk": "@@ -184,3 +184,87 @@ def test__schema__nested_arrays_add_tables():\n \n         print('PASSED')\n         print()\n+\n+\n+def test__records__nested():\n+    denested = denest.to_table_batches({\n+        \"properties\": {\n+            \"a\": {\"type\": \"object\",\n+                  \"properties\": {\n+                      \"b\": {\n+                          \"type\": \"array\",\n+                          \"items\": {\n+                              \"type\": \"object\",\n+                              \"properties\": {\n+                                  \"c\": {\n+                                      \"type\": \"object\",\n+                                      \"properties\": {\n+                                          \"d\": {\"type\": \"integer\"},\n+                                          \"e\": {\"type\": \"array\",\n+                                                \"items\": {\"type\": \"object\",\n+                                                          \"properties\": {\n+                                                              \"f\": {\"type\": \"string\"},\n+                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n+        [],\n+        [{\"a\": {\"b\": []}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                      {\"c\": {\"d\": 123}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                      {\"c\": {\"d\": 12345}},\n+                      {\"c\": {\"d\": 123456}}]}},\n+         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                    \"g\": True},\n+                                   {\"f\": \"goodbye\",\n+                                    \"g\": True}]}}]}}])\n+\n+    print('denested:', denested)\n+\n+    assert 3 == len(denested)\n+\n+    root_table_checked = False\n+    nested_table_checked = False\n+    nested_nested_table_checked = False\n+\n+    for table_batch in denested:\n+        if tuple() == table_batch['streamed_schema']['path']:\n+            root_table_checked = True\n+\n+            assert {} == table_batch['streamed_schema']['schema']['properties']\n+\n+            assert 5 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert {} == record\n+\n+    for table_batch in denested:\n+        if ('a', 'b') == table_batch['streamed_schema']['path']:\n+            nested_table_checked = True\n+\n+            assert {'type': 'integer'} == table_batch['streamed_schema']['schema']['properties'][('c', 'd')]\n+\n+            assert 7 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'integer' == record[('c', 'd')][0]\n+                assert int == type(record[('c', 'd')][1])\n+\n+    for table_batch in denested:\n+        if ('a', 'b', 'c', 'e') == table_batch['streamed_schema']['path']:\n+            nested_nested_table_checked = True\n+\n+            assert {'type': 'string'} == table_batch['streamed_schema']['schema']['properties'][('f',)]\n+            assert {'type': 'boolean'} == table_batch['streamed_schema']['schema']['properties'][('g',)]\n+\n+            assert 2 == len(table_batch['records'])\n+\n+            for record in table_batch['records']:\n+                assert 'string' == record[('f',)][1]\n+                assert record[('g',)][1]\n+\n+    assert root_table_checked\n+    assert nested_table_checked\n+    assert nested_nested_table_checked\n+\n+    for table_batch in denested:\n+        assert [] == errors(table_batch)", "path": "tests/test_denest.py", "position": null, "original_position": 87, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "user": {"login": "CStejmar", "id": 8696159}, "body": "Ok great! Then we remove it :)", "created_at": "2019-04-11T11:20:39.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274374936", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 273469777, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225473619, "id": 274375196, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NTE5Ng==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {", "path": "tests/test_denest.py", "position": 17, "original_position": 49, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "CStejmar", "id": 8696159}, "body": "\ud83d\udc4d ", "created_at": "2019-04-11T11:21:29.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274375196", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225473673, "id": 274375236, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NTIzNg==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {\n+    \"properties\": {\n+        \"a\": {\"type\": \"object\",\n+              \"properties\": {\n+                  \"b\": {\n+                      \"type\": \"array\",\n+                      \"items\": {\n+                          \"type\": \"object\",\n+                          \"properties\": {\n+                              \"c\": {\n+                                  \"type\": \"object\",\n+                                  \"properties\": {\n+                                      \"d\": {\"type\": \"integer\"},\n+                                      \"e\": {\"type\": \"array\",\n+                                            \"items\": {\"type\": \"object\",\n+                                                      \"properties\": {\n+                                                          \"f\": {\"type\": \"string\"},\n+                                                          \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}}\n+\n+NESTED_RECORDS = [{\"a\": {\"b\": []}},", "path": "tests/test_denest.py", "position": 36, "original_position": 68, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "CStejmar", "id": 8696159}, "body": "\ud83d\udc4d ", "created_at": "2019-04-11T11:21:37.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274375236", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225473757, "id": 274375294, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NTI5NA==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {\n+    \"properties\": {\n+        \"a\": {\"type\": \"object\",\n+              \"properties\": {\n+                  \"b\": {\n+                      \"type\": \"array\",\n+                      \"items\": {\n+                          \"type\": \"object\",\n+                          \"properties\": {\n+                              \"c\": {\n+                                  \"type\": \"object\",\n+                                  \"properties\": {\n+                                      \"d\": {\"type\": \"integer\"},\n+                                      \"e\": {\"type\": \"array\",\n+                                            \"items\": {\"type\": \"object\",\n+                                                      \"properties\": {\n+                                                          \"f\": {\"type\": \"string\"},\n+                                                          \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}}\n+\n+NESTED_RECORDS = [{\"a\": {\"b\": []}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                               {\"c\": {\"d\": 123}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                               {\"c\": {\"d\": 12345}},\n+                               {\"c\": {\"d\": 123456}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                             \"g\": True},\n+                                            {\"f\": \"goodbye\",\n+                                             \"g\": True}]}}]}}]\n+\n+\n+def test__records__nested__tables():\n+    denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)", "path": "tests/test_denest.py", "position": 50, "original_position": 82, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "CStejmar", "id": 8696159}, "body": "\ud83d\udc4d ", "created_at": "2019-04-11T11:21:52.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274375294", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225475508, "id": 274376645, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDM3NjY0NQ==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {\n+    \"properties\": {\n+        \"a\": {\"type\": \"object\",\n+              \"properties\": {\n+                  \"b\": {\n+                      \"type\": \"array\",\n+                      \"items\": {\n+                          \"type\": \"object\",\n+                          \"properties\": {\n+                              \"c\": {\n+                                  \"type\": \"object\",\n+                                  \"properties\": {\n+                                      \"d\": {\"type\": \"integer\"},\n+                                      \"e\": {\"type\": \"array\",\n+                                            \"items\": {\"type\": \"object\",\n+                                                      \"properties\": {\n+                                                          \"f\": {\"type\": \"string\"},\n+                                                          \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}}\n+\n+NESTED_RECORDS = [{\"a\": {\"b\": []}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                               {\"c\": {\"d\": 123}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                               {\"c\": {\"d\": 12345}},\n+                               {\"c\": {\"d\": 123456}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                             \"g\": True},\n+                                            {\"f\": \"goodbye\",\n+                                             \"g\": True}]}}]}}]\n+\n+\n+def test__records__nested__tables():\n+    denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)\n \n     print('denested:', denested)\n \n     assert 3 == len(denested)\n \n-    root_table_checked = False\n-    nested_table_checked = False\n-    nested_nested_table_checked = False\n-\n     for table_batch in denested:\n-        if tuple() == table_batch['streamed_schema']['path']:\n-            root_table_checked = True\n+        assert table_batch['streamed_schema']['path'] in \\\n+               {tuple(),\n+                ('a', 'b'),\n+                ('a', 'b', 'c', 'e')}\n+        assert [] == errors(table_batch)\n \n-            assert {} == table_batch['streamed_schema']['schema']['properties']\n \n-            assert 5 == len(table_batch['records'])\n+def _get_table_batch_with_path(table_batches, path):\n+    for table_batch in table_batches:\n+        if path == table_batch['streamed_schema']['path']:\n+            return path", "path": "tests/test_denest.py", "position": null, "original_position": 107, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "CStejmar", "id": 8696159}, "body": "Here we need to return `table_batch` instead of `path` otherwise we fail the tests on trying to access 'schema' etc. I know you meant do that since the function name is `_get_table_batch_with_path` :).", "created_at": "2019-04-11T11:26:18.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274376645", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225709874, "id": 274571681, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDU3MTY4MQ==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {\n+    \"properties\": {\n+        \"a\": {\"type\": \"object\",\n+              \"properties\": {\n+                  \"b\": {\n+                      \"type\": \"array\",\n+                      \"items\": {\n+                          \"type\": \"object\",\n+                          \"properties\": {\n+                              \"c\": {\n+                                  \"type\": \"object\",\n+                                  \"properties\": {\n+                                      \"d\": {\"type\": \"integer\"},\n+                                      \"e\": {\"type\": \"array\",\n+                                            \"items\": {\"type\": \"object\",\n+                                                      \"properties\": {\n+                                                          \"f\": {\"type\": \"string\"},\n+                                                          \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}}\n+\n+NESTED_RECORDS = [{\"a\": {\"b\": []}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                               {\"c\": {\"d\": 123}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                               {\"c\": {\"d\": 12345}},\n+                               {\"c\": {\"d\": 123456}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                             \"g\": True},\n+                                            {\"f\": \"goodbye\",\n+                                             \"g\": True}]}}]}}]\n+\n+\n+def test__records__nested__tables():\n+    denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)\n \n     print('denested:', denested)\n \n     assert 3 == len(denested)\n \n-    root_table_checked = False\n-    nested_table_checked = False\n-    nested_nested_table_checked = False\n-\n     for table_batch in denested:\n-        if tuple() == table_batch['streamed_schema']['path']:\n-            root_table_checked = True\n+        assert table_batch['streamed_schema']['path'] in \\\n+               {tuple(),\n+                ('a', 'b'),\n+                ('a', 'b', 'c', 'e')}\n+        assert [] == errors(table_batch)\n \n-            assert {} == table_batch['streamed_schema']['schema']['properties']\n \n-            assert 5 == len(table_batch['records'])\n+def _get_table_batch_with_path(table_batches, path):\n+    for table_batch in table_batches:\n+        if path == table_batch['streamed_schema']['path']:\n+            return path", "path": "tests/test_denest.py", "position": null, "original_position": 107, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "\ud83e\udd26\u200d\u2642\ufe0f this has been a hilariously tough thing for me to do as I don't actually _have_ the working code etc.", "created_at": "2019-04-11T18:22:57.000000Z", "updated_at": "2019-04-11T18:23:57.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274571681", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "COLLABORATOR", "in_reply_to_id": 274376645, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 225925108, "id": 274783186, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDc4MzE4Ng==", "diff_hunk": "@@ -182,89 +179,104 @@ def test__schema__nested_arrays_add_tables():\n         ## Assert that we looked for every table path\n         assert tables_checked == len(denested)\n \n-        print('PASSED')\n-        print()\n-\n \n-def test__records__nested():\n-    denested = denest.to_table_batches({\n-        \"properties\": {\n-            \"a\": {\"type\": \"object\",\n-                  \"properties\": {\n-                      \"b\": {\n-                          \"type\": \"array\",\n-                          \"items\": {\n-                              \"type\": \"object\",\n-                              \"properties\": {\n-                                  \"c\": {\n-                                      \"type\": \"object\",\n-                                      \"properties\": {\n-                                          \"d\": {\"type\": \"integer\"},\n-                                          \"e\": {\"type\": \"array\",\n-                                                \"items\": {\"type\": \"object\",\n-                                                          \"properties\": {\n-                                                              \"f\": {\"type\": \"string\"},\n-                                                              \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}},\n-        [],\n-        [{\"a\": {\"b\": []}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n-                      {\"c\": {\"d\": 123}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n-                      {\"c\": {\"d\": 12345}},\n-                      {\"c\": {\"d\": 123456}}]}},\n-         {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n-                                    \"g\": True},\n-                                   {\"f\": \"goodbye\",\n-                                    \"g\": True}]}}]}}])\n+NESTED_SCHEMA = {\n+    \"properties\": {\n+        \"a\": {\"type\": \"object\",\n+              \"properties\": {\n+                  \"b\": {\n+                      \"type\": \"array\",\n+                      \"items\": {\n+                          \"type\": \"object\",\n+                          \"properties\": {\n+                              \"c\": {\n+                                  \"type\": \"object\",\n+                                  \"properties\": {\n+                                      \"d\": {\"type\": \"integer\"},\n+                                      \"e\": {\"type\": \"array\",\n+                                            \"items\": {\"type\": \"object\",\n+                                                      \"properties\": {\n+                                                          \"f\": {\"type\": \"string\"},\n+                                                          \"g\": {\"type\": \"boolean\"}}}}}}}}}}}}}\n+\n+NESTED_RECORDS = [{\"a\": {\"b\": []}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 12}},\n+                               {\"c\": {\"d\": 123}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"d\": 1234}},\n+                               {\"c\": {\"d\": 12345}},\n+                               {\"c\": {\"d\": 123456}}]}},\n+                  {\"a\": {\"b\": [{\"c\": {\"e\": [{\"f\": \"hello\",\n+                                             \"g\": True},\n+                                            {\"f\": \"goodbye\",\n+                                             \"g\": True}]}}]}}]\n+\n+\n+def test__records__nested__tables():\n+    denested = denest.to_table_batches(NESTED_SCHEMA, [], NESTED_RECORDS)\n \n     print('denested:', denested)\n \n     assert 3 == len(denested)\n \n-    root_table_checked = False\n-    nested_table_checked = False\n-    nested_nested_table_checked = False\n-\n     for table_batch in denested:\n-        if tuple() == table_batch['streamed_schema']['path']:\n-            root_table_checked = True\n+        assert table_batch['streamed_schema']['path'] in \\\n+               {tuple(),\n+                ('a', 'b'),\n+                ('a', 'b', 'c', 'e')}\n+        assert [] == errors(table_batch)\n \n-            assert {} == table_batch['streamed_schema']['schema']['properties']\n \n-            assert 5 == len(table_batch['records'])\n+def _get_table_batch_with_path(table_batches, path):\n+    for table_batch in table_batches:\n+        if path == table_batch['streamed_schema']['path']:\n+            return path", "path": "tests/test_denest.py", "position": null, "original_position": 107, "commit_id": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "original_commit_id": "c1e30f02aed6942b8dfb95c761111333370d458e", "user": {"login": "CStejmar", "id": 8696159}, "body": "Yeah I can imagine that \ud83d\ude42. Anyway, great work! \ud83d\ude80", "created_at": "2019-04-12T07:09:58.000000Z", "updated_at": "2019-04-12T07:09:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/110#discussion_r274783186", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/110", "author_association": "NONE", "in_reply_to_id": 274376645, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/112", "id": "267822715", "number": 112, "state": "closed", "title": "[bugfix] Fix for issue #109 - Nested records fix", "user": {"login": "CStejmar", "id": 8696159}, "body": "# Fix for issue #109 \r\n\r\nFixed by altering the record denesting.\r\n\r\nThe table_schemas and the table_records did not match for more complex and nested schemas. This is now fixed and they match. All nested data that I had trouble with before now enters the database as expected. One question remains: Is this the way we want to organize/structure the tables and naming of them? We could change the schemas denesting instead to match the record we had before, that will also work and that will give us a slightly different structure/naming of tables and objects.<br/>\r\nBelow you find an example of how the tables for schema and record mismatched before and how they now match for a simple example using data from the `CATS_SCHEMA` in target-postgres. Look for the `vaccination_type` especially.\r\n\r\n### Before:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 09:00:15.4599+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\n\r\n### After:\r\n```\r\n___table_schemas:  [{'type': 'TABLE_SCHEMA', 'path': (), 'level': None, 'key_properties': ['id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('id',): {'type': ['integer']}, ('name',): {'type': ['string']}, ('paw_size',): {'type': ['integer'], 'default': 314159}, ('paw_colour',): {'type': ['string'], 'default': ''}, ('flea_check_complete',): {'type': ['boolean'], 'default': False}, ('pattern',): {'type': ['null', 'string']}, ('age',): {'type': ['null', 'integer']}, ('adoption', 'adopted_on'): {'type': ['null', 'string'], 'format': 'date-time'}, ('adoption', 'was_foster'): {'type': ['boolean', 'null']}, ('_sdc_received_at',): {'type': ['null', 'string'], 'format': 'date-time'}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_table_version',): {'type': ['null', 'integer']}, ('_sdc_batched_at',): {'type': ['null', 'string'], 'format': 'date-time'}}}}, {'type': 'TABLE_SCHEMA', 'path': ('adoption', 'immunizations'), 'level': 0, 'key_properties': ['_sdc_source_key_id'], 'mappings': [], 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {('type',): {'type': ['string']}, ('date_administered',): {'type': ['string'], 'format': 'date-time'}, ('adoption', 'immunizations', 'vaccination_type', 'shot'): {'type': ['null', 'string']}, ('_sdc_source_key_id',): {'type': ['integer']}, ('_sdc_sequence',): {'type': ['null', 'integer']}, ('_sdc_level_0_id',): {'type': ['integer']}}}}]\r\n___table_records:  {('adoption', 'immunizations'): [{('type',): ('string', 'Rabies'), ('date_administered',): ('string', '2537-09-12T13:34:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'Yes'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 0)}, {('type',): ('string', 'Panleukopenia'), ('date_administered',): ('string', '2889-03-01T17:18:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 1)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2599-08-08T07:47:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 2)}, {('type',): ('string', 'Feline Leukemia'), ('date_administered',): ('string', '2902-04-14T01:34:00'), ('adoption', 'immunizations', 'vaccination_type', 'shot'): ('string', 'No'), ('_sdc_source_key_id',): ('integer', 1), ('_sdc_sequence',): ('integer', 1554384634), ('_sdc_level_0_id',): ('integer', 3)}], (): [{('id',): ('integer', 1), ('name',): ('string', 'Morgan'), ('pattern',): ('string', 'Tortoiseshell'), ('age',): ('integer', 14), ('adoption', 'adopted_on'): ('string', '2633-01-02T00:11:00'), ('adoption', 'was_foster'): ('boolean', False), ('_sdc_batched_at',): ('string', '2019-04-05 13:19:50.0198+00:00'), ('_sdc_sequence',): ('integer', 1554384634)}]}\r\n```\r\nIn the database for this example it now looks like this:\r\n```\r\ndb=# \\d\r\n                     List of relations\r\n Schema |             Name              | Type  |  Owner   \r\n--------+-------------------------------+-------+----------\r\n public | cats                          | table | postgres\r\n public | cats__adoption__immunizations | table | postgres\r\n(2 rows)\r\n\r\ndb=# \\d cats\r\n                               Table \"public.cats\"\r\n        Column        |           Type           | Collation | Nullable | Default \r\n----------------------+--------------------------+-----------+----------+---------\r\n id                   | bigint                   |           | not null | \r\n name                 | text                     |           | not null | \r\n paw_size             | bigint                   |           | not null | \r\n paw_colour           | text                     |           | not null | \r\n flea_check_complete  | boolean                  |           | not null | \r\n pattern              | text                     |           |          | \r\n age                  | bigint                   |           |          | \r\n adoption__adopted_on | timestamp with time zone |           |          | \r\n adoption__was_foster | boolean                  |           |          | \r\n _sdc_received_at     | timestamp with time zone |           |          | \r\n _sdc_sequence        | bigint                   |           |          | \r\n _sdc_table_version   | bigint                   |           |          | \r\n _sdc_batched_at      | timestamp with time zone |           |          | \r\n\r\ndb=# \\d cats__adoption__immunizations \r\n                                Table \"public.cats__adoption__immunizations\"\r\n                     Column                      |           Type           | Collation | Nullable | Default \r\n-------------------------------------------------+--------------------------+-----------+----------+---------\r\n type                                            | text                     |           | not null | \r\n date_administered                               | timestamp with time zone |           | not null | \r\n adoption__immunizations__vaccination_type__shot | text                     |           |          | \r\n _sdc_source_key_id                              | bigint                   |           | not null | \r\n _sdc_sequence                                   | bigint                   |           |          | \r\n _sdc_level_0_id                                 | bigint                   |           | not null | \r\n\r\ndb=# \r\ndb=# select * from cats__adoption__immunizations;\r\n      type       |   date_administered    | adoption__immunizations__vaccination_type__shot | _sdc_source_key_id | _sdc_sequence | _sdc_level_0_id \r\n-----------------+------------------------+-------------------------------------------------+--------------------+---------------+-----------------\r\n Rabies          | 2537-09-12 15:34:00+02 | Yes                                             |                  1 |    1554384634 |               0\r\n Panleukopenia   | 2889-03-01 18:18:00+01 | No                                              |                  1 |    1554384634 |               1\r\n Feline Leukemia | 2599-08-08 09:47:00+02 | No                                              |                  1 |    1554384634 |               2\r\n Feline Leukemia | 2902-04-14 03:34:00+02 | No                                              |                  1 |    1554384634 |               3\r\n(4 rows)\r\n```\r\nAs you can see we now have data in the field `adoption__immunizations__vaccination_type__shot` which didn't work before.", "created_at": "2019-04-05T13:24:56.000000Z", "updated_at": "2019-04-11T11:14:22.000000Z", "closed_at": "2019-04-08T08:08:07.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 223381654, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "#111 is what we should go with. This makes the working code match the bug, not the bug match the working code.", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/112#pullrequestreview-223381654", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/112", "commit_id": "229305531e858930adf1a498f425a2a739a5cdc5", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/105", "id": "263323597", "number": 105, "state": "closed", "title": "Added collaboration and contributions section", "user": {"login": "gpetepg", "id": 24799706}, "body": "Let me know how that looks.", "created_at": "2019-03-21T17:00:29.000000Z", "updated_at": "2019-04-05T02:21:14.000000Z", "closed_at": "2019-04-05T02:21:14.000000Z", "merged_at": "2019-04-05T02:21:14.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 222520475, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/105#pullrequestreview-222520475", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/105", "commit_id": "fcc884117a2092c877594b3bbca2d3fed899201b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/108", "id": "266370472", "number": 108, "state": "closed", "title": "Feature: init singer.metrics usage", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/75\r\n\r\n## Notes\r\n\r\nWhereas the `tap`s for SQL _know_ which table they are persisting to, our `stream`s are potentially nested. For this reason, we include the following tags:\r\n\r\n- `path`: `tuple` of `string`s representing the denested path to a given table\r\n- `table`: optional `string` representing the remote table we are dealing with\r\n- `schema`: `string` representing the remote schema we're dealing with\r\n- `database`: `string` representing the remote database we're dealing with\r\n\r\n## Testing\r\n\r\nOutput provided by the CCI tests:\r\n\r\n```\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.013872385025024414, \"tags\": {\"job_type\": \"upsert_table_schema\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\", \"status\": \"succeeded\"}}\r\nINFO Writing table batch with 18 rows for `('stargazers',)`...\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.011026144027709961, \"tags\": {\"job_type\": \"upsert_table_schema\", \"path\": [\"tmp_c85777c0_12cd_41a0_ad96_089ea9418713\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"tmp_c85777c0_12cd_41a0_ad96_089ea9418713\", \"status\": \"succeeded\"}}\r\nINFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 18, \"tags\": {\"count_type\": \"table_rows_persisted\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\"}}\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.03966832160949707, \"tags\": {\"job_type\": \"table\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"table\": \"stargazers\", \"status\": \"succeeded\"}}\r\nINFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 18, \"tags\": {\"count_type\": \"batch_rows_persisted\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\"}}\r\nINFO METRIC: {\"type\": \"timer\", \"metric\": \"job_duration\", \"value\": 0.041277408599853516, \"tags\": {\"job_type\": \"batch\", \"path\": [\"stargazers\"], \"database\": \"target_postgres_test\", \"schema\": \"public\", \"status\": \"succeeded\"}}\r\n...\r\n```\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/10cc-official/art-for-arts-sake-album?in=drunken-ambassador/sets/interval", "created_at": "2019-04-01T19:24:25.000000Z", "updated_at": "2019-04-04T18:00:50.000000Z", "closed_at": "2019-04-04T18:00:45.000000Z", "merged_at": "2019-04-04T18:00:45.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 222520709, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/108#pullrequestreview-222520709", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/108", "commit_id": "365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/107", "id": "266338952", "number": 107, "state": "closed", "title": "Feature/metrics", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "created_at": "2019-04-01T17:43:51.000000Z", "updated_at": "2019-04-01T17:55:56.000000Z", "closed_at": "2019-04-01T17:55:56.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/106", "id": "264197484", "number": 106, "state": "closed", "title": "Feature/volumes over add for local development", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nRecently reached some understanding of Docker and `VOLUME` vs `ADD`. Since my local memory keeps filling up with random containers, this change seemed useful.\r\n\r\nEffectively, allow Docker Compose to mount the necessary development volumes, instead of adding them to the container themselves...\r\n\r\nThis has made the number of containers I have locally drop asymptotically.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/uffie-official-458383245/papercuts-2", "created_at": "2019-03-25T16:33:23.000000Z", "updated_at": "2019-03-25T17:37:25.000000Z", "closed_at": "2019-03-25T17:37:23.000000Z", "merged_at": "2019-03-25T17:37:23.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 218481546, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/106#pullrequestreview-218481546", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/106", "commit_id": "5b9953afeb50e729d542f773b3ac3ba6963d4a78", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/101", "id": "261276735", "number": 101, "state": "closed", "title": "Housekeeping: Pre release for 0.1.6: bump, changelog", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nReady to cut `0.1.6`\r\n\r\n## Suggested Musical Pairing\r\n\r\nSnow melting.", "created_at": "2019-03-14T17:52:25.000000Z", "updated_at": "2019-03-14T17:53:04.000000Z", "closed_at": "2019-03-14T17:52:33.000000Z", "merged_at": "2019-03-14T17:52:33.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "id": "260161366", "number": 100, "state": "closed", "title": "Fix/hubspot postgres error  unknown column path", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/99\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/mikaeladavis-music/other-lover", "created_at": "2019-03-11T22:42:52.000000Z", "updated_at": "2019-03-14T17:51:44.000000Z", "closed_at": "2019-03-14T17:50:47.000000Z", "merged_at": "2019-03-14T17:50:47.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 213423915, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-213423915", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 213533371, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-213533371", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 213534081, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-213534081", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 213949504, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-213949504", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 213950208, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-213950208", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 214653817, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-214653817", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 214666428, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#pullrequestreview-214666428", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213423915, "id": 264706591, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDcwNjU5MQ==", "diff_hunk": "@@ -616,9 +616,12 @@ def _serialize_table_record_field_name(self, remote_schema, streamed_schema, pat\n             if not mapping is None:\n                 return mapping\n \n-        raise Exception('Unknown column path: {} for table: {}'.format(\n+        raise Exception(\"Column path: {} for table: {} for the value's JSONSchema {} cannot be found.\" \\\n+                        + \" This means that the `remote_schema` has no compatible column for this path\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 15, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "awm33", "id": 3846080}, "body": "This is probably jibberish to most users who haven't dived deep into the code. I even had to think, parse it apart, and look through the code to make sense of it.\r\n\r\nMaybe \"Column {path} for table {remote_schema['path'][0]} cannot be found in the target database\"? Maybe flatten the `path` as well so it legible as a column name if possible?", "created_at": "2019-03-12T14:27:21.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r264706591", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213423915, "id": 264707511, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDcwNzUxMQ==", "diff_hunk": "@@ -713,9 +717,19 @@ def _serialize_table_records(\n                                                                      path,\n                                                                      value_json_schema)\n \n-                if field_name in remote_fields \\\n-                        and (not field_name in row\n-                             or row[field_name] == NULL_DEFAULT):\n+                if not field_name in row:\n+                    raise Exception(\n+                        \"Unexpected field_name serialization! Field {} doesn't exist. Please create an issue at: {}.\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 55, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "awm33", "id": 3846080}, "body": "\"Unexpected field_name serialization!\" What does this mean? The column name couldn't be generated?", "created_at": "2019-03-12T14:28:55.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r264707511", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213533371, "id": 264791726, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDc5MTcyNg==", "diff_hunk": "@@ -713,9 +717,19 @@ def _serialize_table_records(\n                                                                      path,\n                                                                      value_json_schema)\n \n-                if field_name in remote_fields \\\n-                        and (not field_name in row\n-                             or row[field_name] == NULL_DEFAULT):\n+                if not field_name in row:\n+                    raise Exception(\n+                        \"Unexpected field_name serialization! Field {} doesn't exist. Please create an issue at: {}.\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 55, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "How about \"Unexpected exception! Field {} doesn't exist. Please create...\"\r\n\r\nie, this _shouldn't_ happen, and _is_ a bug.", "created_at": "2019-03-12T17:18:16.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r264791726", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "COLLABORATOR", "in_reply_to_id": 264707511, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213534081, "id": 264792273, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDc5MjI3Mw==", "diff_hunk": "@@ -616,9 +616,12 @@ def _serialize_table_record_field_name(self, remote_schema, streamed_schema, pat\n             if not mapping is None:\n                 return mapping\n \n-        raise Exception('Unknown column path: {} for table: {}'.format(\n+        raise Exception(\"Column path: {} for table: {} for the value's JSONSchema {} cannot be found.\" \\\n+                        + \" This means that the `remote_schema` has no compatible column for this path\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 15, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "So I think the _path_ more useful here. If we get this exception, we cannot actually tell you what the name of the column is...", "created_at": "2019-03-12T17:19:27.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r264792273", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "COLLABORATOR", "in_reply_to_id": 264706591, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213949504, "id": 265125765, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTEyNTc2NQ==", "diff_hunk": "@@ -713,9 +717,19 @@ def _serialize_table_records(\n                                                                      path,\n                                                                      value_json_schema)\n \n-                if field_name in remote_fields \\\n-                        and (not field_name in row\n-                             or row[field_name] == NULL_DEFAULT):\n+                if not field_name in row:\n+                    raise Exception(\n+                        \"Unexpected field_name serialization! Field {} doesn't exist. Please create an issue at: {}.\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 55, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Actually, I think we can just get rid of this entirely. The following check to see whether the value we've placed into the row is set will blow up with a bug worthy exception. I think we can safely ignore having a pretty exception here since this should _only_ be a bug, not something we're prepared for.", "created_at": "2019-03-13T13:30:19.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r265125765", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "COLLABORATOR", "in_reply_to_id": 264707511, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 213950208, "id": 265126345, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTEyNjM0NQ==", "diff_hunk": "@@ -616,9 +616,12 @@ def _serialize_table_record_field_name(self, remote_schema, streamed_schema, pat\n             if not mapping is None:\n                 return mapping\n \n-        raise Exception('Unknown column path: {} for table: {}'.format(\n+        raise Exception(\"Column path: {} for table: {} for the value's JSONSchema {} cannot be found.\" \\\n+                        + \" This means that the `remote_schema` has no compatible column for this path\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 15, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "How about `A compatible column for path {} and JSONSchema {} in table {} cannot be found.`?", "created_at": "2019-03-13T13:31:32.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r265126345", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "COLLABORATOR", "in_reply_to_id": 264706591, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 214653817, "id": 265680057, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTY4MDA1Nw==", "diff_hunk": "@@ -616,9 +616,12 @@ def _serialize_table_record_field_name(self, remote_schema, streamed_schema, pat\n             if not mapping is None:\n                 return mapping\n \n-        raise Exception('Unknown column path: {} for table: {}'.format(\n+        raise Exception(\"Column path: {} for table: {} for the value's JSONSchema {} cannot be found.\" \\\n+                        + \" This means that the `remote_schema` has no compatible column for this path\" \\", "path": "target_postgres/sql_base.py", "position": null, "original_position": 15, "commit_id": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "original_commit_id": "534b6780609582eef0fe605fd8cfc3bda11c7843", "user": {"login": "awm33", "id": 3846080}, "body": "I think that's better", "created_at": "2019-03-14T17:21:20.000000Z", "updated_at": "2019-03-14T17:41:12.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/100#discussion_r265680057", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/100", "author_association": "MEMBER", "in_reply_to_id": 264706591, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/98", "id": "254748946", "number": 98, "state": "closed", "title": "Bump: 0.1.4 -> 0.1.5", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPrepping for releasing 0.1.5.\r\n\r\n## Suggested Musical Pairing\r\n\r\nNews.", "created_at": "2019-02-20T18:38:55.000000Z", "updated_at": "2019-02-20T18:43:14.000000Z", "closed_at": "2019-02-20T18:43:11.000000Z", "merged_at": "2019-02-20T18:43:11.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/97", "id": "254714098", "number": 97, "state": "closed", "title": "Feature/empty table persistence", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWe got pinged for support for having empty tables end up in remote. In investigating the work necessary for this, it turned out to be pretty straightforward. Hence, no issue etc.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/trulylapriest/oino", "created_at": "2019-02-20T16:50:22.000000Z", "updated_at": "2019-02-20T18:36:18.000000Z", "closed_at": "2019-02-20T18:36:14.000000Z", "merged_at": "2019-02-20T18:36:14.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 205923386, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/97#pullrequestreview-205923386", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/97", "commit_id": "fa67871b24c271e374b866b0fd50ac580f909818", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:39.494883Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/96", "id": "251626785", "number": 96, "state": "closed", "title": "Bump: 0.1.3 -> 0.1.4", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nBug fix found, time to release!\r\n\r\n## Suggested Musical Pairing\r\n\r\nEverlong by the Foo Fighters", "created_at": "2019-02-08T23:15:04.000000Z", "updated_at": "2019-02-08T23:26:43.000000Z", "closed_at": "2019-02-08T23:26:40.000000Z", "merged_at": "2019-02-08T23:26:40.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/95", "id": "251601655", "number": 95, "state": "closed", "title": "Fix/key properties canonicalized", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/94\r\n\r\nAn issue was reported with `key_properties` which end up getting canonicalized due to naming restrictions etc.\r\n\r\nCredit to @mirelagrigoras for finding this, triaging the problem, and actually writing the majority of the code to resolve!\r\n\r\n## Suggested Musical Pairing\r\nFreezing wind.", "created_at": "2019-02-08T21:21:38.000000Z", "updated_at": "2019-02-08T23:00:16.000000Z", "closed_at": "2019-02-08T23:00:04.000000Z", "merged_at": "2019-02-08T23:00:04.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 201796243, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/95#pullrequestreview-201796243", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/95", "commit_id": "8b8ff9139ab80f866c829e18dded1e79426af6b0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/94", "id": "251307506", "number": 94, "state": "closed", "title": "Fix comparing columns in tables to the current stream keys.", "user": {"login": "mirelagrigoras", "id": 47386964}, "body": "A \"key\" value, as it comes in the stream_buffer object, may or may not contain uppercase letters, but in Redshift, which is based on Postgres, columns are always created with lowercase letters.\r\nAs a consequence, in order to check that in the existing table there is a column that corresponds to a certain key and has the same type as the one provided for the key in the current schema, we must  check that the type of the key is the same as the _column that is mapped to this key_.\r\nE.g.: For a key called 'orderID', the new column that will be created in a Redshift table will be \"orderid\".Thus,  in the metadata object the column 'orderid' will be mapped to the 'orderID' key.\r\nTo check that both the column in the table and the schema type for that key have the same sql type, we call the json_schema_to_sql_type method as it follows:\r\n-current_table_schema['schema']['properties']['orderid'] \r\n-stream_buffer.schema['properties']['orderID'].", "created_at": "2019-02-07T23:37:43.000000Z", "updated_at": "2019-02-08T22:59:12.000000Z", "closed_at": "2019-02-08T22:59:12.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 201792733, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@mirelagrigoras I took a stab at this as well before seeing your work in here. This is great! Also, good catch with the `key_properties` being passed into `persist_csv`.\r\n\r\nI don't see any failing tests herein, and we'll need those for future proofing etc. If you wanna check out my pr and steal the tests feel free.\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/95\r\n\r\nI'll leave it up to you as to whether you want to merge the prs, or if you want to review mine and we can try to get that one through!", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/94#pullrequestreview-201792733", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/94", "commit_id": "e0066b5686d9348b1dc4fc8191fd99b299bc5c0d", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 201792733, "id": 255240971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI0MDk3MQ==", "diff_hunk": "@@ -459,7 +463,7 @@ def persist_csv_rows(self,\n \n         update_sql = self._get_update_sql(remote_schema['name'],\n                                           temp_table_name,\n-                                          remote_schema['key_properties'],\n+                                          [key.lower() for key in remote_schema['key_properties']],", "path": "target_postgres/postgres.py", "position": 52, "original_position": 52, "commit_id": "e0066b5686d9348b1dc4fc8191fd99b299bc5c0d", "original_commit_id": "e0066b5686d9348b1dc4fc8191fd99b299bc5c0d", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "I think you also have an issue with other values being canonicalized to `_` by the `canonicalize_identifier` code. I think for your `persist_csv` code you'll need to do the same thing as what you did on line 142.", "created_at": "2019-02-08T21:27:54.000000Z", "updated_at": "2019-02-08T21:29:48.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/94#discussion_r255240971", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/94", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 201792733, "id": 255241238, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI0MTIzOA==", "diff_hunk": "@@ -125,6 +124,8 @@ def write_batch(self, stream_buffer):\n                                                              (stream_buffer.stream,),\n                                                              stream_buffer.stream)\n \n+                table_metadata = self._get_table_metadata(cur,", "path": "target_postgres/postgres.py", "position": 12, "original_position": 12, "commit_id": "e0066b5686d9348b1dc4fc8191fd99b299bc5c0d", "original_commit_id": "e0066b5686d9348b1dc4fc8191fd99b299bc5c0d", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "This should probably be moved to line ~140 as it's only used there. By doing that it better scopes the variable so that it's not being used accidentally in more places.", "created_at": "2019-02-08T21:28:59.000000Z", "updated_at": "2019-02-08T21:29:48.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/94#discussion_r255241238", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/94", "author_association": "COLLABORATOR", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/1", "id": "223380959", "number": 1, "state": "closed", "title": "Readme and target schema config", "user": {"login": "kevinsanz93", "id": 41018734}, "body": "I updated the readme to account for the config values. Also added a config.get for the target catalog", "created_at": "2018-10-16T20:12:32.000000Z", "updated_at": "2019-02-04T15:26:35.000000Z", "closed_at": "2019-02-04T15:26:35.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 165805221, "user": {"login": "awm33", "id": 3846080}, "body": "Looks great! Just one small change requested", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/1#pullrequestreview-165805221", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/1", "commit_id": "6faf129b4fa1fdec7073b69de0cba54a2e9c9755", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 165805221, "id": 226070183, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA3MDE4Mw==", "diff_hunk": "@@ -1,18 +1,18 @@\n-#!/usr/bin/env python\n-\n from setuptools import setup, find_packages\n \n setup(\n     name='target-sql',\n     version=\"0.0.1\",\n     description='Singer.io targets for loading data into SQL databases',\n     classifiers=['Programming Language :: Python :: 3 :: Only'],\n-    py_modules=['target_postgres'],\n+    py_modules=['target_postgres','target_redshift'],\n     install_requires=[\n         'jsonschema==2.6.0',\n         'psycopg2==2.7.4',\n+        'singer-python==5.0.12',\n         'psycopg2-binary==2.7.4',\n-        'singer-python==5.0.12'\n+        'boto3',", "path": "setup.py", "position": null, "original_position": 18, "commit_id": "efe5a89dcd47b09d57aabdbf382efe7ed25330e2", "original_commit_id": "6faf129b4fa1fdec7073b69de0cba54a2e9c9755", "user": {"login": "awm33", "id": 3846080}, "body": "Small, but can we keep these in alphabetical order?", "created_at": "2018-10-17T19:46:20.000000Z", "updated_at": "2018-11-06T00:15:18.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/1#discussion_r226070183", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/1", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/93", "id": "247995781", "number": 93, "state": "closed", "title": "Bump: target-postgres 0.1.2 -> 0.1.3", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPR for discussion/releasing 0.1.3\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/japanesebreakfast/boyish", "created_at": "2019-01-28T01:15:14.000000Z", "updated_at": "2019-01-28T15:06:43.000000Z", "closed_at": "2019-01-28T15:06:40.000000Z", "merged_at": "2019-01-28T15:06:40.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 197075878, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/93#pullrequestreview-197075878", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/93", "commit_id": "2e77ffc14c415351de943028d4efa6845f7269ee", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/92", "id": "247806043", "number": 92, "state": "closed", "title": "Feature/loggging of schema changes", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIssues posted by users of this codebase sometimes have a lack of usable logs present. Additionally, when testing, or debugging in production, more fine grained information can be quite useful.\r\n\r\n## Notes\r\n\r\nThis is all opt-in-enabled by setting the new config option: `logging_level`, to `DEBUG` or lower.\r\n\r\nThis pr adds special logging with durations for:\r\n\r\n### `sql_base.upsert_table_helper`\r\n\r\nEach decision which modifies the table in some manner is logged:\r\n\r\n```\r\nINFO Table Schema Change [`root`.`('id',)`:`id`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_received_at',)`:`_sdc_received_at`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_sequence',)`:`_sdc_sequence`] New column (took 1 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_table_version',)`:`_sdc_table_version`] New column (took 2 millis)\r\nINFO Table Schema Change [`root`.`('_sdc_batched_at',)`:`_sdc_batched_at`] New column (took 2 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type__i`] Splitting changing_literal_type into changing_literal_type__f and changing_literal_type__i. New column matches existing column path, but the types are incompatible. (took 6 millis)\r\nINFO Table Schema Change [`root`.`('changing_literal_type',)`:`changing_literal_type__b`] Adding new column to split column ('changing_literal_type',). New column matches existing column's path, but no types were compatible. (took 1 millis)\r\n```\r\n\r\n```\r\nINFO Table Schema Change [`cats`.`('id',)`:`id`] New column (took 2 millis)\r\nINFO Table Schema Change [`cats`.`('name',)`:`name`] New column (took 6 millis)\r\nINFO Table Schema Change [`cats`.`('name',)`:`name`] Made existing column nullable. New column is nullable, existing column is not (took 3 millis)\r\n```\r\n\r\n### `psycopg2.connection`/`psycopg2.cursor` queries\r\n\r\nEvery query run will output logs similar to:\r\n\r\n```\r\nextras.py                  422 DEBUG    0 millis spent executing: b'ALTER TABLE \"public\".\"cats\" ADD COLUMN \"age\" bigint;'\r\nextras.py                  422 DEBUG    1 millis spent executing: b\"\\n            SELECT EXISTS (\\n                SELECT 1 FROM pg_tables\\n                WHERE schemaname = 'public' AND\\n                      tablename = 'cats');\"\r\nextras.py                  422 DEBUG    0 millis spent executing: b'SELECT description FROM pg_description WHERE objoid = \\'\"public\".\"cats\"\\'::regclass;'\r\nextras.py                  422 DEBUG    0 millis spent executing: b'COMMENT ON TABLE \"public\".\"cats\" IS \\'{\"version\": null, \"schema_version\": 1, \"table_mappings\": [{\"type\": \"TABLE\", \"from\": [\"cats\"], \"to\": \"cats\"}], \"key_properties\": [\"id\"], \"mappings\": {\"id\": {\"type\": [\"integer\"], \"from\": [\"id\"]}, \"name\": {\"type\": [\"string\"], \"from\": [\"name\"]}, \"paw_size\": {\"type\": [\"integer\"], \"from\": [\"paw_size\"]}, \"paw_colour\": {\"type\": [\"string\"], \"from\": [\"paw_colour\"]}, \"flea_check_complete\": {\"type\": [\"boolean\"], \"from\": [\"flea_check_complete\"]}, \"pattern\": {\"type\": [\"string\", \"null\"], \"from\": [\"pattern\"]}, \"age\": {\"type\": [\"integer\", \"null\"], \"from\": [\"age\"]}}}\\';'\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nWindows creeking from the cold", "created_at": "2019-01-25T20:36:10.000000Z", "updated_at": "2019-01-28T01:08:37.000000Z", "closed_at": "2019-01-28T01:08:34.000000Z", "merged_at": "2019-01-28T01:08:34.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 196838322, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/92#pullrequestreview-196838322", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/92", "commit_id": "a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "id": "246141619", "number": 89, "state": "closed", "title": "Fix/datetime split columns", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIf a schema is provided which has a column which is of type `string`, and then later, a new schema is provided which has the same column but of type `date-time`, we do not split the column, but rather place all values of the date-time into the string column.\r\n\r\nLuckily, if the schema we first see is of type `date-time` then the latter one is `string`, our upload will fail and the bug will be detected. Provided that the string values we have ***ARE NOT*** _only_ values which are also able to be processed by `arrow`:\r\n\r\n```py\r\n>>> arrow.get('hello-world')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/api.py\", line 22, in get\r\n    return _factory.get(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/factory.py\", line 174, in get\r\n    dt = parser.DateTimeParser(locale).parse_iso(arg)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/parser.py\", line 119, in parse_iso\r\n    return self._parse_multiformat(string, formats)\r\n  File \"/usr/local/lib/python3.7/site-packages/arrow-0.13.0-py3.7.egg/arrow/parser.py\", line 286, in _parse_multiformat\r\n    raise ParserError('Could not match input to any of {} on \\'{}\\''.format(formats, string))\r\narrow.parser.ParserError: Could not match input to any of ['YYYY-MM-DD', 'YYYY/MM/DD', 'YYYY.MM.DD', 'YYYY-MM', 'YYYY/MM', 'YYYY.MM', 'YYYY', 'YYYY', 'YYYY'] on 'hello-world'\r\n```\r\n\r\nAs such, date-time and String columns collide irrevocably. The problem here is twofold:\r\n- we have no shorthand for date-time values\r\n- we do not store information enough to determine that a persisted column mapping is date-time vs string\r\n\r\n## How was this found?\r\n\r\nWhile working on `target-redshift`, I had not yet implemented `make_column_nullable`. This was due to forcing _all_ columns to be nullable. However, whenever a test performed an upsert, the column was _made nullable_. This is _not_ an operation inherently _allowed_ by Redshift. As such, the test would fail. It was only after digging into what was going on that I was able to track down what was happening.\r\n\r\n## Specific Issue\r\n\r\n1. Columns which are date-time do _not_ contain the inherent metadata in our json blobs to detect that they _are_ in fact datetimes\r\n    - this is mitigate-able as we still have date-time information in the schema of the column itself\r\n    - could write a simple migration to do this\r\n1. Columns which streamed _first_ as `string` ***THEN LATER*** as `date-time` will remain `string` forever\r\n    - ie, all date-time values will be uploaded as strings\r\n    - this is a current, albeit incredibly specific, bug\r\n    - we cannot _really_ help here as any migration to place data into the correct column would need to regex parese each value to see if it's able to be translated into a valid `date-time` etc.\r\n    - even if we parse those values, they may have _actually been strings all along_\r\n1. All columns which first streamed as `date-time` ***THEN LATER*** as `string` will presently fail hard. As such, we do not need to worry about this case since anything like this would result in no data persisted and an issue being created herein\r\n1. Split/Collision columns where one is a `date-time` (and no strings are present etc.) will be postfixed with `__s` ***NOT*** with anything intelligible to represent it as a `date-time`...\r\n    - the argument can probably be made many ways here that this is a bug, or a feature\r\n    - I would vote for not touching the naming of _current_ columns, but rather make it so that all `date-time` split/collision columns going forward be postfixed with `__t`\r\n        - not `__d` as that could be confused with `decimal` or `double`...maybe?\r\n\r\n## Proposal\r\n\r\nFocus on mitigating (1) from above. ie, upgrading _existing schemas_ to have date-time information in a table.\r\n\r\n1. start placing `schema-version` (or something) into metadata for a table.\r\n1. any tables which _do not_ have `schema-version` are assumed to be from the first iteration, and we proceed to upgrade them\r\n    1. warn that an old table has been detected and that we're attempting to auto-upgrade\r\n    1. upgrade all `date-time` columns to make sure that their metadata has the information necessary to distinguish them from `string`\r\n    1. add `schema-version`\r\n\r\n- Add in test which random/generatively checks combinations of column splits and uploads to make sure we can't have this problem in the future.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/connanmockasin/quadropuss-island-1?in=connanmockasin/sets/forever-dolphin-love-2", "created_at": "2019-01-20T23:12:13.000000Z", "updated_at": "2019-01-25T17:59:53.000000Z", "closed_at": "2019-01-25T17:59:50.000000Z", "merged_at": "2019-01-25T17:59:50.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 196053200, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/89#pullrequestreview-196053200", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "commit_id": "a601f5c1bdcdd6275206845aa71066851742eef4", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 196348848, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/89#pullrequestreview-196348848", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "commit_id": "11c5c79bc64490370641ba27d014420e38d3a95f", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 196053200, "id": 250624411, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDYyNDQxMQ==", "diff_hunk": "@@ -141,6 +157,16 @@ def is_literal(schema):\n     return not {STRING, INTEGER, NUMBER, BOOLEAN}.isdisjoint(set(get_type(schema)))\n \n \n+def is_datetime(schema):\n+    \"\"\"\n+    Given a JSON Schema compatible dict, returns True when schema's type allows being a date-time\n+    :param schema: dict, JSON Schema\n+    :return: Boolean\n+    \"\"\"\n+\n+    return 'format' in simple_type(schema)", "path": "target_postgres/json_schema.py", "position": null, "original_position": 41, "commit_id": "11c5c79bc64490370641ba27d014420e38d3a95f", "original_commit_id": "a601f5c1bdcdd6275206845aa71066851742eef4", "user": {"login": "awm33", "id": 3846080}, "body": "Wouldn't this return true for any format? There are many https://json-schema.org/understanding-json-schema/reference/string.html#format", "created_at": "2019-01-24T14:24:02.000000Z", "updated_at": "2019-01-25T03:25:33.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/89#discussion_r250624411", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 196053200, "id": 250625180, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDYyNTE4MA==", "diff_hunk": "@@ -141,6 +157,16 @@ def is_literal(schema):\n     return not {STRING, INTEGER, NUMBER, BOOLEAN}.isdisjoint(set(get_type(schema)))\n \n \n+def is_datetime(schema):\n+    \"\"\"\n+    Given a JSON Schema compatible dict, returns True when schema's type allows being a date-time\n+    :param schema: dict, JSON Schema\n+    :return: Boolean\n+    \"\"\"\n+\n+    return 'format' in simple_type(schema)", "path": "target_postgres/json_schema.py", "position": null, "original_position": 41, "commit_id": "11c5c79bc64490370641ba27d014420e38d3a95f", "original_commit_id": "a601f5c1bdcdd6275206845aa71066851742eef4", "user": {"login": "awm33", "id": 3846080}, "body": "Oh, I see the above. `simple_type` forces all string types to be pure strings or datetimes. But that seems confusing given the logic in this function just checks for the `format` key.", "created_at": "2019-01-24T14:26:07.000000Z", "updated_at": "2019-01-25T03:25:33.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/89#discussion_r250625180", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/89", "author_association": "MEMBER", "in_reply_to_id": 250624411, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/90", "id": "246772711", "number": 90, "state": "closed", "title": "Bump: psycopg2 2.7.6 -> 2.7.7", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhile working on a pre-release for `0.1.3`, `psycopg2` released a later version. Seems like as good a time as any to bump this dependency.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/craftspells/after-the-moment-2", "created_at": "2019-01-22T22:20:33.000000Z", "updated_at": "2019-01-22T22:45:57.000000Z", "closed_at": "2019-01-22T22:45:54.000000Z", "merged_at": "2019-01-22T22:45:54.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 195269263, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/90#pullrequestreview-195269263", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/90", "commit_id": "e9972a49598a9a515b991b36d968716efe254da2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/88", "id": "245996901", "number": 88, "state": "closed", "title": "Bump: target-postgres 0.1.1 -> 0.1.2", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPrepping release of `0.1.2`\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/idris-muhammad-official/could-heaven-ever-be-like", "created_at": "2019-01-18T22:57:40.000000Z", "updated_at": "2019-01-18T22:57:50.000000Z", "closed_at": "2019-01-18T22:57:47.000000Z", "merged_at": "2019-01-18T22:57:47.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/87", "id": "245951048", "number": 87, "state": "closed", "title": "Feature: update_sql does not depend on header ordering", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhile working on Target-Redshift, I stumbled across some weirdness in the return values from our `get_table_schema` implementation and the `_get_update_sql` implementation.\r\n\r\nSpecifically, this has to do ***SOLELY WITH REDSHIFT***\r\n\r\nThis is the result of our underlying query for `get_table_schema`:\r\n\r\n```sql\r\ndev=> SELECT column_name, data_type, is_nullable FROM information_schema.columns where table_schema = 'public' and table_name = 'cats';\r\n                  column_name                  |        data_type         | is_nullable \r\n-----------------------------------------------+--------------------------+-------------\r\n _sdc_batched_at                               | timestamp with time zone | YES\r\n _sdc_received_at                              | timestamp with time zone | YES\r\n adoption__adopted_on                          | timestamp with time zone | YES\r\n pattern                                       | character varying        | YES\r\n paw_colour                                    | character varying        | YES\r\n name                                          | character varying        | YES\r\n _sdc_table_version                            | bigint                   | YES\r\n _sdc_sequence                                 | bigint                   | YES\r\n age                                           | bigint                   | YES\r\n paw_size                                      | bigint                   | YES\r\n id                                            | bigint                   | YES\r\n adoption__was_foster                          | boolean                  | YES\r\n flea_check_complete                           | boolean                  | YES\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | YES\r\n(14 rows)\r\n```\r\n\r\nThis is the result of `\\d` on the _same table_:\r\n\r\n```sql\r\ndev=> \\d cats\r\n                                 Table \"public.cats\"\r\n                    Column                     |           Type           | Modifiers \r\n-----------------------------------------------+--------------------------+-----------\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | \r\n id                                            | bigint                   | \r\n name                                          | character varying(65535) | \r\n paw_size                                      | bigint                   | \r\n paw_colour                                    | character varying(65535) | \r\n flea_check_complete                           | boolean                  | \r\n pattern                                       | character varying(65535) | \r\n age                                           | bigint                   | \r\n adoption__adopted_on                          | timestamp with time zone | \r\n adoption__was_foster                          | boolean                  | \r\n _sdc_received_at                              | timestamp with time zone | \r\n _sdc_sequence                                 | bigint                   | \r\n _sdc_table_version                            | bigint                   | \r\n _sdc_batched_at                               | timestamp with time zone | \r\n```\r\n\r\nThe columns are in a different order. Updating our original query:\r\n\r\n```sql\r\ndev=> SELECT column_name, data_type, is_nullable, ordinal_position FROM information_schema.columns where table_schema = 'public' and table_name = 'cats';\r\n                  column_name                  |        data_type         | is_nullable | ordinal_position \r\n-----------------------------------------------+--------------------------+-------------+------------------\r\n _sdc_batched_at                               | timestamp with time zone | YES         |               14\r\n _sdc_received_at                              | timestamp with time zone | YES         |               11\r\n adoption__adopted_on                          | timestamp with time zone | YES         |                9\r\n pattern                                       | character varying        | YES         |                7\r\n paw_colour                                    | character varying        | YES         |                5\r\n name                                          | character varying        | YES         |                3\r\n _sdc_table_version                            | bigint                   | YES         |               13\r\n _sdc_sequence                                 | bigint                   | YES         |               12\r\n age                                           | bigint                   | YES         |                8\r\n paw_size                                      | bigint                   | YES         |                4\r\n id                                            | bigint                   | YES         |                2\r\n adoption__was_foster                          | boolean                  | YES         |               10\r\n flea_check_complete                           | boolean                  | YES         |                6\r\n _sdc_target_redshift_create_table_placeholder | boolean                  | YES         |                1\r\n(14 rows)\r\n```\r\n\r\n## The Problem\r\n\r\n```py\r\n>           cur.execute(update_sql)\r\nE           psycopg2.ProgrammingError: column \"_sdc_target_redshift_create_table_placeholder\" is of type boolean but expression is of type timestamp with time zone\r\nE           HINT:  You will need to rewrite or cast the expression.\r\n```\r\n\r\n> The target column names can be listed in any order. If no list of column names is given at all, the default is all the columns of the table in their declared order\r\n\r\nhttps://www.postgresql.org/docs/8.4/sql-insert.html\r\n\r\nSo when we do our update sql, we rely implicitly upon the underlying _order_ of some lists and ordered dicts which are passed down from well above. The ordering of those dicts relies upon the arbitrary ordering of results returned by our get schema queries.\r\n\r\nNone of this is set in stone, and inherently, it's quite brittle. While these queries and code _seem_ to line up well in PostgreSQL, they aren't guaranteed to. As such, when Redshift returns the results, and they are not in our expected ordering, we end up building an insertion statement which does not have columns lined up correctly.\r\n\r\n## Proposed Solution\r\n\r\nA simple solution, which has been implemented here, is to simply add the columns we are to `INSERT ... SELECT ...` to our `INSERT INTO...` statement. This removes ambiguity from our code, and also makes the inherent coupling between these functions much simpler.\r\n\r\n## Further Concerns\r\n\r\nI spent a while trying to come up with a good way to reproduce this as a failure in PostgreSQL so that we have a \ud83d\udc1b to fix. Unfortunately, this took so long and no real progress was made, that I gave up. I _think_ the argument can be made that this is _fine_ and that the spirit of this repo is not being violated because this is not changing _anything_ for our Postgres users, and this is still compliant code/provides a benefit for our Redshift users.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/starfucker_usa/rawnald-gregory-erickson-the-3", "created_at": "2019-01-18T19:37:27.000000Z", "updated_at": "2019-01-18T22:53:54.000000Z", "closed_at": "2019-01-18T22:53:48.000000Z", "merged_at": "2019-01-18T22:53:48.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 194307094, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/87#pullrequestreview-194307094", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/87", "commit_id": "ec97706b1981f347e325aa53836c29a4c71657a8", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/86", "id": "245216096", "number": 86, "state": "closed", "title": "Fix: Release logic broken", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nReleasing is currently broken due to a small bug in checking versions vs tags.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/starfucker_usa/rawnald-gregory-erickson-the-3", "created_at": "2019-01-16T16:43:28.000000Z", "updated_at": "2019-01-16T16:44:08.000000Z", "closed_at": "2019-01-16T16:44:05.000000Z", "merged_at": "2019-01-16T16:44:05.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/85", "id": "245210142", "number": 85, "state": "closed", "title": "Bump: target-postgres 0.1.0 -> 0.1.1", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPrepping for releasing 0.1.1\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/saintmotel/saint-motel-midnight-movies-1", "created_at": "2019-01-16T16:26:47.000000Z", "updated_at": "2019-01-16T16:27:03.000000Z", "closed_at": "2019-01-16T16:27:00.000000Z", "merged_at": "2019-01-16T16:27:00.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/84", "id": "245179627", "number": 84, "state": "closed", "title": "Bump/dependencies 2019 01 16", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/67\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/connanmockasin/feelin-lovely", "created_at": "2019-01-16T15:05:36.000000Z", "updated_at": "2019-01-16T16:17:06.000000Z", "closed_at": "2019-01-16T16:17:02.000000Z", "merged_at": "2019-01-16T16:17:02.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 193208623, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/84#pullrequestreview-193208623", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/84", "commit_id": "ba85a4d4fada84da942ed201118196a22dc34199", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/83", "id": "244175573", "number": 83, "state": "closed", "title": "Refactor: Remove SQL notions from json_schema, embed code where it's \u2026", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIn splitting out Redshift, there's some differing logic in Redshift around maximum length of a column. Since Redshift does _not_ have `TEXT` column types, we'll need to be able to override this in https://github.com/datamill-co/target-redshift.\r\n\r\nBefore cutting a new version of `target-postgres`, I wanted to get this change in place, since it'll effectively render `target-redshift` dead in the water till it happens.\r\n\r\nAdditionally, the `json_schema` module is mainly helper functions for dealing with `JSONSchema`. It doesn't _need_ to know _anything_ about SQL.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sarah-jarosz-official/ring-them-bells?in=sarah-jarosz-official/sets/follow-me-down-2", "created_at": "2019-01-11T23:13:39.000000Z", "updated_at": "2019-01-15T19:11:18.000000Z", "closed_at": "2019-01-15T19:11:14.000000Z", "merged_at": "2019-01-15T19:11:14.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 192465712, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/83#pullrequestreview-192465712", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/83", "commit_id": "4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/82", "id": "244140653", "number": 82, "state": "closed", "title": "Feature/postgres 8 4 compatible code", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIn splitting the `target-redshift` code out, there are some Postgres specific changes which can be made to provide a simpler interface for Redshift. `DECISIONS` comment is posted in full below:\r\n\r\n## DECISION\r\n\r\n### Queries\r\n\r\n#### What\r\n\r\n- When we write SQL at any given point, we have the option to use \"latest\" PostgreSQL features\r\n- We opt for features available from PostgreSQL 8.4.22 forward\r\n- We ***DO NOT*** support PostgreSQL 8.4.22\r\n  - any features/bugs issues based on this will be weighed against this decision as far as effort to benefit\r\n\r\n#### Why\r\n\r\n- Supporting multiple versions of PostgreSQL has _thus far_ been fairly straightforward by adhering to only query support available in the _oldest_ version of supported PostgreSQL\r\n- By doing this, we only have one main code base, instead of many fractured versions which all employ the latest/greatest system functions/methods/tables/information schemas available\r\n- By using 8.4.22, supporting [Redshift](https://github.com/datamill-co/target-redshift) is made simpler\r\n  - Redshift was originally split from [PostgreSQL 8.0.2](https://docs.aws.amazon.com/redshift/latest/dg/c_redshift-and-postgres-sql.html)\r\n  - At some point, a _lot_ of work was done by AWS to make Redshift a \"simple fork\" of PostgreSQL 8.4\r\n- We do not _support_ PostgreSQL 8.4 simply because PostgreSQL does not support it anymore\r\n  - Our _only_ benefit to making 8.4 query language our target is Redshift\r\n  - When a new supported version of PostgreSQL comes along, and we undertake the effort to support it herein, if supporting it is simpler to do by breaking 8.4, we will move the necessary logic to [target-redshift](https://github.com/datamill-co/target-redshift)\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/bibio/night-falls?in=bibio/sets/the-serious-ep", "created_at": "2019-01-11T20:26:59.000000Z", "updated_at": "2019-01-15T19:11:01.000000Z", "closed_at": "2019-01-15T19:10:57.000000Z", "merged_at": "2019-01-15T19:10:57.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 192465463, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/82#pullrequestreview-192465463", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/82", "commit_id": "e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/81", "id": "243779336", "number": 81, "state": "closed", "title": "Refactor/denest as module", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nStart `denest`.\r\n\r\nWhile working on #72 a discussion arose about longer term goals and interfaces etc. This pr seeks to split out the denesting logic so that it can be tested independently etc.\r\n\r\n## Notes\r\n\r\nRelies upon the work done in: https://github.com/datamill-co/target-postgres/pull/79\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/hotchip/flutes", "created_at": "2019-01-10T18:01:18.000000Z", "updated_at": "2019-01-11T20:18:09.000000Z", "closed_at": "2019-01-11T20:18:06.000000Z", "merged_at": "2019-01-11T20:18:06.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 191496463, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/81#pullrequestreview-191496463", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/81", "commit_id": "a92da93a11a2ef37db2578ccd289f23c46164213", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 191842501, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/81#pullrequestreview-191842501", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/81", "commit_id": "e4c97f487b7776670e0705bdd224543b4a074ab3", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 191496463, "id": 246986565, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njk4NjU2NQ==", "diff_hunk": "@@ -0,0 +1,372 @@\n+from copy import deepcopy\n+\n+from target_postgres import json_schema\n+from target_postgres.singer_stream import (\n+    SINGER_BATCHED_AT,\n+    SINGER_LEVEL,\n+    SINGER_PK,\n+    SINGER_RECEIVED_AT,\n+    SINGER_SEQUENCE,\n+    SINGER_SOURCE_PK_PREFIX,\n+    SINGER_TABLE_VERSION,\n+    SINGER_VALUE\n+)\n+\n+\n+def to_table_batches(schema, key_properties, records):\n+    \"\"\"\n+    Given a schema, and records, get all table schemas and records and prep them\n+    in a `table_batch`.\n+\n+    :param schema: SingerStreamSchema\n+    :param key_properties: [string, ...]\n+    :param records: [{...}, ...]\n+    :return: [{'streamed_schema': TABLE_SCHEMA(local),\n+               'records': [{...}, ...]\n+    \"\"\"\n+    table_schemas = _get_streamed_table_schemas(schema,\n+                                                key_properties)\n+\n+    table_records = _get_streamed_table_records(key_properties,\n+                                                records)\n+    writeable_batches = []\n+    for table_json_schema in table_schemas:\n+        writeable_batches.append({'streamed_schema': table_json_schema,\n+                                  'records': table_records.get(table_json_schema['path'], [])})\n+\n+    return writeable_batches\n+\n+\n+def _get_streamed_table_schemas(schema, key_properties):\n+    \"\"\"\n+    Given a `schema` and `key_properties` return the denested/flattened TABLE_SCHEMA of\n+    the root table and each sub table.\n+\n+    :param schema: SingerStreamSchema\n+    :param key_properties: [string, ...]\n+    :return: [TABLE_SCHEMA(denested_streamed_schema_0), ...]\n+    \"\"\"\n+    root_table_schema = json_schema.simplify(schema)\n+\n+    _add_singer_columns(root_table_schema, key_properties)\n+\n+    subtables = {}\n+    key_prop_schemas = {}\n+    for key in key_properties:\n+        key_prop_schemas[key] = schema['properties'][key]\n+    _denest_schema(tuple(), root_table_schema, key_prop_schemas, subtables)\n+\n+    ret = [_to_table_schema(tuple(), None, key_properties, root_table_schema['properties'])]\n+    for path, schema in subtables.items():\n+        ret.append(_to_table_schema(path, schema['level'], schema['key_properties'], schema['properties']))\n+\n+    return ret\n+\n+\n+def _to_table_schema(path, level, keys, properties):\n+    for key in keys:\n+        if not (key,) in properties:\n+            raise Exception('Unknown key \"{}\" found for table \"{}\". Known fields are: {}'.format(\n+                key, path, properties\n+            ))\n+\n+    return {'type': 'TABLE_SCHEMA',\n+            'path': path,\n+            'level': level,\n+            'key_properties': keys,\n+            'mappings': [],\n+            'schema': {'type': 'object',\n+                       'additionalProperties': False,\n+                       'properties': properties}}\n+\n+\n+def _add_singer_columns(schema, key_properties):", "path": "target_postgres/denest.py", "position": null, "original_position": 83, "commit_id": "e4c97f487b7776670e0705bdd224543b4a074ab3", "original_commit_id": "a92da93a11a2ef37db2578ccd289f23c46164213", "user": {"login": "awm33", "id": 3846080}, "body": "Is this only used in the module? This seems like it's the function that handles this at each level", "created_at": "2019-01-11T02:17:47.000000Z", "updated_at": "2019-01-11T20:10:02.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/81#discussion_r246986565", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/81", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/79", "id": "243513498", "number": 79, "state": "closed", "title": "Feature/target tools", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nStart `target-tools`.\r\n\r\nWhile working on #72 a discussion arose about longer term goals and interfaces etc. This pr seeks to split out the smallest chunk of work done in #72, while tidying up the high level interface.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/jorge-ben-jor/mama-africa?in=jorge-ben-jor/sets/jorge-ben-jor-icollection", "created_at": "2019-01-09T23:20:50.000000Z", "updated_at": "2019-01-11T02:11:41.000000Z", "closed_at": "2019-01-11T02:11:38.000000Z", "merged_at": "2019-01-11T02:11:38.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 191494517, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/79#pullrequestreview-191494517", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/79", "commit_id": "28103727101f81ef634c00952dbfa644c1139061", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/78", "id": "243373873", "number": 78, "state": "closed", "title": "Housekeeping: CI CD", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWe're setting up PyPi and need to start tagging our releases etc.\r\n\r\n- All CI jobs will now `build` a release that _could_ be released. This catches bugs with our builds early\r\n- Any tags which are pushed to GitHub which are similar to `v0.1.5` etc., will:\r\n  - validate that the tag matches the `setup.py` version\r\n  - make a test-release in test.pypi\r\n  - wait for approval from a member of Datamill\r\n  - release to PyPi\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lean-quatifah/yas-indeed", "created_at": "2019-01-09T15:29:36.000000Z", "updated_at": "2019-01-11T02:10:35.000000Z", "closed_at": "2019-01-11T02:10:32.000000Z", "merged_at": "2019-01-11T02:10:31.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 190859541, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/78#pullrequestreview-190859541", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/78", "commit_id": "2dae504df39aab0e31bce01b59501a3553e56727", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/72", "id": "241170734", "number": 72, "state": "closed", "title": "Feature/sql base tests", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIn order to split the codebase between the more generic parts and the more concrete Postgres parts, we will need testing on more than just the results sitting in the target itself.\r\n\r\nTo do this, split up:\r\n\r\n#### `__init__` into two halves\r\n\r\n1. `sql_main` which is concerned about things like handling `line`s from a `Stream`, `Buffer`ing, high level/early error detection, and invoking the necessary values from a provided `Target`\r\n    - this allows for using the current `test_postgres` tests for a simple lightweight `FakeTarget`\r\n1. `__init__` which is purely concerned about making a `psycopg2.connection`, a `PostgresTarget`, and invoking the entrypoints/public functions from `sql_main`\r\n\r\n#### `test_postgres` into three parts\r\n\r\n1. `test_sql_main`:  tests about the buffering, high level error issues, singer data collection, etc.\r\n1. `test_sql_base`: tests about end schema, tests about general record batch shapes\r\n1. `test_postgres`: Tests which are either specifically about Postgres related things or are good edge case/load testing type things\r\n\r\n## Notes\r\n\r\n- I wanted to share some of the column assertions stuff between `test_postgres` and `test_sql_base`,  to make the refactoring of `test_postgres` clearer. ie, I have a test over here, I move it over here, and this change is easily visually diffable. To do this I piggybacked on the `fixtures` module. BUT in order to get assertion rewriting to work (to make the error/failure messages better) I had to make our tests an actual Python Package/module/whatever. ie, create the `__init__.py` file, and call some things from there.\r\n\r\n## Further Work\r\n### More classes and modules\r\n\r\nFrom this pr, I think we are now in a natural place to make classes for things like, `Mapping`/`TableSchema`/`TableBatch`, and separate modules for the static portions of `SQLInterface`. ie, all of the schema and record denesting.\r\n\r\nAll classes split out in this way should have a `from_json` and `to_json` method on them which does validation so that users can have a data first way to create them etc. (ie, I can let the class handle parsing and serialization rather than\r\n\r\nOnce we have these things setup, things like versioning the metadata currently stored in the `text` comments of tables will be more straightforward. Additionally, many of the tests we currently have can be more specific about what they're looking for, rather than testing things like denesting AND persisting AND errors AND...\r\n\r\n### Testing Suite\r\n\r\nSomething I have seen be quite useful in other libraries/tools/etc., is providing things like mocks/fakes for end users to be able to gauge their implementations against. The `FakeLastWriteWinsTarget` is something which could be really helpful to other developers outside of the eventual `sql-target-tools-whatever-its-being-called-this-week-repo`. Same with all of the `FakeStream` fixtures etc.\r\n\r\nNot to mention, we will most likely want a way to be able to share these things between the eventual split repos.\r\n\r\n## Testing\r\n\r\n- [x] test singer data collection, and then disable it so that we don't have so many unnecessary log statements about it failing\r\n- [x] create lightweight `FakeTarget`\r\n- [x] remove _schema only_ tests from `test_postgres` as they don't provide _much_ value and are slow\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sejvasound/live-at-alley-cat-music-club-11918", "created_at": "2018-12-27T15:06:35.000000Z", "updated_at": "2019-01-09T23:28:26.000000Z", "closed_at": "2019-01-09T23:28:26.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/77", "id": "242463501", "number": 77, "state": "closed", "title": "Housekeeping: Remove unused argument from PostgresTarget", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nExtra `LOGGER` argument still being passed into `PostgresTarget`.\r\n\r\n## Suggested Musical Pairing\r\n\r\nSeagulls.", "created_at": "2019-01-05T22:15:37.000000Z", "updated_at": "2019-01-09T15:14:48.000000Z", "closed_at": "2019-01-09T15:14:45.000000Z", "merged_at": "2019-01-09T15:14:45.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 189910455, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/77#pullrequestreview-189910455", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/77", "commit_id": "236952955f690ae863764fe3c95251315fa5e202", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "id": "242121107", "number": 76, "state": "closed", "title": "Feature/sql interface logger", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/74\r\n\r\n## Notes\r\n\r\nWhile working on this, I found a \"fun\" bug in the form of pk type changes. I addressed this in the last two commits. The first to add in some failing tests, then the next to address it. It was a very simple problem.\r\n\r\nGenerated logging:\r\n\r\n```\r\nINFO Sending version information to singer.io. To disable sending anonymous usage data, set the config parameter \"disable_collection\" to true\r\nINFO PostgresTarget created with established connection: `host=localhost port=5432 dbname=target_postgres_test user=postgres`, PostgreSQL schema: `public`\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nWARNING `STATE` Singer message type not supported\r\nINFO Writing batch with 8 records for `stargazers` with `key_properties`: `['user_id']`\r\nINFO Writing table batch schema for `('stargazers',)`\r\nINFO Table batch schema written in 9.302 millis for `('stargazers',)`\r\nINFO Writing table batch with 8 rows for `('stargazers',)`\r\nINFO Table batch with 8 rows wrote 8 rows in 14.444 millis for ('stargazers',)\r\nINFO Batch with 8 records wrote 8 rows in 24.122 millis for `stargazers`\r\nINFO Writing batch with 2 records for `assignees` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('assignees',)`\r\nINFO Table batch schema written in 7.503 millis for `('assignees',)`\r\nINFO Writing table batch with 2 rows for `('assignees',)`\r\nINFO Table batch with 2 rows wrote 2 rows in 9.543 millis for ('assignees',)\r\nINFO Batch with 2 records wrote 2 rows in 17.352 millis for `assignees`\r\nINFO Writing batch with 15 records for `issues` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('issues',)`\r\nINFO Table batch schema written in 24.439 millis for `('issues',)`\r\nINFO Writing table batch with 15 rows for `('issues',)`\r\nINFO Table batch with 15 rows wrote 15 rows in 37.854 millis for ('issues',)\r\nINFO Writing table batch schema for `('issues', 'labels')`\r\nINFO Table batch schema written in 12.895999999999999 millis for `('issues', 'labels')`\r\nINFO Writing table batch with 7 rows for `('issues', 'labels')`\r\nINFO Table batch with 7 rows wrote 7 rows in 9.774 millis for ('issues', 'labels')\r\nINFO Batch with 15 records wrote 22 rows in 86.48599999999999 millis for `issues`\r\nINFO Writing batch with 106 records for `comments` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('comments',)`\r\nINFO Table batch schema written in 18.346 millis for `('comments',)`\r\nINFO Writing table batch with 106 rows for `('comments',)`\r\nINFO Table batch with 106 rows wrote 106 rows in 95.837 millis for ('comments',)\r\nINFO Batch with 106 records wrote 106 rows in 117.637 millis for `comments`\r\nINFO Writing batch with 46 records for `pull_requests` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('pull_requests',)`\r\nINFO Table batch schema written in 10.489 millis for `('pull_requests',)`\r\nINFO Writing table batch with 46 rows for `('pull_requests',)`\r\nINFO Table batch with 46 rows wrote 46 rows in 44.181 millis for ('pull_requests',)\r\nINFO Batch with 46 records wrote 46 rows in 55.541 millis for `pull_requests`\r\nINFO Writing batch with 74 records for `review_comments` with `key_properties`: `['id']`\r\nINFO Writing table batch schema for `('review_comments',)`\r\nINFO Table batch schema written in 22.326999999999998 millis for `('review_comments',)`\r\nINFO Writing table batch with 74 rows for `('review_comments',)`\r\nINFO Table batch with 74 rows wrote 74 rows in 86.96 millis for ('review_comments',)\r\nINFO Batch with 74 records wrote 74 rows in 110.857 millis for `review_comments`\r\nINFO Writing batch with 271 records for `commits` with `key_properties`: `['sha']`\r\nINFO Writing table batch schema for `('commits',)`\r\nINFO Table batch schema written in 11.918 millis for `('commits',)`\r\nINFO Writing table batch with 271 rows for `('commits',)`\r\nINFO Table batch with 271 rows wrote 271 rows in 166.243 millis for ('commits',)\r\nINFO Writing table batch schema for `('commits', 'parents')`\r\nINFO Table batch schema written in 10.906 millis for `('commits', 'parents')`\r\nINFO Writing table batch with 331 rows for `('commits', 'parents')`\r\nINFO Table batch with 331 rows wrote 331 rows in 24.37 millis for ('commits', 'parents')\r\nINFO Batch with 271 records wrote 602 rows in 220.356 millis for `commits`\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/planned_obsolescence/everybodys-got-to-learn", "created_at": "2019-01-03T21:52:59.000000Z", "updated_at": "2019-01-04T22:09:45.000000Z", "closed_at": "2019-01-04T22:09:42.000000Z", "merged_at": "2019-01-04T22:09:42.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 189220262, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#pullrequestreview-189220262", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 189255266, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#pullrequestreview-189255266", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 189457344, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#pullrequestreview-189457344", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 189457786, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#pullrequestreview-189457786", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 189220262, "id": 245163389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTE2MzM4OQ==", "diff_hunk": "@@ -38,9 +38,12 @@ class PostgresTarget(SQLInterface):\n     # TODO: Figure out way to `SELECT` value from commands\n     IDENTIFIER_FIELD_LENGTH = 63\n \n-    def __init__(self, connection, logger, *args, postgres_schema='public', **kwargs):\n+    def __init__(self, connection, *args, postgres_schema='public', **kwargs):\n+        self.LOGGER.info(\n+            'PostgresTarget created with established connection: `{}`, PostgreSQL schema: `{}`'.format(connection.dsn,", "path": "target_postgres/postgres.py", "position": 7, "original_position": 7, "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "original_commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "user": {"login": "awm33", "id": 3846080}, "body": "I think logging the full DSN can log the password if one is used.", "created_at": "2019-01-03T23:12:41.000000Z", "updated_at": "2019-01-04T03:52:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#discussion_r245163389", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 189220262, "id": 245163695, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTE2MzY5NQ==", "diff_hunk": "@@ -1023,21 +1027,72 @@ def write_batch_helper(self, connection, root_table_name, schema, key_properties\n         :return: {'records_persisted': int,\n                   'rows_persisted': int}\n         \"\"\"\n+        batch__timing_start = datetime.datetime.now()\n         records_persisted = len(records)\n+\n+        self.LOGGER.info('Writing batch: {}'.format(", "path": "target_postgres/sql_base.py", "position": null, "original_position": 105, "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "original_commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "user": {"login": "awm33", "id": 3846080}, "body": "Rather than writing JSON, can we make this more human readable?", "created_at": "2019-01-03T23:14:22.000000Z", "updated_at": "2019-01-04T03:52:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#discussion_r245163695", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 189220262, "id": 245163842, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTE2Mzg0Mg==", "diff_hunk": "@@ -1023,21 +1027,72 @@ def write_batch_helper(self, connection, root_table_name, schema, key_properties\n         :return: {'records_persisted': int,\n                   'rows_persisted': int}\n         \"\"\"\n+        batch__timing_start = datetime.datetime.now()\n         records_persisted = len(records)\n+\n+        self.LOGGER.info('Writing batch: {}'.format(\n+            json.dumps({'root_table_name': root_table_name,\n+                        'key_properties': key_properties,\n+                        'records_count': records_persisted})\n+        ))\n+\n         rows_persisted = 0\n         for table_batch in self._get_table_batches(schema, key_properties, records):\n             table_batch['streamed_schema']['path'] = (root_table_name,) + table_batch['streamed_schema']['path']\n+\n+            table_batch__schema__timing_start = datetime.datetime.now()\n+\n+            self.LOGGER.info('Writing table batch schema: {}'.format(\n+                json.dumps({'path': table_batch['streamed_schema']['path']})\n+            ))\n+\n             remote_schema = self.upsert_table_helper(connection,\n                                                      table_batch['streamed_schema'],\n                                                      metadata)\n-            rows_persisted += self.write_table_batch(\n+\n+            self.LOGGER.info('Table batch schema written: {}'.format(", "path": "target_postgres/sql_base.py", "position": null, "original_position": 126, "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "original_commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "user": {"login": "awm33", "id": 3846080}, "body": "Dido, more human readable, metrics with tags will give an opportunity for something parable within the Singer framework", "created_at": "2019-01-03T23:15:12.000000Z", "updated_at": "2019-01-04T03:52:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#discussion_r245163842", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 189255266, "id": 245193623, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTE5MzYyMw==", "diff_hunk": "@@ -38,9 +38,12 @@ class PostgresTarget(SQLInterface):\n     # TODO: Figure out way to `SELECT` value from commands\n     IDENTIFIER_FIELD_LENGTH = 63\n \n-    def __init__(self, connection, logger, *args, postgres_schema='public', **kwargs):\n+    def __init__(self, connection, *args, postgres_schema='public', **kwargs):\n+        self.LOGGER.info(\n+            'PostgresTarget created with established connection: `{}`, PostgreSQL schema: `{}`'.format(connection.dsn,", "path": "target_postgres/postgres.py", "position": 7, "original_position": 7, "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "original_commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Read your mind: http://initd.org/psycopg/docs/connection.html#connection.dsn\r\n\r\n> dsn\r\n> . Read-only string containing the connection string used by the connection.\r\n> . If a password was specified in the connection string it will be obscured.", "created_at": "2019-01-04T03:25:41.000000Z", "updated_at": "2019-01-04T03:52:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#discussion_r245193623", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "author_association": "COLLABORATOR", "in_reply_to_id": 245163389, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 189457344, "id": 245366070, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTM2NjA3MA==", "diff_hunk": "@@ -38,9 +38,12 @@ class PostgresTarget(SQLInterface):\n     # TODO: Figure out way to `SELECT` value from commands\n     IDENTIFIER_FIELD_LENGTH = 63\n \n-    def __init__(self, connection, logger, *args, postgres_schema='public', **kwargs):\n+    def __init__(self, connection, *args, postgres_schema='public', **kwargs):\n+        self.LOGGER.info(\n+            'PostgresTarget created with established connection: `{}`, PostgreSQL schema: `{}`'.format(connection.dsn,", "path": "target_postgres/postgres.py", "position": 7, "original_position": 7, "commit_id": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "original_commit_id": "7d8120b23a04cde734a3961e8118370de0cf9fa0", "user": {"login": "awm33", "id": 3846080}, "body": "Yay!", "created_at": "2019-01-04T17:30:55.000000Z", "updated_at": "2019-01-04T17:30:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/76#discussion_r245366070", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/76", "author_association": "MEMBER", "in_reply_to_id": 245163389, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/70", "id": "240573912", "number": 70, "state": "closed", "title": "Fix/old table versions overwrite current table", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhile working on some refactoring/feature work I stumbled across an oddity in dealing with table versions. Presently, you can blow away _all_ current data if a message for `ACTIVATE_VERSION` comes across which is for an older table version.\r\n\r\nIn reading up on `ACTIVATE_VERSION` from Singer, I do _not_ think this is the intention of this message.\r\n\r\n## Suggested Musical\r\n\r\nhttps://soundcloud.com/thomyorkeofficial/suspirium", "created_at": "2018-12-21T20:46:01.000000Z", "updated_at": "2019-01-04T22:09:28.000000Z", "closed_at": "2018-12-24T15:42:23.000000Z", "merged_at": "2018-12-24T15:42:23.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 187596872, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/70#pullrequestreview-187596872", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/70", "commit_id": "f69d669b20d75ae37b518e8366fc54aa9c825c75", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/73", "id": "241178393", "number": 73, "state": "closed", "title": "Housekeeping/table metadata documentation", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nPresently our TableMetadata is...a black hole of understanding...which isn't great.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/sejvasound/live-at-alley-cat-music-club-11918", "created_at": "2018-12-27T15:50:29.000000Z", "updated_at": "2018-12-28T17:27:05.000000Z", "closed_at": "2018-12-28T17:27:03.000000Z", "merged_at": "2018-12-28T17:27:03.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 188331274, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/73#pullrequestreview-188331274", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/73", "commit_id": "363aaaaa520e6e33bcdd4a872235c680402a3e34", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/71", "id": "240610486", "number": 71, "state": "closed", "title": "Performance/singer stream retain latest records only", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhile refactoring `target-postgres` to make addition of more dialects simpler, I noticed that the Singer Stream could easily do more with versions etc., and make the interface for writing a batch of data to remote much simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/miikesnow/silvia", "created_at": "2018-12-22T02:08:48.000000Z", "updated_at": "2018-12-24T15:42:25.000000Z", "closed_at": "2018-12-24T15:42:22.000000Z", "merged_at": "2018-12-24T15:42:22.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 187597064, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/71#pullrequestreview-187597064", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/71", "commit_id": "5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/69", "id": "239596581", "number": 69, "state": "closed", "title": "Fix/remove collaborators from synced", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://circleci.com/gh/datamill-co/target-postgres/108\r\n\r\nMaster is failing due to https://github.com/singer-io/tap-github/pull/39\r\n\r\n## Testing\r\n\r\nTo test this, I ssh'ed into the mentioned CCI container above and did the following:\r\n\r\n```\r\n... install vim...\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# vim properties.json \r\n## Updated properties to selected: false for Collaborators\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# tap-github --config config.json --properties properties.json > /code/artifacts/data/tap\r\n...\r\n(venv--tap-github) root@b69bd62441ff:/code/.circleci/integration/tap-github# echo $?\r\n0\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/littledragon/lover-chanting", "created_at": "2018-12-18T19:00:26.000000Z", "updated_at": "2018-12-19T17:43:22.000000Z", "closed_at": "2018-12-19T17:43:19.000000Z", "merged_at": "2018-12-19T17:43:19.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 186652258, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/69#pullrequestreview-186652258", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/69", "commit_id": "0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "id": "239316844", "number": 68, "state": "closed", "title": "Housekeeping/cli tests", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWe had a bug a while back related to cli not having testing around it. This PR adds in a few things:\r\n\r\n- full integration testing to and from postgres\r\n- caching for CI so that build times are faster\r\n\r\n## Notes\r\n\r\nThis pr does not _actually_ test the data that has been loaded, nor the schema. That was viewed as scope creep. For the time being this just dumps data into the circle ci artifacts.\r\n\r\nThis will not work in the main fork till a project level env var of `TAP_GITHUB_TOKEN` has been added.\r\n- https://github.com/singer-io/tap-github/blame/master/README.md#L34\r\n- https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/toroymoi/still-sound", "created_at": "2018-12-17T23:24:22.000000Z", "updated_at": "2018-12-18T18:09:46.000000Z", "closed_at": "2018-12-18T18:09:42.000000Z", "merged_at": "2018-12-18T18:09:42.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 185880260, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/68#pullrequestreview-185880260", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "commit_id": "6d6d04cf3bfd610605cb71b775d3da06d948be32", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 185894587, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/68#pullrequestreview-185894587", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "commit_id": "6d6d04cf3bfd610605cb71b775d3da06d948be32", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 186199306, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/68#pullrequestreview-186199306", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "commit_id": "49d45521863bce3c6be01cc37df38780a77860ab", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 185880260, "id": 242385015, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4NTAxNQ==", "diff_hunk": "@@ -145,7 +145,7 @@ def main(config, input_stream=None):\n             host=config.get('postgres_host', 'localhost'),\n             port=config.get('postgres_port', 5432),\n             dbname=config.get('postgres_database'),\n-            user=config.get('postgres_username'),\n+            user=config.get('postgres_username', 'postgres'),", "path": "target_postgres/__init__.py", "position": null, "original_position": 5, "commit_id": "2e0722070cf66130cf3c14e00d1be69da2739af4", "original_commit_id": "6d6d04cf3bfd610605cb71b775d3da06d948be32", "user": {"login": "awm33", "id": 3846080}, "body": "This defaults to the system username in unix systems. Idk if we want to override that with postgres", "created_at": "2018-12-18T02:02:16.000000Z", "updated_at": "2018-12-18T18:07:50.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/68#discussion_r242385015", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 185894587, "id": 242396796, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM5Njc5Ng==", "diff_hunk": "@@ -145,7 +145,7 @@ def main(config, input_stream=None):\n             host=config.get('postgres_host', 'localhost'),\n             port=config.get('postgres_port', 5432),\n             dbname=config.get('postgres_database'),\n-            user=config.get('postgres_username'),\n+            user=config.get('postgres_username', 'postgres'),", "path": "target_postgres/__init__.py", "position": null, "original_position": 5, "commit_id": "2e0722070cf66130cf3c14e00d1be69da2739af4", "original_commit_id": "6d6d04cf3bfd610605cb71b775d3da06d948be32", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "That's fair. The problem I ran into here is that the docs say that the _default_ is `postgres`. I think we just need to change one of them. Don't really care which.", "created_at": "2018-12-18T03:27:30.000000Z", "updated_at": "2018-12-18T18:07:50.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/68#discussion_r242396796", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/68", "author_association": "COLLABORATOR", "in_reply_to_id": 242385015, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/64", "id": "238560460", "number": 64, "state": "closed", "title": "Fix/multiple types per column in single batch", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nFollowup to #63.\r\n\r\nMultiple column types can come over in the same batch. To handle this, we need a different paradigm for identifying columns (same as how we identified tables), ie, use the _path_ to the column.\r\n\r\nEasiest to review commit by commit.\r\n\r\n## Suggested Musical Pairing\r\n\r\nCoffee shop.", "created_at": "2018-12-13T22:59:43.000000Z", "updated_at": "2018-12-14T17:36:03.000000Z", "closed_at": "2018-12-14T17:36:00.000000Z", "merged_at": "2018-12-14T17:36:00.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 185203510, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/64#pullrequestreview-185203510", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/64", "commit_id": "19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "id": "237030946", "number": 63, "state": "closed", "title": "Fix/nested tables", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/7\r\nhttps://github.com/datamill-co/target-postgres/issues/42\r\nhttps://github.com/datamill-co/target-postgres/issues/58\r\nhttps://github.com/datamill-co/target-postgres/issues/61\r\n\r\nNested table issues. Each known failing problem has been added as a commit.\r\n\r\n## Notes\r\n\r\nThis is pseudo-branched off of https://github.com/datamill-co/target-postgres/pull/60 due to needing more complex `db_cleanup` logic.\r\n\r\nAs such there _is_ a failing test kicking around in here which is _not_ related to the problems this pr will _ultimately_ be addressing.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/phoenix/heatwave", "created_at": "2018-12-08T00:44:47.000000Z", "updated_at": "2018-12-14T16:55:29.000000Z", "closed_at": "2018-12-14T16:55:16.000000Z", "merged_at": "2018-12-14T16:55:16.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183764670, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#pullrequestreview-183764670", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "commit_id": "d125f6dce07d22ffbb224030ac4ec6fbfa708688", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183960259, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#pullrequestreview-183960259", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "commit_id": "57fd4f826279a1881fef3fec4c1874277b6d0626", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183960634, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#pullrequestreview-183960634", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "commit_id": "57fd4f826279a1881fef3fec4c1874277b6d0626", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 185187159, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#pullrequestreview-185187159", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "commit_id": "37f38150fc9a7008b77e2da420420dea1187e235", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183764670, "id": 240679249, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY3OTI0OQ==", "diff_hunk": "@@ -4,6 +4,7 @@\n from jsonschema import Draft4Validator\n from jsonschema.exceptions import SchemaError\n \n+NULL = 'null'", "path": "target_postgres/json_schema.py", "position": null, "original_position": 4, "commit_id": "37f38150fc9a7008b77e2da420420dea1187e235", "original_commit_id": "d125f6dce07d22ffbb224030ac4ec6fbfa708688", "user": {"login": "awm33", "id": 3846080}, "body": "Should we create one for each JSON Schema type we use?", "created_at": "2018-12-11T16:15:08.000000Z", "updated_at": "2018-12-12T23:41:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#discussion_r240679249", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183764670, "id": 240680406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY4MDQwNg==", "diff_hunk": "@@ -0,0 +1,57 @@\n+import json\n+\n+import psycopg2\n+import psycopg2.extras\n+import pytest\n+\n+from fixtures import CONFIG, db_cleanup, TEST_DB\n+from target_postgres import main\n+\n+\n+def assert_tables_equal(cursor, expected_table_names):\n+    cursor.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\")\n+    tables = []\n+    for table in cursor.fetchall():\n+        tables.append(table[0])\n+\n+    assert (not tables and not expected_table_names) \\\n+           or set(tables) == expected_table_names\n+\n+\n+def assert_columns_equal(cursor, table_name, expected_column_tuples):\n+    cursor.execute(\"SELECT column_name, data_type, is_nullable FROM information_schema.columns \" + \\\n+                   \"WHERE table_schema = 'public' and table_name = '{}';\".format(\n+                       table_name))\n+    columns = cursor.fetchall()\n+\n+    assert (not columns and not expected_column_tuples) \\\n+           or set(columns) == expected_column_tuples\n+\n+\n+class BigCommerceStream:", "path": "tests/test_sandbox.py", "position": 31, "original_position": 31, "commit_id": "37f38150fc9a7008b77e2da420420dea1187e235", "original_commit_id": "d125f6dce07d22ffbb224030ac4ec6fbfa708688", "user": {"login": "awm33", "id": 3846080}, "body": "Where's the generator for this?", "created_at": "2018-12-11T16:17:48.000000Z", "updated_at": "2018-12-12T23:41:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#discussion_r240680406", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183960259, "id": 240837288, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDgzNzI4OA==", "diff_hunk": "@@ -4,6 +4,7 @@\n from jsonschema import Draft4Validator\n from jsonschema.exceptions import SchemaError\n \n+NULL = 'null'", "path": "target_postgres/json_schema.py", "position": null, "original_position": 4, "commit_id": "37f38150fc9a7008b77e2da420420dea1187e235", "original_commit_id": "d125f6dce07d22ffbb224030ac4ec6fbfa708688", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Prolly. I was doing the minimal change first. I think there's reason to do this regardless though", "created_at": "2018-12-11T23:55:20.000000Z", "updated_at": "2018-12-12T23:41:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#discussion_r240837288", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "author_association": "COLLABORATOR", "in_reply_to_id": 240679249, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183960634, "id": 240837602, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDgzNzYwMg==", "diff_hunk": "@@ -0,0 +1,57 @@\n+import json\n+\n+import psycopg2\n+import psycopg2.extras\n+import pytest\n+\n+from fixtures import CONFIG, db_cleanup, TEST_DB\n+from target_postgres import main\n+\n+\n+def assert_tables_equal(cursor, expected_table_names):\n+    cursor.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\")\n+    tables = []\n+    for table in cursor.fetchall():\n+        tables.append(table[0])\n+\n+    assert (not tables and not expected_table_names) \\\n+           or set(tables) == expected_table_names\n+\n+\n+def assert_columns_equal(cursor, table_name, expected_column_tuples):\n+    cursor.execute(\"SELECT column_name, data_type, is_nullable FROM information_schema.columns \" + \\\n+                   \"WHERE table_schema = 'public' and table_name = '{}';\".format(\n+                       table_name))\n+    columns = cursor.fetchall()\n+\n+    assert (not columns and not expected_column_tuples) \\\n+           or set(columns) == expected_column_tuples\n+\n+\n+class BigCommerceStream:", "path": "tests/test_sandbox.py", "position": 31, "original_position": 31, "commit_id": "37f38150fc9a7008b77e2da420420dea1187e235", "original_commit_id": "d125f6dce07d22ffbb224030ac4ec6fbfa708688", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "See our Slack convo. This just iterates over a real world stream which was snagged for testing etc.\r\n\r\nI think this testing file should be reserved for cleansed real world data streams which we are only aiming to replay. The other testing files I think should have generators etc. which try to exercise the other various weirdness.", "created_at": "2018-12-11T23:56:47.000000Z", "updated_at": "2018-12-12T23:41:46.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/63#discussion_r240837602", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/63", "author_association": "COLLABORATOR", "in_reply_to_id": 240680406, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/59", "id": "236622197", "number": 59, "state": "closed", "title": "Feature/table name normalization  non colliding", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\n#57 \r\n\r\nHandles table name normalization which _does not_ result in collisions.\r\n\r\nEasily reviewed commit by commit.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/limes-3/saucin-w-h-e-r-b", "created_at": "2018-12-06T18:06:43.000000Z", "updated_at": "2018-12-12T22:41:11.000000Z", "closed_at": "2018-12-07T22:01:51.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/57", "id": "235985578", "number": 57, "state": "closed", "title": "Feature/table name normalization", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# WIP", "created_at": "2018-12-04T22:43:02.000000Z", "updated_at": "2018-12-12T22:39:21.000000Z", "closed_at": "2018-12-07T22:31:02.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:48.459727Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "id": "237006749", "number": 60, "state": "closed", "title": "Feature/table name normalization", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/57\r\n\r\nHandles table name normalization:\r\n- invalid names get mapped to valid ones\r\n  - handles truncation\r\n- name collisions are dealt with by:\r\n  - truncating\r\n  - appending an incrementing number till no collision is detected\r\n\r\nAfter a table has been mapped, it continues to persist data to the mapped name.\r\n\r\nAll data is stored on the `root_table` so that `activate_version` remains simple. This can easily be documented in `RATIONALIZATIONS.md`.\r\n\r\n## Notes\r\n\r\nDOES NOT handle root table name mapping, but does put in place validation to make sure root table name is able to be persisted.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/limes-3/saucin-w-h-e-r-b", "created_at": "2018-12-07T22:05:17.000000Z", "updated_at": "2018-12-12T20:03:17.000000Z", "closed_at": "2018-12-12T20:03:11.000000Z", "merged_at": "2018-12-12T20:03:11.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183763145, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-183763145", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183779578, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-183779578", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183781465, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-183781465", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183977650, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-183977650", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 183977776, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-183977776", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 184370355, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#pullrequestreview-184370355", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183763145, "id": 240678020, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY3ODAyMA==", "diff_hunk": "@@ -70,6 +72,7 @@ def write_batch(self, stream_buffer):\n                     versions.add(record_version)\n \n                 current_table_schema = self.get_table_schema(cur,\n+                                                             (stream_buffer.stream,),", "path": "target_postgres/postgres.py", "position": 13, "original_position": 13, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann You can use `[ ]` too for list concatenation, if you want to avoid the dangling `,`", "created_at": "2018-12-11T16:12:32.000000Z", "updated_at": "2018-12-11T16:13:40.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r240678020", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183763145, "id": 240678327, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY3ODMyNw==", "diff_hunk": "@@ -402,6 +394,76 @@ def _canonicalize_identifier(self, name, schema, existing_columns_raw_names, exi\n \n         return canonicalized_column_name, canonicalized_typed_column_name\n \n+    def add_table(self, connection, schema, metadata):\n+        \"\"\"\n+        Create the remote table schema.\n+\n+        :param connection: remote connection, type left to be determined by implementing class\n+        :param schema: TABLE_SCHEMA(local) definition for table to be created\n+        :param metadata: additional metadata needed by implementing class\n+        :return: None\n+        \"\"\"\n+        raise NotImplementedError('`add_table` not implemented.')\n+\n+    def add_key_properties(self, connection, table_name, key_properties):\n+        \"\"\"\n+\n+        :param connection: remote connection, type left to be determined by implementing class\n+        :param table_name: string\n+        :param key_properties: [string, ...]\n+        :return: None\n+        \"\"\"\n+        raise NotImplementedError('`add_key_properties` not implemented.')\n+\n+    def add_table_mapping_helper(self, from_path, table_mappings):\n+        \"\"\"\n+\n+        :param from_path:\n+        :param table_mappings:\n+        :return: (boolean, string)\n+        \"\"\"\n+        from_to = dict([(tuple(mapping['from']), mapping['to']) for mapping in table_mappings])\n+\n+        ## MAPPING EXISTS\n+        if from_path in from_to:\n+            return {'exists': True, 'to': from_to[from_path]}\n+\n+        to_from = dict([(v, k) for k, v in from_to.items()])\n+\n+        name = SEPARATOR.join(from_path)\n+\n+        raw_canonicalized_name = self.canonicalize_identifier(name)\n+        canonicalized_name = raw_canonicalized_name[:self.IDENTIFIER_FIELD_LENGTH]\n+\n+        i = 0\n+        ## NAME COLLISION\n+        while canonicalized_name in to_from:\n+            i += 1\n+            suffix = SEPARATOR + str(i)\n+            canonicalized_name = raw_canonicalized_name[\n+                                 :self.IDENTIFIER_FIELD_LENGTH - len(suffix)] + suffix\n+\n+            # TODO: logger warn\n+            ##raise Exception(", "path": "target_postgres/sql_base.py", "position": 302, "original_position": 302, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "awm33", "id": 3846080}, "body": "Should this be commented out?", "created_at": "2018-12-11T16:13:10.000000Z", "updated_at": "2018-12-11T16:13:40.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r240678327", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183779578, "id": 240691328, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY5MTMyOA==", "diff_hunk": "@@ -70,6 +72,7 @@ def write_batch(self, stream_buffer):\n                     versions.add(record_version)\n \n                 current_table_schema = self.get_table_schema(cur,\n+                                                             (stream_buffer.stream,),", "path": "target_postgres/postgres.py", "position": 13, "original_position": 13, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "@awm33 nope, tuples brah. In Python if you wanna create a tuple you just do `(val,)`.\r\n\r\nI'm using them like this here to avoid weirdness as we do things further downstream. ie, if we use tuples for these operations, things _should_ behave nicely and will prevent the implementing class from accidentally modifying something.", "created_at": "2018-12-11T16:39:19.000000Z", "updated_at": "2018-12-11T16:39:19.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r240691328", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "COLLABORATOR", "in_reply_to_id": 240678020, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183781465, "id": 240692769, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDY5Mjc2OQ==", "diff_hunk": "@@ -402,6 +394,76 @@ def _canonicalize_identifier(self, name, schema, existing_columns_raw_names, exi\n \n         return canonicalized_column_name, canonicalized_typed_column_name\n \n+    def add_table(self, connection, schema, metadata):\n+        \"\"\"\n+        Create the remote table schema.\n+\n+        :param connection: remote connection, type left to be determined by implementing class\n+        :param schema: TABLE_SCHEMA(local) definition for table to be created\n+        :param metadata: additional metadata needed by implementing class\n+        :return: None\n+        \"\"\"\n+        raise NotImplementedError('`add_table` not implemented.')\n+\n+    def add_key_properties(self, connection, table_name, key_properties):\n+        \"\"\"\n+\n+        :param connection: remote connection, type left to be determined by implementing class\n+        :param table_name: string\n+        :param key_properties: [string, ...]\n+        :return: None\n+        \"\"\"\n+        raise NotImplementedError('`add_key_properties` not implemented.')\n+\n+    def add_table_mapping_helper(self, from_path, table_mappings):\n+        \"\"\"\n+\n+        :param from_path:\n+        :param table_mappings:\n+        :return: (boolean, string)\n+        \"\"\"\n+        from_to = dict([(tuple(mapping['from']), mapping['to']) for mapping in table_mappings])\n+\n+        ## MAPPING EXISTS\n+        if from_path in from_to:\n+            return {'exists': True, 'to': from_to[from_path]}\n+\n+        to_from = dict([(v, k) for k, v in from_to.items()])\n+\n+        name = SEPARATOR.join(from_path)\n+\n+        raw_canonicalized_name = self.canonicalize_identifier(name)\n+        canonicalized_name = raw_canonicalized_name[:self.IDENTIFIER_FIELD_LENGTH]\n+\n+        i = 0\n+        ## NAME COLLISION\n+        while canonicalized_name in to_from:\n+            i += 1\n+            suffix = SEPARATOR + str(i)\n+            canonicalized_name = raw_canonicalized_name[\n+                                 :self.IDENTIFIER_FIELD_LENGTH - len(suffix)] + suffix\n+\n+            # TODO: logger warn\n+            ##raise Exception(", "path": "target_postgres/sql_base.py", "position": 302, "original_position": 302, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Yup. So I think a future refactor (which I have held off on just because it's a #nicetohave) is to move the logger down into `SQLInterface`. Once we do that, we can put back in these logger warns etc.\r\n\r\nFor this specifically, I think it'd be worthwhile to `warn` the user that a collision has been detected and that we're mucking about with things. The exception that _used_ to be thrown has all of the worthwhile information. It makes more sense in the commit history view of things, but yeah, the TODO is still useful, though I think it'd be more worthwhile as a separate issue etc.", "created_at": "2018-12-11T16:42:20.000000Z", "updated_at": "2018-12-11T16:42:25.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r240692769", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "COLLABORATOR", "in_reply_to_id": 240678327, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 183977650, "id": 240852190, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDg1MjE5MA==", "diff_hunk": "@@ -70,6 +72,7 @@ def write_batch(self, stream_buffer):\n                     versions.add(record_version)\n \n                 current_table_schema = self.get_table_schema(cur,\n+                                                             (stream_buffer.stream,),", "path": "target_postgres/postgres.py", "position": 13, "original_position": 13, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann Does this have to do with mutability of a tuple vs list?", "created_at": "2018-12-12T01:14:45.000000Z", "updated_at": "2018-12-12T01:14:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r240852190", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "MEMBER", "in_reply_to_id": 240678020, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 184370355, "id": 241166004, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTE2NjAwNA==", "diff_hunk": "@@ -70,6 +72,7 @@ def write_batch(self, stream_buffer):\n                     versions.add(record_version)\n \n                 current_table_schema = self.get_table_schema(cur,\n+                                                             (stream_buffer.stream,),", "path": "target_postgres/postgres.py", "position": 13, "original_position": 13, "commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "original_commit_id": "0bc47903a5d76b0cc1488444efc699928a803685", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Yeah, it's that and then the comparison of tuples vs lists is much more straightforward. Either way, we can refactor this in the future if folks find this to be far too confusing etc.", "created_at": "2018-12-12T20:03:04.000000Z", "updated_at": "2018-12-12T20:03:04.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/60#discussion_r241166004", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/60", "author_association": "COLLABORATOR", "in_reply_to_id": 240678020, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "id": "235905545", "number": 55, "state": "closed", "title": "Feature: init DECISIONS.md", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWhile some of these decisions around more complicated functionality in `target-postgres`/`target-sql` are fresh, write em down.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/of-montreal/oslo-in-the-summertime", "created_at": "2018-12-04T18:00:51.000000Z", "updated_at": "2018-12-04T21:17:20.000000Z", "closed_at": "2018-12-04T21:17:17.000000Z", "merged_at": "2018-12-04T21:17:17.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 181432785, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#pullrequestreview-181432785", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 181473301, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#pullrequestreview-181473301", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238801086, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwMTA4Ng==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements", "path": "DECISIONS.md", "position": 24, "original_position": 22, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "Maybe define `non-literal (ie, compositional) elements` more and give examples? Same may call them basic types, scalar values, etc.", "created_at": "2018-12-04T19:17:17.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238801086", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238802634, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwMjYzNA==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization", "path": "DECISIONS.md", "position": null, "original_position": 23, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "The nature of a relational database is to create a normalized schema of many related tables. It's the best SQL querying experience comes from data that is broken down into related tables. In a way, we are normalizing (even re-normalizing) the structures.\r\n\r\nData warehouses do like denormalized structures while operational databases prefer normalized structures. Here we normalize the structure so the use can choose what to do with the normalized raw data. Also it's easy to access and transform later than JSON blobs.", "created_at": "2018-12-04T19:21:31.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238802634", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238803514, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwMzUxNA==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables", "path": "DECISIONS.md", "position": null, "original_position": 24, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "Maybe add some small examples of that unpacking below?", "created_at": "2018-12-04T19:23:44.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238803514", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238804029, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNDAyOQ==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.", "path": "DECISIONS.md", "position": null, "original_position": 28, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "The root reason why is end user experience. If we were to place them as JSON/JSONB fields or text blobs, or even through most of them away in the case of redshift. It would be a poor user experience for most users.", "created_at": "2018-12-04T19:25:02.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238804029", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238804717, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNDcxNw==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.\n+\n+### Column Type Mismatch\n+\n+#### What\n+\n+- A field has been streamed to the remote target with type `integer`", "path": "DECISIONS.md", "position": null, "original_position": 34, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "Love the story approach \ud83d\udc4d . Maybe numbers could be used to make it more obvious it's sequential?", "created_at": "2018-12-04T19:26:56.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238804717", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238805106, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNTEwNg==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.\n+\n+### Column Type Mismatch\n+\n+#### What\n+\n+- A field has been streamed to the remote target with type `integer`\n+- A new field with the _same raw name_ as the remote column has been streamed but has type `BAR`\n+- Data of type `BAR` cannot be placed into a column of type `boolean`\n+- `target-sql` has tooling which will:\n+  - rename the original column to `original_field_name__i`\n+  - make the renamed column `nullable`\n+  - create a new column of name `original_field_name__b`\n+  - stream new data to `original_field_name__b`\n+  - (to see a full list of type suffixes, please see: [`json_schema._shorthand_mappings`](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/json_schema.py#L283))", "path": "DECISIONS.md", "position": null, "original_position": 42, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "May want to use the most recent commit hash in the URL, otherwise the line number will shift over time.", "created_at": "2018-12-04T19:28:05.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238805106", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238805422, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNTQyMg==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.\n+\n+### Column Type Mismatch\n+\n+#### What\n+\n+- A field has been streamed to the remote target with type `integer`\n+- A new field with the _same raw name_ as the remote column has been streamed but has type `BAR`\n+- Data of type `BAR` cannot be placed into a column of type `boolean`\n+- `target-sql` has tooling which will:\n+  - rename the original column to `original_field_name__i`\n+  - make the renamed column `nullable`\n+  - create a new column of name `original_field_name__b`\n+  - stream new data to `original_field_name__b`\n+  - (to see a full list of type suffixes, please see: [`json_schema._shorthand_mappings`](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/json_schema.py#L283))\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+By renaming and migrating the column we:\n+\n+- make the resulting structure in the database the same no matter whether we upload column `integer` _then_ column `boolean` or vice versa.\n+- users learn of dependent views/columns blocking a type change _early_\n+\n+### Column Name Collision\n+\n+#### What\n+\n+- When attempting to `upsert_table`, `SQLInterface` has to handle name", "path": "DECISIONS.md", "position": null, "original_position": 59, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "..collisions. ", "created_at": "2018-12-04T19:28:58.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238805422", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238806604, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNjYwNA==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.\n+\n+### Column Type Mismatch\n+\n+#### What\n+\n+- A field has been streamed to the remote target with type `integer`\n+- A new field with the _same raw name_ as the remote column has been streamed but has type `BAR`\n+- Data of type `BAR` cannot be placed into a column of type `boolean`\n+- `target-sql` has tooling which will:\n+  - rename the original column to `original_field_name__i`\n+  - make the renamed column `nullable`\n+  - create a new column of name `original_field_name__b`\n+  - stream new data to `original_field_name__b`\n+  - (to see a full list of type suffixes, please see: [`json_schema._shorthand_mappings`](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/json_schema.py#L283))\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+By renaming and migrating the column we:\n+\n+- make the resulting structure in the database the same no matter whether we upload column `integer` _then_ column `boolean` or vice versa.\n+- users learn of dependent views/columns blocking a type change _early_\n+\n+### Column Name Collision\n+\n+#### What\n+\n+- When attempting to `upsert_table`, `SQLInterface` has to handle name\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+\n+\n+### Column Name Length\n+\n+#### What\n+\n+- `SQLInterface` provides a single field called `IDENTIFIER_FIELD_LENGTH` which is to be overridden by the implementing class\n+- Any column which is found to be excess of `IDENTIFIER_FIELD_LENGTH` is truncated to be no longer than `IDENTIFIER_FIELD_LENGTH`\n+- All `collision` and `type` information is preserved in the truncation\n+  - ie, any values which are suffixed onto the name as `__...`\n+- All original field/column names are preserved as a `column_mapping`\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+Most (all?) SQL targets we have encountered have length restrictions for identifiers\n+in their schema. Since arbitrary JSON _does_ not have this same restriction, we needed\n+a best effort mechanism for handling names which were either auto-generated and are\n+too long, or user input fields which physically cannot fit into the remote target.\n+\n+As such, we chose to take the simplest method here for clarity. ie, truncate the\n+original/generated name, and then proceed with collision support as normal.\n+\n+The implementing class is tasked with providing `canonicalize_identifier`, a method\n+which when called is expected to _only_ transform a string identifier into another\n+string identifier which contains only characters which are allowed by the remote target.\n+\n+## Data De-nesting\n+\n+### Objects\n+\n+#### What\n+\n+- `Objects` are unpacked into their parent table.\n+- The unpacked fields are prefixed with the name of the `field` which originally contained the object.\n+\n+#### Why\n+\n+This approach is inspired by what Stitch Data takes with `object` de-nesting.", "path": "DECISIONS.md", "position": null, "original_position": 108, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "More of a root why, accessing nested objects as first class fields provides a better user experience.", "created_at": "2018-12-04T19:31:56.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238806604", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 181432785, "id": 238806850, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODgwNjg1MA==", "diff_hunk": "@@ -0,0 +1,119 @@\n+# Decisions\n+\n+This document is intended to provide clarity on many of the decisions/rationalizations\n+which exist inside of [Datamill's](https://datamill.co/) Target SQL project\n+for [Singer](https://singer.io).\n+\n+The guiding principles we try to adhere to herein as far as _how_ to reach a\n+conclusion are:\n+\n+1. When possible, make the resulting data/schema in the remote target consistent, no matter the ordering of potential messages\n+  - ie, if our decision would result in a random schema being produced in the remote target for no reasonable benefit, this is in violation\n+1. Do right by the common _majority_ of users\n+1. Make a best effort to prevent a user from having to intervene\n+1. Use [Stitch\u2019s offering and documentation](https://www.stitchdata.com/docs) as best practice guidance\n+\n+## Schema\n+\n+### De-nesting\n+\n+#### What\n+\n+- [JSON Schema](https://json-schema.org/) allows for complex schemas which have non-literal (ie, compositional) elements\n+- Standard SQL does not support compositional elements, but rather demands something closer to full denormalization\n+- To overcome this, `target-sql` provides tooling which unpacks json `objects` into their parent record, and json `arrays` as sub tables\n+\n+#### Why\n+\n+This is the same approach that Stitch Data takes with `array` de-nesting.\n+\n+### Column Type Mismatch\n+\n+#### What\n+\n+- A field has been streamed to the remote target with type `integer`\n+- A new field with the _same raw name_ as the remote column has been streamed but has type `BAR`\n+- Data of type `BAR` cannot be placed into a column of type `boolean`\n+- `target-sql` has tooling which will:\n+  - rename the original column to `original_field_name__i`\n+  - make the renamed column `nullable`\n+  - create a new column of name `original_field_name__b`\n+  - stream new data to `original_field_name__b`\n+  - (to see a full list of type suffixes, please see: [`json_schema._shorthand_mappings`](https://github.com/datamill-co/target-postgres/blob/master/target_postgres/json_schema.py#L283))\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+By renaming and migrating the column we:\n+\n+- make the resulting structure in the database the same no matter whether we upload column `integer` _then_ column `boolean` or vice versa.\n+- users learn of dependent views/columns blocking a type change _early_\n+\n+### Column Name Collision\n+\n+#### What\n+\n+- When attempting to `upsert_table`, `SQLInterface` has to handle name\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+\n+\n+### Column Name Length\n+\n+#### What\n+\n+- `SQLInterface` provides a single field called `IDENTIFIER_FIELD_LENGTH` which is to be overridden by the implementing class\n+- Any column which is found to be excess of `IDENTIFIER_FIELD_LENGTH` is truncated to be no longer than `IDENTIFIER_FIELD_LENGTH`\n+- All `collision` and `type` information is preserved in the truncation\n+  - ie, any values which are suffixed onto the name as `__...`\n+- All original field/column names are preserved as a `column_mapping`\n+\n+#### Why\n+\n+***TL;DR:*** Instead of throwing a hard error and forcing users to do some manual\n+transformation _before_ streaming data through `target-sql`, we chose a \"best\n+effort\" approach to resolving the underlying error.\n+\n+Most (all?) SQL targets we have encountered have length restrictions for identifiers\n+in their schema. Since arbitrary JSON _does_ not have this same restriction, we needed\n+a best effort mechanism for handling names which were either auto-generated and are\n+too long, or user input fields which physically cannot fit into the remote target.\n+\n+As such, we chose to take the simplest method here for clarity. ie, truncate the\n+original/generated name, and then proceed with collision support as normal.\n+\n+The implementing class is tasked with providing `canonicalize_identifier`, a method\n+which when called is expected to _only_ transform a string identifier into another\n+string identifier which contains only characters which are allowed by the remote target.\n+\n+## Data De-nesting\n+\n+### Objects\n+\n+#### What\n+\n+- `Objects` are unpacked into their parent table.\n+- The unpacked fields are prefixed with the name of the `field` which originally contained the object.\n+\n+#### Why\n+\n+This approach is inspired by what Stitch Data takes with `object` de-nesting.\n+\n+### Arrays\n+\n+#### What\n+\n+- `Arrays` are unrolled as individual rows into a child table\n+- The table name is constructed as `parent_table__field`\n+\n+#### Why\n+\n+This approach is inspired by what Stitch Data takes with `array` de-nesting.", "path": "DECISIONS.md", "position": null, "original_position": 119, "commit_id": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "original_commit_id": "3ab353962e5fcdf0fc85adec733273367b36c307", "user": {"login": "awm33", "id": 3846080}, "body": "More of a root why, accessing an array/list of nested types as a separate table provides a better user experience.", "created_at": "2018-12-04T19:32:37.000000Z", "updated_at": "2018-12-04T20:28:41.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/55#discussion_r238806850", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/55", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/8", "id": "227434925", "number": 8, "state": "closed", "title": "Housekeeping/ci setup", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nNo CI was setup for Target Postgres. As this is typically the single biggest thing one can do (aside from having tests in the first place) to improve speed long term, I used this as my first step into understanding the code base better.\r\n\r\nhttps://circleci.com/gh/AlexanderMann/target-postgres/25 is the corresponding successful build in CCI.\r\n\r\n## Notes\r\nPLEASE NOTE: This will require work from an admin (or maybe just a member?) in the Data Mill org to actually go in to CircleCI projects and start building.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/sylvanesso/parad-w-m-e ", "created_at": "2018-10-31T20:42:02.000000Z", "updated_at": "2018-12-04T20:42:09.000000Z", "closed_at": "2018-10-31T20:53:51.000000Z", "merged_at": "2018-10-31T20:53:51.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 170465950, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/8#pullrequestreview-170465950", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/8", "commit_id": "3ecfd30c94e57e5c5285dde726ae280d542ebc78", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "id": "229477615", "number": 23, "state": "closed", "title": "Feature/validate json schema", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/20\r\n\r\nThe user experience for a broken JSON Schema is fairly poor. This PR seeks to improve the overall experience for the end user by detecting broken/invalid schemas and aborting immediately instead of trying to swallow exceptions etc.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/talkingheads/stay-up-late-remastered?in=talkingheads/sets/once-in-a-lifetime-the-talking", "created_at": "2018-11-08T19:13:09.000000Z", "updated_at": "2018-12-04T20:42:04.000000Z", "closed_at": "2018-11-12T17:49:07.000000Z", "merged_at": "2018-11-12T17:49:07.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174004446, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#pullrequestreview-174004446", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174013259, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#pullrequestreview-174013259", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174020647, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#pullrequestreview-174020647", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174021004, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#pullrequestreview-174021004", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174004446, "id": 232740575, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc0MDU3NQ==", "diff_hunk": "@@ -1,5 +1,14 @@\n import re\n \n+from jsonschema import Draft4Validator\n+from jsonschema.exceptions import SchemaError\n+\n+\n+class Error(Exception):", "path": "target_postgres/json_schema.py", "position": null, "original_position": 7, "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "original_commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "user": {"login": "awm33", "id": 3846080}, "body": "Can we call this something like `JSONSchemaException`? `Error` is very generic.", "created_at": "2018-11-12T17:07:38.000000Z", "updated_at": "2018-11-12T17:35:27.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#discussion_r232740575", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174004446, "id": 232741163, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc0MTE2Mw==", "diff_hunk": "@@ -99,7 +108,7 @@ def _helper_simplify(root_schema, child_schema):\n         try:\n             return _helper_simplify(root_schema, get_ref(root_schema, child_schema['$ref']))\n         except RecursionError:\n-            raise Exception('Target `$ref` \"{}\" is recursive'.format(get_ref(root_schema, child_schema['$ref'])))\n+            raise Error('Target `$ref` \"{}\" is recursive'.format(get_ref(root_schema, child_schema['$ref'])))", "path": "target_postgres/json_schema.py", "position": null, "original_position": 38, "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "original_commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "user": {"login": "awm33", "id": 3846080}, "body": "Given the name of the repo/project, the word \"Target\" here may be confusing. Maybe '`$ref` path \"{}\" is recursive'?", "created_at": "2018-11-12T17:09:32.000000Z", "updated_at": "2018-11-12T17:35:27.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#discussion_r232741163", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174013259, "id": 232747626, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc0NzYyNg==", "diff_hunk": "@@ -1,5 +1,14 @@\n import re\n \n+from jsonschema import Draft4Validator\n+from jsonschema.exceptions import SchemaError\n+\n+\n+class Error(Exception):", "path": "target_postgres/json_schema.py", "position": null, "original_position": 7, "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "original_commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "I'm up for that. I tend to prefer not double namespacing vars (ie, the namespace is _already_ `json_schema` so to get to this you already have to do `json_schema.Error`).\r\n\r\nThis will be a common pattern in the onslaught of prs I have up, I'll tidy this up.", "created_at": "2018-11-12T17:28:59.000000Z", "updated_at": "2018-11-12T17:35:27.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#discussion_r232747626", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "author_association": "COLLABORATOR", "in_reply_to_id": 232740575, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174020647, "id": 232753726, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc1MzcyNg==", "diff_hunk": "@@ -1,5 +1,14 @@\n import re\n \n+from jsonschema import Draft4Validator\n+from jsonschema.exceptions import SchemaError\n+\n+\n+class Error(Exception):", "path": "target_postgres/json_schema.py", "position": null, "original_position": 7, "commit_id": "b6dc798353ad79a135a45bcd89f617b9541f593b", "original_commit_id": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann It's just more common in python to have a distinct name, it also makes the stack trace clearer", "created_at": "2018-11-12T17:47:49.000000Z", "updated_at": "2018-11-12T17:47:50.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/23#discussion_r232753726", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/23", "author_association": "MEMBER", "in_reply_to_id": 232740575, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/49", "id": "235682163", "number": 49, "state": "closed", "title": "Feature/column name truncation", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nWIP", "created_at": "2018-12-04T05:12:29.000000Z", "updated_at": "2018-12-04T20:42:02.000000Z", "closed_at": "2018-12-04T16:41:10.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/56", "id": "235924530", "number": 56, "state": "closed", "title": "Feature/column name normalization  collision", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\n#51 \r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lcd-soundsystem/north-american-scum", "created_at": "2018-12-04T19:05:35.000000Z", "updated_at": "2018-12-04T20:41:59.000000Z", "closed_at": "2018-12-04T19:39:56.000000Z", "merged_at": "2018-12-04T19:39:56.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 181440552, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/56#pullrequestreview-181440552", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/56", "commit_id": "ccbd56c3332f211247c613ba45d4e62610069aa7", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/54", "id": "235880310", "number": 54, "state": "closed", "title": "Feature/column name normalization  collision", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\n#51 \r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/lcd-soundsystem/north-american-scum", "created_at": "2018-12-04T16:44:29.000000Z", "updated_at": "2018-12-04T19:04:48.000000Z", "closed_at": "2018-12-04T19:04:48.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/53", "id": "235880006", "number": 53, "state": "closed", "title": "Feature/column name normalization  length", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/50\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/littledragon/pretty-girls", "created_at": "2018-12-04T16:43:40.000000Z", "updated_at": "2018-12-04T19:04:27.000000Z", "closed_at": "2018-12-04T19:04:24.000000Z", "merged_at": "2018-12-04T19:04:23.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 181423305, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/53#pullrequestreview-181423305", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/53", "commit_id": "5735a66be7a389c4eaf71ab9431f6087862fb80e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/48", "id": "235115742", "number": 48, "state": "closed", "title": "Refactor/sql base merge schemas", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIn introducing logic into `merge_put_schemas`, it's become clear that the implementing classes can be dramatically simpler.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/orionsun/test-experimental-tape", "created_at": "2018-11-30T21:08:52.000000Z", "updated_at": "2018-12-04T19:04:10.000000Z", "closed_at": "2018-12-04T19:04:04.000000Z", "merged_at": "2018-12-04T19:04:04.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 181420949, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/48#pullrequestreview-181420949", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/48", "commit_id": "c4166199111158bc1cce75da4c6256b6183ccf2c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "id": "234096655", "number": 46, "state": "closed", "title": "Feature/invalid identifier names", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/18\r\n\r\nWhen we get an identifier for a column/table which is invalid for PostgreSQL we presently don't do anything intelligent and simply try to persist it to the remote target.\r\n\r\nThis PR aims to do a few things:\r\n- alert users with a fine grained description of the problem by both detecting when there could be a problem and also by detecting when a problem has occurred in the remote and providing details\r\n- map invalid _column_ names to valid names by:\r\n  - lowercasing all names\r\n  - stripping invalid characters and replacing them with `_`\r\n- start building out the usage of `mappings` and exploring commonality of this mechanism\r\n  - my _guess_ is that we will want to make this a universal `SQLInterface` type thing, but for the time being we can leave this alone and keep this a feature specific pr\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/wmi/metronomy-04-love-letters-2?in=metronomy/sets/love-letters-19", "created_at": "2018-11-27T23:25:00.000000Z", "updated_at": "2018-11-30T21:07:10.000000Z", "closed_at": "2018-11-30T21:07:04.000000Z", "merged_at": "2018-11-30T21:07:04.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 180097345, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#pullrequestreview-180097345", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 180354746, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#pullrequestreview-180354746", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "commit_id": "49de4ecf01e443153ed7b32bac0a5df5277baa0d", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 180357111, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#pullrequestreview-180357111", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 180425002, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#pullrequestreview-180425002", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "commit_id": "afadfc535afd5a84f0801b69117c1dd8944f25f0", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 180097345, "id": 237724971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzcyNDk3MQ==", "diff_hunk": "@@ -105,10 +104,18 @@ _The above is copied from the [current list of versions](https://www.postgresql.\n     - URI's do not work\n     - if the `$ref` is broken, the behaviour is considered unexpected\n - Any values which are the `string` `NULL` will be streamed to PostgreSQL as the literal `null`\n+- Table identifiers are restricted to:", "path": "README.md", "position": null, "original_position": 12, "commit_id": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "original_commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "user": {"login": "awm33", "id": 3846080}, "body": "Maybe use \"Table names ...\" here? If you're not used to the nomenclature it may take a second for \"identifiers\" to click.", "created_at": "2018-11-30T02:05:41.000000Z", "updated_at": "2018-11-30T20:13:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#discussion_r237724971", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 180097345, "id": 237724996, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzcyNDk5Ng==", "diff_hunk": "@@ -105,10 +104,18 @@ _The above is copied from the [current list of versions](https://www.postgresql.\n     - URI's do not work\n     - if the `$ref` is broken, the behaviour is considered unexpected\n - Any values which are the `string` `NULL` will be streamed to PostgreSQL as the literal `null`\n+- Table identifiers are restricted to:\n+  - 63 characters in length\n+  - can only be composed of `_`, lowercase letters, numbers, `$`\n+  - cannot start with `$`\n+  - ASCII characters\n+- Field/Column identifiers are restricted to:", "path": "README.md", "position": null, "original_position": 17, "commit_id": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "original_commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "user": {"login": "awm33", "id": 3846080}, "body": "Dido", "created_at": "2018-11-30T02:05:52.000000Z", "updated_at": "2018-11-30T20:13:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#discussion_r237724996", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 180097345, "id": 237725441, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzcyNTQ0MQ==", "diff_hunk": "@@ -391,24 +416,42 @@ def get_postgres_datetime(self, *args):\n         return parsed_datetime.format('YYYY-MM-DD HH:mm:ss.SSSSZZ')\n \n     def add_column(self, cur, table_name, column_name, column_schema):\n+        canonicalized_name = self.canonicalize_identifier(column_name)\n+\n+        if canonicalized_name != column_name:\n+            self.add_column_mapping(cur, table_name, column_name, canonicalized_name, column_schema)\n+\n         data_type = json_schema.to_sql(column_schema)\n \n         if not json_schema.is_nullable(column_schema) \\\n                 and not self.is_table_empty(cur, table_name):\n             self.logger.warning('Forcing new column `{}.{}.{}` to be nullable due to table not empty.'.format(\n                 self.postgres_schema,\n                 table_name,\n-                column_name))\n+                canonicalized_name))\n             data_type = json_schema.to_sql(json_schema.make_nullable(column_schema))\n \n         to_execute = sql.SQL('ALTER TABLE {table_schema}.{table_name} ' +\n                              'ADD COLUMN {column_name} {data_type};').format(\n             table_schema=sql.Identifier(self.postgres_schema),\n             table_name=sql.Identifier(table_name),\n-            column_name=sql.Identifier(column_name),\n+            column_name=sql.Identifier(canonicalized_name),\n             data_type=sql.SQL(data_type))\n \n-        cur.execute(to_execute)\n+        try:\n+            cur.execute(to_execute)\n+        except Exception as ex:\n+            ## Name collision with non mapped, non canonicalized name\n+            if column_name != canonicalized_name:", "path": "target_postgres/postgres.py", "position": null, "original_position": 66, "commit_id": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "original_commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "user": {"login": "awm33", "id": 3846080}, "body": "Is there a chance that an exception could be thrown and the statement to be true for reasons other than a name collision? Is there anything in the exception or error message we could inspect?", "created_at": "2018-11-30T02:09:21.000000Z", "updated_at": "2018-11-30T20:13:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#discussion_r237725441", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 180354746, "id": 237928111, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzkyODExMQ==", "diff_hunk": "@@ -105,10 +104,18 @@ _The above is copied from the [current list of versions](https://www.postgresql.\n     - URI's do not work\n     - if the `$ref` is broken, the behaviour is considered unexpected\n - Any values which are the `string` `NULL` will be streamed to PostgreSQL as the literal `null`\n+- Table identifiers are restricted to:", "path": "README.md", "position": null, "original_position": 12, "commit_id": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "original_commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Good call", "created_at": "2018-11-30T16:53:07.000000Z", "updated_at": "2018-11-30T20:13:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#discussion_r237928111", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "author_association": "COLLABORATOR", "in_reply_to_id": 237724971, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 180357111, "id": 237929971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzkyOTk3MQ==", "diff_hunk": "@@ -391,24 +416,42 @@ def get_postgres_datetime(self, *args):\n         return parsed_datetime.format('YYYY-MM-DD HH:mm:ss.SSSSZZ')\n \n     def add_column(self, cur, table_name, column_name, column_schema):\n+        canonicalized_name = self.canonicalize_identifier(column_name)\n+\n+        if canonicalized_name != column_name:\n+            self.add_column_mapping(cur, table_name, column_name, canonicalized_name, column_schema)\n+\n         data_type = json_schema.to_sql(column_schema)\n \n         if not json_schema.is_nullable(column_schema) \\\n                 and not self.is_table_empty(cur, table_name):\n             self.logger.warning('Forcing new column `{}.{}.{}` to be nullable due to table not empty.'.format(\n                 self.postgres_schema,\n                 table_name,\n-                column_name))\n+                canonicalized_name))\n             data_type = json_schema.to_sql(json_schema.make_nullable(column_schema))\n \n         to_execute = sql.SQL('ALTER TABLE {table_schema}.{table_name} ' +\n                              'ADD COLUMN {column_name} {data_type};').format(\n             table_schema=sql.Identifier(self.postgres_schema),\n             table_name=sql.Identifier(table_name),\n-            column_name=sql.Identifier(column_name),\n+            column_name=sql.Identifier(canonicalized_name),\n             data_type=sql.SQL(data_type))\n \n-        cur.execute(to_execute)\n+        try:\n+            cur.execute(to_execute)\n+        except Exception as ex:\n+            ## Name collision with non mapped, non canonicalized name\n+            if column_name != canonicalized_name:", "path": "target_postgres/postgres.py", "position": null, "original_position": 66, "commit_id": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "original_commit_id": "bfe4c2341b231ac942050342d6852d46425fe3e0", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "So, in this _very specific_ instance we know:\r\n- an error has been thrown trying to execute a column ***add*** to remote\r\n- the `column_name` we have present in our _streamed_ schema, ***does not*** match the `canonicalized_name` we've generated\r\n\r\nIn this case, we can safely assume the the likelihood of some collision having happened to be pretty great (ie, I think we can add the context to the end user and it'd be beneficial).\r\n\r\nTo that point though, I think this can be made _more generic_ and still be beneficial. I'll throw in an exception chain here and modify the message to remove the `if` and we can get the same benefit to the end user.", "created_at": "2018-11-30T16:58:40.000000Z", "updated_at": "2018-11-30T20:13:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/46#discussion_r237929971", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/46", "author_association": "COLLABORATOR", "in_reply_to_id": 237725441, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/47", "id": "235072145", "number": 47, "state": "closed", "title": "Fix/table name validation detection", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/18#issuecomment-443284112\r\n\r\n```\r\ntarget_postgres_test=# create table cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2 ();\r\nNOTICE:  identifier \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af74b2\" will be truncated to \"cats__1__adoption__immunizations__5d3f791dacf047c0ae3cebefe2af7\"\r\nCREATE TABLE\r\n\r\n```\r\n\r\nThat's the name of one of the temp tables we generate. That just _happens_ to work right now. This pr removes the variability in temp table name generation length and instead just uses a `uuid` to uniquely identify tmps.\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/unknownmortalorchestra/hunnybee", "created_at": "2018-11-30T18:11:49.000000Z", "updated_at": "2018-11-30T20:14:06.000000Z", "closed_at": "2018-11-30T18:12:10.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "id": "233729284", "number": 43, "state": "closed", "title": "Refactor/sql persist", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/projects/1#card-14578993\r\n\r\nFollow up to the work done in #41. This PR seeks to start tackling the commonality of `write_batch` for `SQLInterface`.\r\n\r\n## Notes\r\nThis pr moves the following functionality over to `sql_base`:\r\n- records denesting per table\r\n- records serialization preparation for remote persistence\r\n\r\nThis pr _removes_ the following functionality from `sql_base`:\r\n- bulk/entire schema updating for remote\r\n  - it leaves in place updating _individual_ tables\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/subpop/rolling-blackouts-julies-place", "created_at": "2018-11-26T23:22:10.000000Z", "updated_at": "2018-11-27T19:14:42.000000Z", "closed_at": "2018-11-27T19:14:38.000000Z", "merged_at": "2018-11-27T19:14:38.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 178829748, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/43#pullrequestreview-178829748", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "commit_id": "89bc9d20040feb54ba65339ea46d7849696bc247", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 178924073, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/43#pullrequestreview-178924073", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "commit_id": "7d5794beb399bd0da0e06e6849db2f440fc32558", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 178829748, "id": 236701909, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjcwMTkwOQ==", "diff_hunk": "@@ -407,93 +306,84 @@ def get_update_sql(self, target_table_name, temp_table_name, key_properties, sub\n                         insert_distinct_on=insert_distinct_on,\n                         insert_distinct_order_by=insert_distinct_order_by)\n \n-    def persist_rows(self,\n-                     cur,\n-                     target_table_name,\n-                     temp_table_name,\n-                     remote_schema,\n-                     streamed_json_schema,\n-                     key_properties,\n-                     records):\n-        headers = list(remote_schema['schema']['properties'].keys())\n-\n-        datetime_fields = [k for k,v in streamed_json_schema['schema']['properties'].items()\n-                           if v.get('format') == 'date-time']\n-\n-        default_fields = {k: v.get('default') for k, v in streamed_json_schema['schema']['properties'].items()\n-                          if v.get('default') is not None}\n-\n-        fields = set(headers +\n-                     [v['from'] for k, v in remote_schema.get('mappings', {}).items()])\n+    def parse_table_record_serialize_field_name(self, remote_schema, streamed_schema, field, value):", "path": "target_postgres/postgres.py", "position": null, "original_position": 233, "commit_id": "7d5794beb399bd0da0e06e6849db2f440fc32558", "original_commit_id": "89bc9d20040feb54ba65339ea46d7849696bc247", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann You're using the word \"parse\" a lot. Whenever I see that in code I take it as meaning interpreting / deserializing something from a string. I realize the that's not the only use of the word parse, and context can help, but I think it's losing exact meaning in here.", "created_at": "2018-11-27T15:02:23.000000Z", "updated_at": "2018-11-27T17:16:36.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/43#discussion_r236701909", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 178829748, "id": 236703058, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjcwMzA1OA==", "diff_hunk": "@@ -214,38 +332,212 @@ def get_table_schema(self, connection, name):\n \n     def update_table_schema(self, connection, remote_table_json_schema, table_json_schema, metadata):\n         \"\"\"\n-\n+        Update the remote table schema based on the merged difference between\n+        `remote_table_json_schema` and `table_json_schema`.\n         :param connection: remote connection, type left to be determined by implementing class\n         :param remote_table_json_schema: get_table_schema\n         :param table_json_schema: updates for get_table_schema\n-        :param metadata: additional metadata needed to implementing class\n+        :param metadata: additional metadata needed by implementing class\n         :return: updated_remote_table_json_schema\n         \"\"\"\n         raise NotImplementedError('`update_table_schema` not implemented.')", "path": "target_postgres/sql_base.py", "position": 211, "original_position": 198, "commit_id": "7d5794beb399bd0da0e06e6849db2f440fc32558", "original_commit_id": "89bc9d20040feb54ba65339ea46d7849696bc247", "user": {"login": "awm33", "id": 3846080}, "body": "I think it may make sense to start moving these towards the top of the class and eventually make it more obvious that these are the methods to override. Documentation helps too of course", "created_at": "2018-11-27T15:05:04.000000Z", "updated_at": "2018-11-27T17:16:36.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/43#discussion_r236703058", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/43", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/28", "id": "230665277", "number": 28, "state": "closed", "title": "Feature/canonicalize column names", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/18\r\n\r\nThis is the first pr in a series. Proper handling of PSQL names involves non-latin characters, unicode, and general madness. As such, I've tried to split this work up into the following passes:\r\n\r\n- detect invalid names (ASCII only)\r\n- normalize names (leverage PSQL comments to store information about schema etc.)\r\n- quotes support (?)\r\n- unicode support (?)\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/starfucker_usa/golden-light-1", "created_at": "2018-11-13T23:51:29.000000Z", "updated_at": "2018-11-27T17:30:47.000000Z", "closed_at": "2018-11-14T22:57:34.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174670281, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#pullrequestreview-174670281", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/28", "commit_id": "39c64f21feed545d9647bf0b01ba0691e3323953", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174670281, "id": 233291219, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzI5MTIxOQ==", "diff_hunk": "@@ -0,0 +1,90 @@\n+from copy import deepcopy\n+import re\n+\n+from target_postgres.singer_stream import (\n+    SINGER_RECEIVED_AT,\n+    SINGER_BATCHED_AT,\n+    SINGER_SEQUENCE,\n+    SINGER_TABLE_VERSION,\n+    SINGER_PK,\n+    SINGER_SOURCE_PK_PREFIX,\n+    SINGER_LEVEL\n+)\n+\n+\"\"\"\n+NAMEDATALEN _defaults_ to 64 in PostgreSQL. The maxmimum length for an identifier is\n+  NAMEDATALEN - 1.\n+\n+  TODO: Figure out way to `SELECT` value from commands\n+\"\"\"\n+NAMEDATALEN = 63\n+\n+\n+class SchemaError(Exception):", "path": "target_postgres/postgres_schema.py", "position": 23, "original_position": 23, "commit_id": "39c64f21feed545d9647bf0b01ba0691e3323953", "original_commit_id": "39c64f21feed545d9647bf0b01ba0691e3323953", "user": {"login": "awm33", "id": 3846080}, "body": "Maybe `PostgresSchemaError` would be more clear in a stack trace?", "created_at": "2018-11-14T01:58:35.000000Z", "updated_at": "2018-11-14T01:59:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#discussion_r233291219", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/28", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174670281, "id": 233291311, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzI5MTMxMQ==", "diff_hunk": "@@ -0,0 +1,90 @@\n+from copy import deepcopy\n+import re\n+\n+from target_postgres.singer_stream import (\n+    SINGER_RECEIVED_AT,\n+    SINGER_BATCHED_AT,\n+    SINGER_SEQUENCE,\n+    SINGER_TABLE_VERSION,\n+    SINGER_PK,\n+    SINGER_SOURCE_PK_PREFIX,\n+    SINGER_LEVEL\n+)\n+\n+\"\"\"\n+NAMEDATALEN _defaults_ to 64 in PostgreSQL. The maxmimum length for an identifier is\n+  NAMEDATALEN - 1.\n+\n+  TODO: Figure out way to `SELECT` value from commands\n+\"\"\"\n+NAMEDATALEN = 63\n+\n+\n+class SchemaError(Exception):\n+    \"\"\"\n+    Raise this when there is an error with regards to Postgres Schemas\n+    \"\"\"\n+\n+\n+def canonicalize_column_name(column_name):\n+    \"\"\"\n+    Given a column name, canonicalize name such that it can be\n+    used as a Postgres column identifier.\n+\n+    For details or a full list of restrictions, see: https://www.postgresql.org/docs/9.4/sql-syntax-lexical.html\n+\n+    TODO: allow for non latin characters\n+    :param column_name: String\n+    :return: String\n+    \"\"\"\n+\n+    if not re.match(r'^[a-zA-Z_]', column_name):\n+        raise SchemaError(\n+            'Field \"{}\" cannot be canonicalized. Must start with an letter, or underscore'.format(\n+                column_name))\n+\n+    if len(column_name) > NAMEDATALEN:\n+        raise SchemaError(\n+            'Field \"{}\" cannot be canonicalized. Length {} must be less than or equal to {}'.format(\n+                column_name,\n+                len(column_name),\n+                NAMEDATALEN))\n+\n+    ## Subsequent characters in an identifier or key word can be letters, underscores, digits (0-9), or dollar signs ($)\n+\n+    lowered_name = column_name.lower()\n+    return lowered_name[0] + re.sub(r'[^\\w\\d_$]', '_', lowered_name[1:])\n+\n+\n+def add_singer_columns(schema, key_properties):", "path": "target_postgres/postgres_schema.py", "position": 59, "original_position": 59, "commit_id": "39c64f21feed545d9647bf0b01ba0691e3323953", "original_commit_id": "39c64f21feed545d9647bf0b01ba0691e3323953", "user": {"login": "awm33", "id": 3846080}, "body": "This function doesn't have any postgres specific code.", "created_at": "2018-11-14T01:59:15.000000Z", "updated_at": "2018-11-14T01:59:55.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/28#discussion_r233291311", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/28", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "id": "232709589", "number": 41, "state": "closed", "title": "Refactor/rbdms base", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/projects/1#card-14578993\r\nhttps://github.com/datamill-co/target-postgres/pull/29\r\n\r\nIn this PR we introduce `RDBMSInterface`. This is aimed at being the base class for generic relational database targets.\r\n\r\nThe work for building out a full `RDBMSInterface` is loosely scheduled as:\r\n- schema updates/schema processing\r\n- batch denesting/batch writing\r\n- version updates\r\n\r\nThis PR only aims to start tackling:\r\n- initialization/bones of RDBMSInterface\r\n- schema processing\r\n\r\n# Notes\r\n\r\nAble to be reviewed commit by commit.\r\n\r\nAs noted in `rdbms_base`:\r\n\r\n```py\r\n# RDBMS Base\r\n## This module is the base implementation for Singer RDBMS target support.\r\n## Expected usage of this module is to create a class representing your given\r\n## RDBMS Target which overrides RDBMSInterface.\r\n#\r\n# Transition\r\n## The given implementation here is in transition as we expand and add various\r\n## targets. As such, there are many private helper functions which are providing\r\n## the real support.\r\n##\r\n## The expectation is that these functions will be added to RDBMSInterface as we\r\n## better understand how to make adding new targets simpler.\r\n#\r\n```\r\n\r\n## Suggested Musical Pairing\r\n\r\nhttps://soundcloud.com/santigold/disparate-youth\r\n", "created_at": "2018-11-21T15:42:08.000000Z", "updated_at": "2018-11-26T15:28:47.000000Z", "closed_at": "2018-11-26T15:28:44.000000Z", "merged_at": "2018-11-26T15:28:44.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 177483544, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/41#pullrequestreview-177483544", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "commit_id": "1819b549b87a8fd9de533a366fb1fea0b43b577b", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 178344948, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/41#pullrequestreview-178344948", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "commit_id": "79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 177483544, "id": 235584271, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTU4NDI3MQ==", "diff_hunk": "@@ -0,0 +1,273 @@\n+# RDBMS Base\n+## This module is the base implementation for Singer RDBMS target support.\n+## Expected usage of this module is to create a class representing your given\n+## RDBMS Target which overrides RDBMSInterface.\n+#\n+# Transition\n+## The given implementation here is in transition as we expand and add various\n+## targets. As such, there are many private helper functions which are providing\n+## the real support.\n+##\n+## The expectation is that these functions will be added to RDBMSInterface as we\n+## better understand how to make adding new targets simpler.\n+#\n+\n+from target_postgres import json_schema\n+from target_postgres.singer_stream import (\n+    SINGER_RECEIVED_AT,\n+    SINGER_BATCHED_AT,\n+    SINGER_SEQUENCE,\n+    SINGER_TABLE_VERSION,\n+    SINGER_PK,\n+    SINGER_SOURCE_PK_PREFIX,\n+    SINGER_LEVEL\n+)\n+\n+SEPARATOR = '__'\n+\n+\n+def to_table_schema(name, level, keys, properties):\n+    for key in keys:\n+        if not key in properties:\n+            raise Exception('Unknown key \"{}\" found for table \"{}\"'.format(\n+                key, name\n+            ))\n+\n+    return {'type': 'TABLE_SCHEMA',\n+            'name': name,\n+            'level': level,\n+            'key_properties': keys,\n+            'schema': {'type': 'object',\n+                       'additionalProperties': False,\n+                       'properties': properties}}\n+\n+\n+def _add_singer_columns(schema, key_properties):\n+    properties = schema['properties']\n+\n+    if SINGER_RECEIVED_AT not in properties:\n+        properties[SINGER_RECEIVED_AT] = {\n+            'type': ['null', 'string'],\n+            'format': 'date-time'\n+        }\n+\n+    if SINGER_SEQUENCE not in properties:\n+        properties[SINGER_SEQUENCE] = {\n+            'type': ['null', 'integer']\n+        }\n+\n+    if SINGER_TABLE_VERSION not in properties:\n+        properties[SINGER_TABLE_VERSION] = {\n+            'type': ['null', 'integer']\n+        }\n+\n+    if SINGER_BATCHED_AT not in properties:\n+        properties[SINGER_BATCHED_AT] = {\n+            'type': ['null', 'string'],\n+            'format': 'date-time'\n+        }\n+\n+    if len(key_properties) == 0:\n+        properties[SINGER_PK] = {\n+            'type': ['string']\n+        }\n+\n+\n+def _denest_schema_helper(table_name,\n+                          table_json_schema,\n+                          not_null,\n+                          top_level_schema,\n+                          current_path,\n+                          key_prop_schemas,\n+                          subtables,\n+                          level):\n+    for prop, item_json_schema in table_json_schema['properties'].items():\n+        next_path = current_path + SEPARATOR + prop\n+        if json_schema.is_object(item_json_schema):\n+            _denest_schema_helper(table_name,\n+                                  item_json_schema,\n+                                  not_null,\n+                                  top_level_schema,\n+                                  next_path,\n+                                  key_prop_schemas,\n+                                  subtables,\n+                                  level)\n+        elif json_schema.is_iterable(item_json_schema):\n+            _create_subtable(table_name + SEPARATOR + prop,\n+                             item_json_schema,\n+                             key_prop_schemas,\n+                             subtables,\n+                             level + 1)\n+        else:\n+            if not_null and json_schema.is_nullable(item_json_schema):\n+                item_json_schema['type'].remove('null')\n+            elif not json_schema.is_nullable(item_json_schema):\n+                item_json_schema['type'].append('null')\n+            top_level_schema[next_path] = item_json_schema\n+\n+\n+def _create_subtable(table_name, table_json_schema, key_prop_schemas, subtables, level):\n+    if json_schema.is_object(table_json_schema['items']):\n+        new_properties = table_json_schema['items']['properties']\n+    else:\n+        new_properties = {'value': table_json_schema['items']}\n+\n+    key_properties = []\n+    for pk, item_json_schema in key_prop_schemas.items():\n+        key_properties.append(SINGER_SOURCE_PK_PREFIX + pk)\n+        new_properties[SINGER_SOURCE_PK_PREFIX + pk] = item_json_schema\n+\n+    new_properties[SINGER_SEQUENCE] = {\n+        'type': ['null', 'integer']\n+    }\n+\n+    for i in range(0, level + 1):\n+        new_properties[SINGER_LEVEL.format(i)] = {\n+            'type': ['integer']\n+        }\n+\n+    new_schema = {'type': ['object'],\n+                  'properties': new_properties,\n+                  'level': level,\n+                  'key_properties': key_properties}\n+\n+    _denest_schema(table_name, new_schema, key_prop_schemas, subtables, level=level)\n+\n+    subtables[table_name] = new_schema\n+\n+\n+def _denest_schema(table_name, table_json_schema, key_prop_schemas, subtables, current_path=None, level=-1):\n+    new_properties = {}\n+    for prop, item_json_schema in table_json_schema['properties'].items():\n+        if current_path:\n+            next_path = current_path + SEPARATOR + prop\n+        else:\n+            next_path = prop\n+\n+        if json_schema.is_object(item_json_schema):\n+            not_null = 'null' not in item_json_schema['type']\n+            _denest_schema_helper(table_name + SEPARATOR + next_path,\n+                                  item_json_schema,\n+                                  not_null,\n+                                  new_properties,\n+                                  next_path,\n+                                  key_prop_schemas,\n+                                  subtables,\n+                                  level)\n+        elif json_schema.is_iterable(item_json_schema):\n+            _create_subtable(table_name + SEPARATOR + next_path,\n+                             item_json_schema,\n+                             key_prop_schemas,\n+                             subtables,\n+                             level + 1)\n+        else:\n+            new_properties[prop] = item_json_schema\n+    table_json_schema['properties'] = new_properties\n+\n+\n+def _flatten_schema(stream_buffer, root_table_name, schema):\n+    subtables = {}\n+    key_prop_schemas = {}\n+    for key in stream_buffer.key_properties:\n+        key_prop_schemas[key] = schema['properties'][key]\n+    _denest_schema(root_table_name, schema, key_prop_schemas, subtables)\n+\n+    ret = []\n+    for name, schema in subtables.items():\n+        ret.append(to_table_schema(name, schema['level'], schema['key_properties'], schema['properties']))\n+    return ret\n+\n+\n+class RDBMSNotImplementedError(NotImplementedError):", "path": "target_postgres/rdbms_base.py", "position": null, "original_position": 181, "commit_id": "79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "original_commit_id": "1819b549b87a8fd9de533a366fb1fea0b43b577b", "user": {"login": "awm33", "id": 3846080}, "body": "This seems unnecessary, it's pretty common to just throw straight up NotImplementedError from a base class function.", "created_at": "2018-11-22T02:09:41.000000Z", "updated_at": "2018-11-26T15:26:42.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/41#discussion_r235584271", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 177483544, "id": 235584585, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTU4NDU4NQ==", "diff_hunk": "@@ -0,0 +1,273 @@\n+# RDBMS Base\n+## This module is the base implementation for Singer RDBMS target support.\n+## Expected usage of this module is to create a class representing your given\n+## RDBMS Target which overrides RDBMSInterface.\n+#\n+# Transition\n+## The given implementation here is in transition as we expand and add various\n+## targets. As such, there are many private helper functions which are providing\n+## the real support.\n+##\n+## The expectation is that these functions will be added to RDBMSInterface as we\n+## better understand how to make adding new targets simpler.\n+#\n+\n+from target_postgres import json_schema\n+from target_postgres.singer_stream import (\n+    SINGER_RECEIVED_AT,\n+    SINGER_BATCHED_AT,\n+    SINGER_SEQUENCE,\n+    SINGER_TABLE_VERSION,\n+    SINGER_PK,\n+    SINGER_SOURCE_PK_PREFIX,\n+    SINGER_LEVEL\n+)\n+\n+SEPARATOR = '__'\n+\n+\n+def to_table_schema(name, level, keys, properties):\n+    for key in keys:\n+        if not key in properties:\n+            raise Exception('Unknown key \"{}\" found for table \"{}\"'.format(\n+                key, name\n+            ))\n+\n+    return {'type': 'TABLE_SCHEMA',\n+            'name': name,\n+            'level': level,\n+            'key_properties': keys,\n+            'schema': {'type': 'object',\n+                       'additionalProperties': False,\n+                       'properties': properties}}\n+\n+\n+def _add_singer_columns(schema, key_properties):\n+    properties = schema['properties']\n+\n+    if SINGER_RECEIVED_AT not in properties:\n+        properties[SINGER_RECEIVED_AT] = {\n+            'type': ['null', 'string'],\n+            'format': 'date-time'\n+        }\n+\n+    if SINGER_SEQUENCE not in properties:\n+        properties[SINGER_SEQUENCE] = {\n+            'type': ['null', 'integer']\n+        }\n+\n+    if SINGER_TABLE_VERSION not in properties:\n+        properties[SINGER_TABLE_VERSION] = {\n+            'type': ['null', 'integer']\n+        }\n+\n+    if SINGER_BATCHED_AT not in properties:\n+        properties[SINGER_BATCHED_AT] = {\n+            'type': ['null', 'string'],\n+            'format': 'date-time'\n+        }\n+\n+    if len(key_properties) == 0:\n+        properties[SINGER_PK] = {\n+            'type': ['string']\n+        }\n+\n+\n+def _denest_schema_helper(table_name,\n+                          table_json_schema,\n+                          not_null,\n+                          top_level_schema,\n+                          current_path,\n+                          key_prop_schemas,\n+                          subtables,\n+                          level):\n+    for prop, item_json_schema in table_json_schema['properties'].items():\n+        next_path = current_path + SEPARATOR + prop\n+        if json_schema.is_object(item_json_schema):\n+            _denest_schema_helper(table_name,\n+                                  item_json_schema,\n+                                  not_null,\n+                                  top_level_schema,\n+                                  next_path,\n+                                  key_prop_schemas,\n+                                  subtables,\n+                                  level)\n+        elif json_schema.is_iterable(item_json_schema):\n+            _create_subtable(table_name + SEPARATOR + prop,\n+                             item_json_schema,\n+                             key_prop_schemas,\n+                             subtables,\n+                             level + 1)\n+        else:\n+            if not_null and json_schema.is_nullable(item_json_schema):\n+                item_json_schema['type'].remove('null')\n+            elif not json_schema.is_nullable(item_json_schema):\n+                item_json_schema['type'].append('null')\n+            top_level_schema[next_path] = item_json_schema\n+\n+\n+def _create_subtable(table_name, table_json_schema, key_prop_schemas, subtables, level):\n+    if json_schema.is_object(table_json_schema['items']):\n+        new_properties = table_json_schema['items']['properties']\n+    else:\n+        new_properties = {'value': table_json_schema['items']}\n+\n+    key_properties = []\n+    for pk, item_json_schema in key_prop_schemas.items():\n+        key_properties.append(SINGER_SOURCE_PK_PREFIX + pk)\n+        new_properties[SINGER_SOURCE_PK_PREFIX + pk] = item_json_schema\n+\n+    new_properties[SINGER_SEQUENCE] = {\n+        'type': ['null', 'integer']\n+    }\n+\n+    for i in range(0, level + 1):\n+        new_properties[SINGER_LEVEL.format(i)] = {\n+            'type': ['integer']\n+        }\n+\n+    new_schema = {'type': ['object'],\n+                  'properties': new_properties,\n+                  'level': level,\n+                  'key_properties': key_properties}\n+\n+    _denest_schema(table_name, new_schema, key_prop_schemas, subtables, level=level)\n+\n+    subtables[table_name] = new_schema\n+\n+\n+def _denest_schema(table_name, table_json_schema, key_prop_schemas, subtables, current_path=None, level=-1):\n+    new_properties = {}\n+    for prop, item_json_schema in table_json_schema['properties'].items():\n+        if current_path:\n+            next_path = current_path + SEPARATOR + prop\n+        else:\n+            next_path = prop\n+\n+        if json_schema.is_object(item_json_schema):\n+            not_null = 'null' not in item_json_schema['type']\n+            _denest_schema_helper(table_name + SEPARATOR + next_path,\n+                                  item_json_schema,\n+                                  not_null,\n+                                  new_properties,\n+                                  next_path,\n+                                  key_prop_schemas,\n+                                  subtables,\n+                                  level)\n+        elif json_schema.is_iterable(item_json_schema):\n+            _create_subtable(table_name + SEPARATOR + next_path,\n+                             item_json_schema,\n+                             key_prop_schemas,\n+                             subtables,\n+                             level + 1)\n+        else:\n+            new_properties[prop] = item_json_schema\n+    table_json_schema['properties'] = new_properties\n+\n+\n+def _flatten_schema(stream_buffer, root_table_name, schema):\n+    subtables = {}\n+    key_prop_schemas = {}\n+    for key in stream_buffer.key_properties:\n+        key_prop_schemas[key] = schema['properties'][key]\n+    _denest_schema(root_table_name, schema, key_prop_schemas, subtables)\n+\n+    ret = []\n+    for name, schema in subtables.items():\n+        ret.append(to_table_schema(name, schema['level'], schema['key_properties'], schema['properties']))\n+    return ret\n+\n+\n+class RDBMSNotImplementedError(NotImplementedError):\n+    \"\"\"\n+    Raise when a RDBMS method has been left unimplmented which _must_ be overridden\n+    in order for the interface to work correctly.\n+    \"\"\"\n+\n+\n+class RDBMSInterface:", "path": "target_postgres/rdbms_base.py", "position": null, "original_position": 188, "commit_id": "79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "original_commit_id": "1819b549b87a8fd9de533a366fb1fea0b43b577b", "user": {"login": "awm33", "id": 3846080}, "body": "I kinda hate RDMS lol. Doesn't roll off the tongue like SQL (sequel).", "created_at": "2018-11-22T02:12:30.000000Z", "updated_at": "2018-11-26T15:26:42.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/41#discussion_r235584585", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/41", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/40", "id": "232103679", "number": 40, "state": "closed", "title": "Feature/pk type change detection", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\nhttps://github.com/datamill-co/target-postgres/pull/39\r\n\r\nPK types changes are v bad.\r\n\r\n## Suggested Musical Pairing\r\n\r\nWind.", "created_at": "2018-11-19T20:34:42.000000Z", "updated_at": "2018-11-21T16:43:57.000000Z", "closed_at": "2018-11-21T16:43:53.000000Z", "merged_at": "2018-11-21T16:43:53.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 177334533, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/40#pullrequestreview-177334533", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/40", "commit_id": "89825a7f7314850f65e801b73e5c411ba6924981", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/39", "id": "232088462", "number": 39, "state": "closed", "title": "Feature/nullable column handling", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\nhttps://github.com/datamill-co/target-postgres/pull/38\r\n\r\nExisting columns cannot be made nullable.\r\n\r\n## Suggested Musical Pairing\r\nDog chewing.", "created_at": "2018-11-19T19:37:07.000000Z", "updated_at": "2018-11-21T16:34:52.000000Z", "closed_at": "2018-11-21T16:34:48.000000Z", "merged_at": "2018-11-21T16:34:48.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 177326781, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/39#pullrequestreview-177326781", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/39", "commit_id": "43665229d6b0d582a970e476b28ab9c4d48b6847", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/29", "id": "230947004", "number": 29, "state": "closed", "title": "Refactor/sql schema", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/pull/28\r\nhttps://github.com/datamill-co/target-postgres/issues/4\r\n\r\nIn light of a recent pr, it seems like we're butting up against the essential core of generic-SQL, Postgres, and Redshift sections of this codebase. Due to this, this PR aims to provide some groundwork to be able to abstract out the core SQL operations, vs the more Postgres specific.\r\n\r\n## Notes\r\n\r\nThis PR introduces no _new_ functionality.\r\n\r\nTo reduce scope, the only classes/objects this PR creates are related to Schema.\r\n\r\n## Proposed Next Steps\r\n\r\nThe proposed next steps along this trajectory are:\r\n- pull table version info and logic into `SQLSchema`\r\n- expose functions and move functionality for schema collision/upsert/remote-fetch into `SQLSchema`/`TableSchema`\r\n- introduce table/column name canonicalization and error detection\r\n- introduce a `SQLPersistence` (name pending) class which moves base persistence functionality (like de-nesting records etc.) into a new class\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/pondling/man-it-feels-like-space-again", "created_at": "2018-11-14T19:04:30.000000Z", "updated_at": "2018-11-21T15:37:57.000000Z", "closed_at": "2018-11-21T15:37:53.000000Z", "merged_at": null, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "id": "232068711", "number": 38, "state": "closed", "title": "Feature/column type splitting", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\n\r\nPresently if a column comes to us with a type change, we are unable to handle the type change. The work done in this pr:\r\n\r\n- detects the type change\r\n- creates two new columns:\r\n  - `<original-column-name>__<existing-type:sql-type-shortand>`\r\n  - `<original-column-name>__<new-type:sql-type-shortand>`\r\n- migrates the data from `<original-column-name>` to `<original-column-name>__<existing-type:sql-type-shortand>`\r\n- drops `<original-column-name>`\r\n\r\n## Notes\r\n\r\n- This lays some groundwork for future `$any` support\r\n- This lays some groundwork for future `regular-type -> null-type` support but does not implement the work to do this\r\n\r\n## Suggested Musical Pairing\r\n\r\nDog sleeping.", "created_at": "2018-11-19T18:20:56.000000Z", "updated_at": "2018-11-19T22:12:52.000000Z", "closed_at": "2018-11-19T22:12:49.000000Z", "merged_at": "2018-11-19T22:12:49.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176476962, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#pullrequestreview-176476962", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "commit_id": "eec7238f4b130139b8652d39fcff106c9ed9002a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176481559, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#pullrequestreview-176481559", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "commit_id": "eec7238f4b130139b8652d39fcff106c9ed9002a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176517265, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#pullrequestreview-176517265", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "commit_id": "fcaab7813590af772ab247e5c9d8650ffb9b9bed", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176518892, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#pullrequestreview-176518892", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "commit_id": "fcaab7813590af772ab247e5c9d8650ffb9b9bed", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176521826, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#pullrequestreview-176521826", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176476962, "id": 234764951, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc2NDk1MQ==", "diff_hunk": "@@ -279,3 +279,32 @@ def to_sql(schema):\n         sql_type += ' NOT NULL'\n \n     return sql_type\n+\n+\n+_shorthand_mapping = {", "path": "target_postgres/json_schema.py", "position": 6, "original_position": 6, "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "original_commit_id": "eec7238f4b130139b8652d39fcff106c9ed9002a", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann Stitch uses full type names https://www.stitchdata.com/docs/data-structure/table-structural-changes#columns-mixed-data-types", "created_at": "2018-11-19T20:10:37.000000Z", "updated_at": "2018-11-19T22:07:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#discussion_r234764951", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176476962, "id": 234767082, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc2NzA4Mg==", "diff_hunk": "@@ -543,20 +542,48 @@ def get_update_sql(self, target_table_name, temp_table_name, key_properties, sub\n                         insert_distinct_on=insert_distinct_on,\n                         insert_distinct_order_by=insert_distinct_order_by)\n \n+    def serialized_value(self, field, value, default_fields, datetime_fields):", "path": "target_postgres/postgres.py", "position": null, "original_position": 163, "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "original_commit_id": "eec7238f4b130139b8652d39fcff106c9ed9002a", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann I don't think we want to combine defaulting and serialization (eg formatting dates). Those seem like distinct things to me. I think creating true functionality around serialization, which in this case is a CSV, may make sense. As in, call a serialize function per row that returns a CSV row, and serialize each field as needed.", "created_at": "2018-11-19T20:17:37.000000Z", "updated_at": "2018-11-19T22:07:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#discussion_r234767082", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176481559, "id": 234768707, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc2ODcwNw==", "diff_hunk": "@@ -279,3 +279,32 @@ def to_sql(schema):\n         sql_type += ' NOT NULL'\n \n     return sql_type\n+\n+\n+_shorthand_mapping = {", "path": "target_postgres/json_schema.py", "position": 6, "original_position": 6, "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "original_commit_id": "eec7238f4b130139b8652d39fcff106c9ed9002a", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "That's what I thought too...then I found this:\r\n\r\nhttps://www.stitchdata.com/docs/data-structure/postgresql-data-loading-behavior#stitch-detects-multiple-data-types-for-a-single-colum-2\r\n```\r\nIF | Stitch detects multiple data types for a single column.\r\n-- | --\r\nTHEN | For example: Stitch first detected that\u00a0order_confirmed\u00a0contained\u00a0BOOLEAN\u00a0data, but during a subsequent sync, detected\u00a0STRING\u00a0values. To accommodate data of varying types, Stitch will:Rename the original column by appending the first-detected data type to the column name. Ex:\u00a0order_confirmed__blStore data for the first-detected data type in the renamed column. In this example, only\u00a0BOOLEANvalues will be stored in\u00a0order_confirmed__blCreate additional columns to store the other data types - one for each data type detected - and append the data type to the column name. In this example, a\u00a0order_confirmed__st\u00a0column will be created to store\u00a0STRING\u00a0values.\r\n\r\n\r\n```\r\n", "created_at": "2018-11-19T20:22:47.000000Z", "updated_at": "2018-11-19T22:07:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#discussion_r234768707", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "author_association": "COLLABORATOR", "in_reply_to_id": 234764951, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176517265, "id": 234797590, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc5NzU5MA==", "diff_hunk": "@@ -582,36 +559,51 @@ def persist_rows(self,\n         default_fields = {k: v.get('default') for k, v in target_table_json_schema['properties'].items()\n                           if v.get('default') is not None}\n \n-        mapped_fields = target_schema.get('mappings', {})\n-        mapped_from_fields = set([v['from'] for k,v in mapped_fields.items()])\n-\n-        rows = iter(records)\n+        records_iter = iter(records)\n \n         def transform():\n             try:\n-                row = next(rows)\n-                with io.StringIO() as out:\n-                    for prop in headers:\n-                        if prop in mapped_fields:\n-                            row[prop] = RESERVED_NULL_DEFAULT\n-                        else:\n-                            row[prop] = self.serialized_value(prop,\n-                                                              row.get(prop, None),\n-                                                              default_fields,\n-                                                              datetime_fields)\n-\n-                    for prop in mapped_from_fields:\n-                        if prop in row:\n-                            mapped_field = self.get_mapping(target_schema,\n-                                                            prop,\n-                                                            target_table_json_schema['properties'][prop])\n-\n-                            row[mapped_field] = self.serialized_value(prop,\n-                                                                      row.get(prop, None),\n-                                                                      default_fields,\n-                                                                      datetime_fields)\n-                            row.pop(prop, None)\n+                record = next(records_iter)\n+                row = {}\n+\n+                for field in set(headers + list(record.keys())):", "path": "target_postgres/postgres.py", "position": null, "original_position": 67, "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "original_commit_id": "fcaab7813590af772ab247e5c9d8650ffb9b9bed", "user": {"login": "awm33", "id": 3846080}, "body": "If we are validating JSON, shouldn't `headers` and `record.keys()` be the same? If there are extra columns in `record.keys()`, wouldn't that fail?", "created_at": "2018-11-19T21:59:28.000000Z", "updated_at": "2018-11-19T22:07:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#discussion_r234797590", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176518892, "id": 234798874, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc5ODg3NA==", "diff_hunk": "@@ -582,36 +559,51 @@ def persist_rows(self,\n         default_fields = {k: v.get('default') for k, v in target_table_json_schema['properties'].items()\n                           if v.get('default') is not None}\n \n-        mapped_fields = target_schema.get('mappings', {})\n-        mapped_from_fields = set([v['from'] for k,v in mapped_fields.items()])\n-\n-        rows = iter(records)\n+        records_iter = iter(records)\n \n         def transform():\n             try:\n-                row = next(rows)\n-                with io.StringIO() as out:\n-                    for prop in headers:\n-                        if prop in mapped_fields:\n-                            row[prop] = RESERVED_NULL_DEFAULT\n-                        else:\n-                            row[prop] = self.serialized_value(prop,\n-                                                              row.get(prop, None),\n-                                                              default_fields,\n-                                                              datetime_fields)\n-\n-                    for prop in mapped_from_fields:\n-                        if prop in row:\n-                            mapped_field = self.get_mapping(target_schema,\n-                                                            prop,\n-                                                            target_table_json_schema['properties'][prop])\n-\n-                            row[mapped_field] = self.serialized_value(prop,\n-                                                                      row.get(prop, None),\n-                                                                      default_fields,\n-                                                                      datetime_fields)\n-                            row.pop(prop, None)\n+                record = next(records_iter)\n+                row = {}\n+\n+                for field in set(headers + list(record.keys())):", "path": "target_postgres/postgres.py", "position": null, "original_position": 67, "commit_id": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "original_commit_id": "fcaab7813590af772ab247e5c9d8650ffb9b9bed", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Column splitting. Headers will contain the mapped fields ie `name__s`, whereas record will contain `name` etc. I can also get this from filtering the mapped field names. Lemme do that instead to make this clearer.", "created_at": "2018-11-19T22:03:52.000000Z", "updated_at": "2018-11-19T22:07:45.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/38#discussion_r234798874", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/38", "author_association": "COLLABORATOR", "in_reply_to_id": 234797590, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/37", "id": "231707197", "number": 37, "state": "closed", "title": "Refactor/no more sql column defaults", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nIn the wake of working on column type changes, and hence column splitting, I encountered that our handling of sql defaults actually never _quite_ worked as we anticipated.\r\n\r\nTables manually created in PSQL to have various defaults were not correctly deserialized due to the type of the `information_schema.column_default` column to be `character_data`:\r\n\r\n```\r\n{'name': 'foo',\r\n 'type': 'TABLE_SCHEMA',\r\n 'schema': {'properties': \r\n   {'id': {'type': ['integer', 'null']},\r\n    'bar': {'type': ['string'], 'default': \"''::text\"}}}}\r\n```\r\n\r\nAfter a conversation, @awm33 and I came to the conclusion that \"prefilling\"/\"backfilling\" data is actually not really in keeping with the spirit of providing a streaming data tool. The previous data _did not have_ the values we're trying to assign to it, so we're actually breaking history.\r\n\r\n## Notes\r\n\r\nThere was a conversation about making _all columns_ nullable, however I think that's probably overboard for what we want/have to provide at the moment.\r\n\r\nI think that if a column _becomes_ nullable, we should probably \"expand\" the column to handle that, but if your schema has 5 non nullable columns...and never changes, the user experience will be far superior to have the non null constraints in place.\r\n\r\nThe above is also a smaller changeset. I think if we want to go _further_ down the path of making every column nullable, we should make a pr _just_ for that.\r\n\r\nThis was my spike pr: https://github.com/datamill-co/target-postgres/compare/master...AlexanderMann:scratchwork/column-type-renames?expand=1\r\n\r\n## Suggested Musical Pairing\r\n\r\nWind.", "created_at": "2018-11-17T05:02:31.000000Z", "updated_at": "2018-11-19T17:27:18.000000Z", "closed_at": "2018-11-19T17:26:30.000000Z", "merged_at": "2018-11-19T17:26:30.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176116336, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#pullrequestreview-176116336", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/37", "commit_id": "eec0caa787de048eb82b3f370a0cdefdaad8c9f8", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 176409048, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#pullrequestreview-176409048", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/37", "commit_id": "a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 176116336, "id": 234471261, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQ3MTI2MQ==", "diff_hunk": "@@ -622,25 +622,20 @@ def get_postgres_datetime(self, *args):\n     def add_column(self, cur, table_schema, table_name, column_name, column_schema):\n         data_type = json_schema.to_sql(column_schema)\n \n-        default_value = self.get_null_default(column_name, column_schema)\n-\n-        if default_value is not None:\n-            default_value = sql.SQL(' DEFAULT {}').format(sql.Literal(default_value))\n-        elif not self.is_table_empty(cur, table_schema, table_name):\n-            raise PostgresError('Non-trival default needed on new non-null column `{}.{}.{}`'.format(\n+        if not json_schema.is_nullable(column_schema) \\", "path": "target_postgres/postgres.py", "position": 10, "original_position": 10, "commit_id": "a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "original_commit_id": "eec0caa787de048eb82b3f370a0cdefdaad8c9f8", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann Aren't we always forcing columns to be not nullable, regardless if the table is empty?", "created_at": "2018-11-19T00:37:30.000000Z", "updated_at": "2018-11-19T15:15:54.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/37#discussion_r234471261", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/37", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/36", "id": "231256766", "number": 36, "state": "closed", "title": "Housekeeping/pylint  object useless", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\n\r\nFor kicks, I downloaded `pylint` to see what state our repo is in. There are some glaring trickier issues, but one of the low hanging fruits are a couple of problems which `pylint` tags (loosely) as `.*useless.*`.\r\n\r\nI tidied those few things up.\r\n\r\n## Testing\r\n### Before\r\n\r\n```sh\r\nroot@be07c3b690d3:/code# pylint target_postgres/ | grep useless\r\ntarget_postgres/postgres.py:12:0: C0414: Import alias does not rename original package (useless-import-alias)\r\ntarget_postgres/postgres.py:31:0: R0205: Class 'TransformStream' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\ntarget_postgres/postgres.py:38:0: R0205: Class 'PostgresTarget' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\ntarget_postgres/singer_stream.py:22:0: R0205: Class 'BufferedSingerStream' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\n```\r\n\r\n### After\r\n\r\n```sh\r\nroot@be07c3b690d3:/code# pylint target_postgres/ | grep useless\r\n```\r\n\r\n## Suggested Musical Pairing\r\nKeyboard typing", "created_at": "2018-11-15T16:29:35.000000Z", "updated_at": "2018-11-15T16:33:45.000000Z", "closed_at": "2018-11-15T16:33:43.000000Z", "merged_at": "2018-11-15T16:33:43.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175441932, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/36#pullrequestreview-175441932", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/36", "commit_id": "572dfdbd3173f8c1304557ff70437245bec71bf4", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/35", "id": "231253491", "number": 35, "state": "closed", "title": "Housekeeping/development improvements docker", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nA portion of my time is spent typing out `python setup.py pytest`. Additionally, whenever docker has to restart, or I do anything which fumbles the eggs etc., I have to re-download the world.\r\n\r\nThis pr aims to do three simple things:\r\n- suggest shelling into the container using `bash` instead of `sh`\r\n  - our container supports this, and it makes life easier (history! autocomplete! hurrah!)\r\n- setup alias for the `pytest` command\r\n  - due to the above as well, you get autocomplete for it, yahtzee!\r\n- cache python files based on whether or not `setup.py` has changed in the Docker build step\r\n  - this means that the container _itself_ actually caches these values\r\n\r\n## Testing\r\n```sh\r\n$ docker-compose up -d --build\r\n...\r\nBest match: pytz 2018.7\r\nProcessing pytz-2018.7-py2.py3-none-any.whl\r\nInstalling pytz-2018.7-py2.py3-none-any.whl to /usr/local/lib/python3.7/site-packages\r\nAdding pytz 2018.7 to easy-install.pth file\r\n\r\nInstalled /usr/local/lib/python3.7/site-packages/pytz-2018.7-py3.7.egg\r\nFinished processing dependencies for target-postgres==0.0.1\r\nRemoving intermediate container 5ffdbc7c0a65\r\n ---> f82310941dcb\r\nStep 6/6 : ENTRYPOINT [\"./docker-entrypoint.sh\"]\r\n ---> Running in e9601b0b87d9\r\nRemoving intermediate container e9601b0b87d9\r\n ---> 98d30d87c548\r\nSuccessfully built 98d30d87c548\r\nSuccessfully tagged target-postgres_target-postgres:latest\r\nCreating target-postgres_target-postgres_1 ... done\r\nCreating target-postgres_db_1              ... done\r\n\r\n$ bash -c \"clear && docker exec -it target-postgres_target-postgres_1 bash\"\r\n\r\nroot@be07c3b690d3:/code# pytest\r\n...\r\n============== 35 passed, 26 warnings in 8.84 seconds ==================\r\n```\r\n\r\n## Suggested Musical Pairing\r\nCoffee shop sounds\r\n", "created_at": "2018-11-15T16:20:11.000000Z", "updated_at": "2018-11-15T16:30:17.000000Z", "closed_at": "2018-11-15T16:30:14.000000Z", "merged_at": "2018-11-15T16:30:14.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175438933, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/35#pullrequestreview-175438933", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/35", "commit_id": "67b9c948a710d9a5c39b204a4ed455a55f8e7744", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/34", "id": "231218285", "number": 34, "state": "closed", "title": "Housekeeping/logger warn is deprecated", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/33\r\n\r\n## Notes\r\nThis looks much better in the testing output!\r\n\r\n```\r\n=========================================================================================== test session starts ============================================================================================\r\nplatform linux -- Python 3.7.1, pytest-3.9.3, py-1.7.0, pluggy-0.8.0\r\nrootdir: /code, inifile: pytest.ini\r\ncollected 35 items                                                                                                                                                                                         \r\n\r\ntests/test_BufferedSingerStream.py .....                                                                                                                                                             [ 14%]\r\ntests/test_json_schema.py ............                                                                                                                                                               [ 48%]\r\ntests/test_postgres.py ..................                                                                                                                                                            [100%]\r\n\r\n======================================================================================== 35 passed in 6.73 seconds =========================================================================================\r\n```\r\n\r\nNamely:\r\n\r\n> ====== 35 passed in 6.73 seconds ========\r\n\r\nUsually that was littered with various warnings and whatnot.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/ugly-casanova/barnacles", "created_at": "2018-11-15T14:42:39.000000Z", "updated_at": "2018-11-15T16:29:54.000000Z", "closed_at": "2018-11-15T16:29:50.000000Z", "merged_at": "2018-11-15T16:29:50.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175439252, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/34#pullrequestreview-175439252", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/34", "commit_id": "5b338f224e5cf8ebe228629757b9b759d209d165", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/32", "id": "231202098", "number": 32, "state": "closed", "title": "Fix/empty string", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/7#issuecomment-438861733\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/planned_obsolescence/mixed-bizness", "created_at": "2018-11-15T13:54:11.000000Z", "updated_at": "2018-11-15T14:43:09.000000Z", "closed_at": "2018-11-15T14:28:17.000000Z", "merged_at": "2018-11-15T14:28:16.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175367350, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/32#pullrequestreview-175367350", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/32", "commit_id": "218d979262a7f1cb84f59154c8e9e2cee0a6a61a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175373391, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/32#pullrequestreview-175373391", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/32", "commit_id": "925011b18bb63143d47b3e4c449e543b541d61ab", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175367350, "id": 233856765, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzg1Njc2NQ==", "diff_hunk": "@@ -561,15 +564,30 @@ def transform():\n             try:\n                 row = next(rows)\n                 with io.StringIO() as out:\n-                    ## Serialize fields which are not present but have default values set\n-                    for prop in default_fields:\n-                        if not prop in row:\n+                    for prop in headers:\n+                        ## Serialize fields which are not present but have default values set\n+                        if prop in default_fields \\\n+                                and not prop in row:\n                             row[prop] = target_table_json_schema['properties'][prop]['default']\n \n-                    ## Serialize datetime to postgres compatible format\n-                    for prop in datetime_fields:\n-                        if prop in row:\n+                        ## Serialize datetime to postgres compatible format\n+                        if prop in datetime_fields \\\n+                                and prop in row:\n                             row[prop] = self.get_postgres_datetime(row[prop])\n+\n+                        ## Serialize NULL default value\n+                        if row.get(prop, False) == RESERVED_NULL_DEFAULT:\n+                            self.logger.warn('Reserved {} value found at: {}.{}.{}'.format(", "path": "target_postgres/postgres.py", "position": null, "original_position": 42, "commit_id": "925011b18bb63143d47b3e4c449e543b541d61ab", "original_commit_id": "218d979262a7f1cb84f59154c8e9e2cee0a6a61a", "user": {"login": "awm33", "id": 3846080}, "body": "I'd add a little more clarification here, that the reserved value will be intepretted as literally NULL.", "created_at": "2018-11-15T14:15:28.000000Z", "updated_at": "2018-11-15T14:26:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/32#discussion_r233856765", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/32", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "id": "230985330", "number": 31, "state": "closed", "title": "Fix/null default", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nJSONSchema defines a `default` field to hint to validators, etc., that the given property does not need to meet it's `not null` constraint, and that if this failure case is reached, to simply use the default instead.\r\n\r\nPresently, we do not handle a couple things:\r\n- create a table with defaults\r\n- our persist method doesn't play nice with default values in general\r\n  - even if the column has a default set in SQL, it will not utilize that when the copy places `null`\r\n  - this becomes especially tricky when you have mixed null/not-null values in a csv column...\r\n\r\n## Notes\r\nIf there is a simple solution to get the CSV copy to play nicely, then I think we should use that.\r\n\r\nThis brute force approach works though.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/ugly-casanova/barnacles", "created_at": "2018-11-14T21:19:55.000000Z", "updated_at": "2018-11-14T23:05:16.000000Z", "closed_at": "2018-11-14T23:04:00.000000Z", "merged_at": "2018-11-14T23:04:00.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175113696, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#pullrequestreview-175113696", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175117089, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#pullrequestreview-175117089", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175118167, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#pullrequestreview-175118167", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175122005, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#pullrequestreview-175122005", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175122222, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#pullrequestreview-175122222", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175113696, "id": 233648282, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY0ODI4Mg==", "diff_hunk": "@@ -101,12 +101,14 @@ def is_nullable(schema):\n \n \n def _helper_simplify(root_schema, child_schema):\n+    ret_schema = {}\n+\n     if not child_schema:\n-        return child_schema\n+        pass", "path": "target_postgres/json_schema.py", "position": null, "original_position": 8, "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "original_commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "user": {"login": "awm33", "id": 3846080}, "body": "Could the if just be removed here then? Does it really not affect thel ogic?", "created_at": "2018-11-14T22:37:20.000000Z", "updated_at": "2018-11-14T23:00:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#discussion_r233648282", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175113696, "id": 233648933, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY0ODkzMw==", "diff_hunk": "@@ -36,6 +36,10 @@\n             'name': {\n                 'type': ['string']\n             },\n+            'paw_size': {\n+                'type': ['integer'],\n+                'default': 314159", "path": "tests/fixtures.py", "position": 6, "original_position": 6, "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "original_commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "user": {"login": "awm33", "id": 3846080}, "body": "That's a big paw", "created_at": "2018-11-14T22:39:40.000000Z", "updated_at": "2018-11-14T23:00:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#discussion_r233648933", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175117089, "id": 233651010, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY1MTAxMA==", "diff_hunk": "@@ -36,6 +36,10 @@\n             'name': {\n                 'type': ['string']\n             },\n+            'paw_size': {\n+                'type': ['integer'],\n+                'default': 314159", "path": "tests/fixtures.py", "position": 6, "original_position": 6, "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "original_commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "These cats have paws for pi and pi alone", "created_at": "2018-11-14T22:47:09.000000Z", "updated_at": "2018-11-14T23:00:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#discussion_r233651010", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "author_association": "COLLABORATOR", "in_reply_to_id": 233648933, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175118167, "id": 233651885, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY1MTg4NQ==", "diff_hunk": "@@ -101,12 +101,14 @@ def is_nullable(schema):\n \n \n def _helper_simplify(root_schema, child_schema):\n+    ret_schema = {}\n+\n     if not child_schema:\n-        return child_schema\n+        pass", "path": "target_postgres/json_schema.py", "position": null, "original_position": 8, "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "original_commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Actually, I think that case covered up another bug. Schemas are totally allowed to be completely empty. Those reference objects types. I'll add a better check for that.", "created_at": "2018-11-14T22:50:36.000000Z", "updated_at": "2018-11-14T23:00:58.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#discussion_r233651885", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "author_association": "COLLABORATOR", "in_reply_to_id": 233648282, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 175122005, "id": 233655028, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY1NTAyOA==", "diff_hunk": "@@ -36,6 +36,10 @@\n             'name': {\n                 'type': ['string']\n             },\n+            'paw_size': {\n+                'type': ['integer'],\n+                'default': 314159", "path": "tests/fixtures.py", "position": 6, "original_position": 6, "commit_id": "51c95459b5810ff2120f1c4f05c644efb3724296", "original_commit_id": "4298f5883ee387bab0fd3a72fa2120c85769554c", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann cat pi https://i.pinimg.com/originals/60/46/5d/60465da88007d8e5b28f265c7805abce.jpg", "created_at": "2018-11-14T23:02:29.000000Z", "updated_at": "2018-11-14T23:02:29.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/31#discussion_r233655028", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/31", "author_association": "MEMBER", "in_reply_to_id": 233648933, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/30", "id": "230958425", "number": 30, "state": "closed", "title": "Feature/type collision", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/12\r\n\r\nSimple pr to start detecting column type changes.\r\n\r\n## Notes\r\nFuture work on this will follow the plan laid out in #12. Presently, we need a hook/location to be able to alert about the type change. Following that we can `add_column('name__type')` and `drop_column` etc.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/phoenix/lisztomania", "created_at": "2018-11-14T19:44:26.000000Z", "updated_at": "2018-11-14T22:46:47.000000Z", "closed_at": "2018-11-14T22:46:44.000000Z", "merged_at": "2018-11-14T22:46:44.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 175112793, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/30#pullrequestreview-175112793", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/30", "commit_id": "8246694c4c47810ddf957300973ba29ed8971149", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "id": "230251700", "number": 25, "state": "closed", "title": "Update README with best practices", "user": {"login": "timvisher", "id": 34676}, "body": "Motivation\r\n----------\r\n\r\nThe README had a smill spelling error and also suggested running the\r\n`target` and `tap` in the same virtualenv. This updates it to be a bit\r\nmore in keeping with current best practices.", "created_at": "2018-11-12T20:00:59.000000Z", "updated_at": "2018-11-13T21:28:48.000000Z", "closed_at": "2018-11-13T21:28:47.000000Z", "merged_at": "2018-11-13T21:28:47.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174078812, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174078812", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174081775, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174081775", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174082508, "user": {"login": "timvisher", "id": 34676}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174082508", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "363ce1585ba70d6720f5dd604969e215b3b93d63", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174084676, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174084676", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "2bdfdfca282580b222bdba65133dc05cbe8d70f7", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174475644, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174475644", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "4f1c4bc7bcc27a21c572c61215e1a1ec8adeb1be", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174546048, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#pullrequestreview-174546048", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "commit_id": "4352a84bac97182bfa8ce5e15d31059665d93472", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174078812, "id": 232800128, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjgwMDEyOA==", "diff_hunk": "@@ -14,30 +14,32 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n \n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n+1. Create a config file with postgres connection information and target\n+   postgres schema.\n \n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n+   ```\n+   cp config-example.json /tmp/tap_config.json", "path": "README.md", "position": null, "original_position": 29, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "user": {"login": "awm33", "id": 3846080}, "body": "Can we keep the example config rather than introduce a confusing set of commands?", "created_at": "2018-11-12T20:24:31.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r232800128", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174078812, "id": 232801259, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjgwMTI1OQ==", "diff_hunk": "@@ -14,30 +14,32 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n \n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n+1. Create a config file with postgres connection information and target\n+   postgres schema.\n \n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n+   ```\n+   cp config-example.json /tmp/tap_config.json\n+\n+   [[ -n $EDITOR ]] && \"$EDITOR\" /tmp/tap_config.json \\\n+     || nano /tmp/tap_config.json\n+   ```\n+\n+1. Run `target-postgres` against a [Singer](https://singer.io) tap.\n \n-It ignores \"STATE\" type Singer messages.\n+   ```bash\n+   ~/.virtualenvs/tap-something/bin/tap-something \\\n+     | ~/.virtualenvs/target-postgres/bin/target-postgres --config config.json\n+   ```\n \n ## Known Limitations\n+- Ignore `STATE` Singer messages.", "path": "README.md", "position": null, "original_position": 44, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "user": {"login": "awm33", "id": 3846080}, "body": "*Ignores", "created_at": "2018-11-12T20:28:49.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r232801259", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174081775, "id": 232802420, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjgwMjQyMA==", "diff_hunk": "@@ -14,30 +14,32 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n \n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n+1. Create a config file with postgres connection information and target\n+   postgres schema.\n \n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n+   ```\n+   cp config-example.json /tmp/tap_config.json", "path": "README.md", "position": null, "original_position": 29, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "user": {"login": "awm33", "id": 3846080}, "body": "Also, this is a target, the file name has tap", "created_at": "2018-11-12T20:33:12.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r232802420", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "MEMBER", "in_reply_to_id": 232800128, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174082508, "id": 232802977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjgwMjk3Nw==", "diff_hunk": "@@ -14,30 +14,32 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n \n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n+1. Create a config file with postgres connection information and target\n+   postgres schema.\n \n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n+   ```\n+   cp config-example.json /tmp/tap_config.json", "path": "README.md", "position": null, "original_position": 29, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "5ca53c8b89c3c1c9680be838e9e3cc4a7ab9da5c", "user": {"login": "timvisher", "id": 34676}, "body": "\ud83e\udd26\u200d\u2642\ufe0f I didn't even notice that the `config-example.json` file was being ignored. :)", "created_at": "2018-11-12T20:35:29.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r232802977", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "CONTRIBUTOR", "in_reply_to_id": 232800128, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174084676, "id": 232804692, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjgwNDY5Mg==", "diff_hunk": "@@ -14,30 +14,41 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n-\n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n-\n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n-\n-It ignores \"STATE\" type Singer messages.\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n+\n+1. Create a config file at `/tmp/target_config.json` with postgres connection", "path": "README.md", "position": null, "original_position": 29, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "2bdfdfca282580b222bdba65133dc05cbe8d70f7", "user": {"login": "awm33", "id": 3846080}, "body": "Does maybe `~/target_config.json` make more sense for this example? Why do you want to have the config be temporary? Most people trying this out will just be running it on their laptop and want to keep the config around.", "created_at": "2018-11-12T20:41:53.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r232804692", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174475644, "id": 233131715, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzEzMTcxNQ==", "diff_hunk": "@@ -14,30 +14,41 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n-\n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n-\n-```sh\n-\ttap-something | target-postgres --config config.json\n-```\n-\n-It ignores \"STATE\" type Singer messages.\n+1. Follow the\n+   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n+   for setting up separate `tap` and `target` virtualenvs to avoid version\n+   conflicts.\n+\n+1. Create a config file at `~/singer.io/target_postgres_config.json` with\n+   postgres connection information and target postgres schema.\n+\n+   ```json\n+   {\n+     \"postgres_host\": \"localhost\",\n+     \"postgres_port\": 5432,\n+     \"postgres_database\": \"my_analytics\",\n+     \"postgres_username\": \"myuser\",\n+     \"postgres_password\": \"1234\",\n+     \"postgres_schema\": \"mytapname\"\n+   }\n+   ```\n+\n+1. Run `target-postgres` against a [Singer](https://singer.io) tap.\n+\n+   ```bash\n+   ~/.virtualenvs/tap-something/bin/tap-something \\\n+     | ~/.virtualenvs/target-postgres/bin/target-postgres \\\n+       --config /tmp/target_config.json", "path": "README.md", "position": null, "original_position": 48, "commit_id": "d0df27d5f45eb6c27be040cd30c3cc2366849055", "original_commit_id": "4f1c4bc7bcc27a21c572c61215e1a1ec8adeb1be", "user": {"login": "awm33", "id": 3846080}, "body": "This doesn't match the above", "created_at": "2018-11-13T16:54:48.000000Z", "updated_at": "2018-11-13T21:28:17.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/25#discussion_r233131715", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/25", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/27", "id": "230602082", "number": 27, "state": "closed", "title": "Housekeeping/supported versions", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/19\r\n\r\nExplicitly layout which versions of Postgres and JSON Schema we are supporting.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/grizzlybearband/two-weeks", "created_at": "2018-11-13T19:45:23.000000Z", "updated_at": "2018-11-13T21:26:09.000000Z", "closed_at": "2018-11-13T21:26:06.000000Z", "merged_at": "2018-11-13T21:26:05.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174593705, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/27#pullrequestreview-174593705", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/27", "commit_id": "913c35e8b80346d949809eb6b135e45c08fcd6cd", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/26", "id": "230325760", "number": 26, "state": "closed", "title": "Feature/primary key changes fail", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/15\r\n\r\nSimple PR to identify PK changes in a target table from a given stream.\r\n\r\n## Suggested Musical Pairing\r\nCoffee Shop Sounds", "created_at": "2018-11-13T02:11:44.000000Z", "updated_at": "2018-11-13T02:24:46.000000Z", "closed_at": "2018-11-13T02:24:41.000000Z", "merged_at": "2018-11-13T02:24:41.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174171231, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/26#pullrequestreview-174171231", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/26", "commit_id": "cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "id": "230219375", "number": 24, "state": "closed", "title": "Feature/validate streamed data against known json schema", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/21\r\n\r\n## Notes\r\nAttempting to _persist_ a record even though validation failed is not something I worked on in this pr. I initially attempted to provide this level of configuration, however, this introduces a number of...fun...intricacies.\r\n\r\nFor the time being, records which _do not_ meet validation standards are placed into (effectively) a dead letter queue, whose size is configurable.\r\n\r\nAn open question is on whether we should be flushing those records in the same manner as the other buffers (as they too can fill up and cause problems for memory etc.). I'm awaiting input from a reviewer as to what to do in this vein.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/talkingheads/take-me-to-the-river-live?in=talkingheads/sets/stop-making-sense-2", "created_at": "2018-11-12T17:52:55.000000Z", "updated_at": "2018-11-13T02:05:21.000000Z", "closed_at": "2018-11-13T02:05:18.000000Z", "merged_at": "2018-11-13T02:05:18.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174039501, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#pullrequestreview-174039501", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "commit_id": "c93830b831952bde55ef8591b812df9a5a573278", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174044178, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#pullrequestreview-174044178", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "commit_id": "c93830b831952bde55ef8591b812df9a5a573278", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174142674, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#pullrequestreview-174142674", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "commit_id": "7baf93a91559024a58e927f24ad1e30ca4862de1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 174165660, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#pullrequestreview-174165660", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174039501, "id": 232768618, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc2ODYxOA==", "diff_hunk": "@@ -35,6 +35,16 @@ Run `target-postgres` against a [Singer](https://singer.io) stream.\n \n It ignores \"STATE\" type Singer messages.\n \n+### Configuration", "path": "README.md", "position": null, "original_position": 4, "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "original_commit_id": "c93830b831952bde55ef8591b812df9a5a573278", "user": {"login": "awm33", "id": 3846080}, "body": "Can we either remove this header and bump \"Invalid records\" up a level, or create a true configuration section with a table of all configuration file key/value options?", "created_at": "2018-11-12T18:37:38.000000Z", "updated_at": "2018-11-13T01:17:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#discussion_r232768618", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174039501, "id": 232769856, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc2OTg1Ng==", "diff_hunk": "@@ -30,7 +30,15 @@ def flush_streams(streams, target, force=False):\n         if force or stream_buffer.buffer_full:\n             flush_stream(target, stream_buffer)\n \n-def line_handler(streams, target, max_batch_rows, max_batch_size, line):\n+def report_invalid_records(streams):\n+    for stream_buffer in streams.values():\n+        if stream_buffer.peek_invalid_records():\n+            LOGGER.error(\"Invalid records detected for stream {}: {}\".format(", "path": "target_postgres/__init__.py", "position": null, "original_position": 8, "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "original_commit_id": "c93830b831952bde55ef8591b812df9a5a573278", "user": {"login": "awm33", "id": 3846080}, "body": "Since this will run every time, we may want to warn if less than invalid_records_threshold and error if at or greater than invalid_records_threshold", "created_at": "2018-11-12T18:41:46.000000Z", "updated_at": "2018-11-13T01:17:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#discussion_r232769856", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174044178, "id": 232772397, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc3MjM5Nw==", "diff_hunk": "@@ -35,6 +35,16 @@ Run `target-postgres` against a [Singer](https://singer.io) stream.\n \n It ignores \"STATE\" type Singer messages.\n \n+### Configuration", "path": "README.md", "position": null, "original_position": 4, "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "original_commit_id": "c93830b831952bde55ef8591b812df9a5a573278", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Sounds good. I'd personally lean towards the table. Should we use JSON Schema syntax for the types etc.?", "created_at": "2018-11-12T18:50:14.000000Z", "updated_at": "2018-11-13T01:17:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#discussion_r232772397", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "author_association": "COLLABORATOR", "in_reply_to_id": 232768618, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174142674, "id": 232852300, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjg1MjMwMA==", "diff_hunk": "@@ -14,26 +14,24 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n-\n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n-\n+Create a JSON config file with the following parameters, and then run `target-postgres`\n+against a [Singer](https://singer.io) stream:\n+                                                                  ", "path": "README.md", "position": null, "original_position": 21, "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "original_commit_id": "7baf93a91559024a58e927f24ad1e30ca4862de1", "user": {"login": "awm33", "id": 3846080}, "body": "Can we keep the example JSON? We can keep it simple with only the most common keys (host, database, username, password). We can also note it's an example.", "created_at": "2018-11-12T23:54:12.000000Z", "updated_at": "2018-11-13T01:17:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#discussion_r232852300", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 174142674, "id": 232852408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjg1MjQwOA==", "diff_hunk": "@@ -14,26 +14,24 @@ A [Singer](https://singer.io/) postgres target, for use with Singer streams gene\n \n ## Usage\n \n-Create a config file with postgres connection information and target postgres schema.\n-\n-```json\n-{\n-  \"postgres_host\": \"locahost\",\n-  \"postgres_port\": 5432,\n-  \"postgres_database\": \"my_analytics\",\n-  \"postgres_username\": \"myuser\",\n-  \"postgres_password\": \"1234\",\n-  \"postgres_schema\": \"mytapname\"\n-}\n-```\n-\n-Run `target-postgres` against a [Singer](https://singer.io) stream.\n-\n+Create a JSON config file with the following parameters, and then run `target-postgres`\n+against a [Singer](https://singer.io) stream:\n+                                                                  \n ```sh\n-\ttap-something | target-postgres --config config.json\n+  tap-something | target-postgres --config config.json\n ```\n-\n-It ignores \"STATE\" type Singer messages.\n+NOTE: It ignores \"STATE\" type Singer messages.postgres connection information and target postgres schema.\n+\n+| Field | Type | Default | Details |", "path": "README.md", "position": 31, "original_position": 30, "commit_id": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "original_commit_id": "7baf93a91559024a58e927f24ad1e30ca4862de1", "user": {"login": "awm33", "id": 3846080}, "body": "Love this!", "created_at": "2018-11-12T23:54:54.000000Z", "updated_at": "2018-11-13T01:17:31.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/24#discussion_r232852408", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/24", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "id": "228548758", "number": 17, "state": "closed", "title": "Feature/json schema ref support", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nThis tackles a couple things:\r\n- https://github.com/datamill-co/target-postgres/issues/7\r\n- https://github.com/datamill-co/target-postgres/issues/13\r\n\r\nAdditionally, this does a lite bit of refactoring, moving pure functions over to the `json_schema` file structure.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/sylvanesso/radio", "created_at": "2018-11-06T01:39:28.000000Z", "updated_at": "2018-11-06T23:36:07.000000Z", "closed_at": "2018-11-06T23:36:02.000000Z", "merged_at": "2018-11-06T23:36:02.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171840088, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#pullrequestreview-171840088", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "commit_id": "e4f3bd3680a9626f5243e439d7fa150fb00afd1e", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 172194937, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#pullrequestreview-172194937", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "commit_id": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171840088, "id": 230979106, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk3OTEwNg==", "diff_hunk": "@@ -0,0 +1,150 @@\n+from target_postgres import json_schema\n+from fixtures import CATS_SCHEMA\n+\n+\n+def test_is_object():\n+    assert json_schema.is_object({'type': ['object']})\n+    assert json_schema.is_object({'properties': {}})\n+    assert json_schema.is_object({})\n+\n+\n+def test_simplify_empty():\n+    assert json_schema.simplify({}) == {}\n+\n+\n+def test_simplify_types_into_arrays():\n+    assert \\\n+        json_schema.simplify(\n+            {'type': 'null'}\n+        ) \\\n+        == {'type': ['null']}\n+\n+    assert \\\n+        json_schema.simplify(\n+            {'type': ['object'],\n+             'properties': {\n+                 'a': {'type': 'string'}}}) \\\n+        == {'type': ['object'],\n+            'properties': {\n+                'a': {'type': ['string']}}}\n+\n+\n+def test_simplify_complex():\n+    assert \\\n+        json_schema.simplify({\n+            'type': ['null', 'array'],\n+            'items': {\n+                'type': 'object',\n+                'properties': {\n+                    'type': {\n+                        'type': ['null', 'string']\n+                    },\n+                    'date_administered': {\n+                        'type': 'string',\n+                        'format': 'date-time'}}}}) \\\n+        == {\n+            'type': ['null', 'array'],\n+            'items': {\n+                'type': ['object'],\n+                'properties': {\n+                    'type': {\n+                        'type': ['null', 'string']\n+                    },\n+                    'date_administered': {\n+                        'type': ['string'],\n+                        'format': 'date-time'}}}}\n+\n+    assert \\\n+        json_schema.simplify(CATS_SCHEMA['schema']) \\\n+        == {\n+            'type': ['object'],\n+            'properties': {\n+                'id': {\n+                    'type': ['integer']\n+                },\n+                'name': {\n+                    'type': ['string']\n+                },\n+                'pattern': {\n+                    'type': ['null', 'string']\n+                },\n+                'age': {\n+                    'type': ['null', 'integer']\n+                },\n+                'adoption': {\n+                    'type': ['object', 'null'],\n+                    'properties': {\n+                        'adopted_on': {\n+                            'type': ['null', 'string'],\n+                            'format': 'date-time'\n+                        },\n+                        'was_foster': {\n+                            'type': ['boolean']\n+                        },\n+                        'immunizations': {\n+                            'type': ['null', 'array'],\n+                            'items': {\n+                                'type': ['object'],\n+                                'properties': {\n+                                    'type': {\n+                                        'type': ['null', 'string']\n+                                    },\n+                                    'date_administered': {\n+                                        'type': ['null', 'string'],\n+                                        'format': 'date-time'}}}}}}}}\n+\n+\n+def test_simplify_refs():\n+    assert \\\n+        json_schema.simplify(\n+            {\n+                'definitions': {\n+                    'singleton': {\n+                        'type': 'string'\n+                    }},\n+\n+                'type': 'object',\n+\n+                'properties': {\n+                    'singleton': {'$ref': '#/definitions/singleton'}}}) \\\n+        == {'type': ['object'],\n+            'properties': {\n+                'singleton': {\n+                    'type': ['string']}}}\n+\n+    assert \\\n+        json_schema.simplify(\n+            {\n+                'definitions': {\n+                    'address': {\n+                        'type': 'object',\n+                        'properties': {\n+                            'street_address': {'type': 'string'},\n+                            'city': {'type': 'string'},\n+                            'state': {'type': 'string'}\n+                        },\n+                        'required': ['street_address', 'city', 'state']\n+                    }\n+                },\n+\n+                'type': 'object',\n+\n+                'properties': {\n+                    'billing_address': {'$ref': '#/definitions/address'},\n+                    'shipping_address': {'$ref': '#/definitions/address'}}}) \\\n+        == {'type': ['object'],\n+            'properties': {\n+                'billing_address': {\n+                    'type': ['object'],\n+                    'properties': {\n+                        'street_address': {'type': ['string']},\n+                        'city': {'type': ['string']},\n+                        'state': {'type': ['string']}\n+                    }\n+                },\n+                'shipping_address': {\n+                    'type': ['object'],\n+                    'properties': {\n+                        'street_address': {'type': ['string']},\n+                        'city': {'type': ['string']},\n+                        'state': {'type': ['string']}}}}}", "path": "tests/test_json_schema.py", "position": 179, "original_position": 150, "commit_id": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "original_commit_id": "e4f3bd3680a9626f5243e439d7fa150fb00afd1e", "user": {"login": "awm33", "id": 3846080}, "body": "@AlexanderMann Can we add a case test case when the `$ref` target is missing or not found? Maybe throw an exception with a custom message?", "created_at": "2018-11-06T01:59:02.000000Z", "updated_at": "2018-11-06T18:40:20.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#discussion_r230979106", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171840088, "id": 230979552, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk3OTU1Mg==", "diff_hunk": "@@ -1,12 +1,186 @@\n+import re\n \n-def sanitize_type(type):\n+\n+def get_type(schema):\n     \"\"\"\n-    Given a potentially non-array type instance, return an array type instance\n-    :param type: str, array\n-    :return: [type ...]\n+    Given a JSON Schema dict, extracts the simplified `type` value\n+    :param schema: dict, JSON Schema\n+    :return: [string ...]\n     \"\"\"\n+    type = schema.get('type', None)\n+    if not type:\n+        return ['object']\n \n     if isinstance(type, str):\n         return [type]\n \n     return type\n+\n+\n+def _get_ref(schema, paths):\n+    if not paths:\n+        return schema\n+\n+    return _get_ref(schema[paths[0]], paths[1:])\n+\n+\n+def get_ref(schema, ref):\n+    \"\"\"\n+    Given a JSON Schema dict, and a valid ref (`$ref`), get the JSON Schema from within schema\n+    :param schema: dict, JSON Schema\n+    :param ref: string\n+    :return: dict, JSON Schema\n+    \"\"\"\n+\n+    return _get_ref(schema,", "path": "target_postgres/json_schema.py", "position": 47, "original_position": 39, "commit_id": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "original_commit_id": "e4f3bd3680a9626f5243e439d7fa150fb00afd1e", "user": {"login": "awm33", "id": 3846080}, "body": "Should `id` based refs be supported? https://json-schema.org/understanding-json-schema/structuring.html#using-id-with-ref", "created_at": "2018-11-06T02:02:29.000000Z", "updated_at": "2018-11-06T18:40:20.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#discussion_r230979552", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171840088, "id": 230979893, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk3OTg5Mw==", "diff_hunk": "@@ -39,33 +39,58 @@ It ignores \"STATE\" type Singer messages.\n - Requires a [JSON Schema](https://json-schema.org/) for every stream.\n - Only string, string with date-time format, integer, number, boolean, object, and array types with or without null are supported. Arrays can have any of the other types listed, including objects as types within items. \n     - Example of JSON Schema types that work\n-        - ['number']\n-        - ['string']\n-        - ['string', 'null']\n+        - `['number']`\n+        - `['string']`\n+        - `['string', 'null']`\n     - Exmaple of JSON Schema types that **DO NOT** work\n-        - ['string', 'integer']\n-        - ['integer', 'number']\n-        - ['any']\n-        - ['null']\n+        - `['string', 'integer']`\n+        - `['integer', 'number']`\n+        - `['any']`\n+        - `['null']`\n - Types cannot change\n-- JSON Schema combinations such as \"anyOf\" and \"allOf\" are not supported.\n-- JSON Schema $ref is not supported.\n+- JSON Schema combinations such as `anyOf` and `allOf` are not supported.\n+- JSON Schema $ref is partially supported:\n+  - ***NOTE:*** The following limitations are known to **NOT** fail gracefully\n+  - Presently you cannot have any circular or recursive `$ref`s\n+  - `$ref`s must be present within the schema:\n+    - URI's do not work\n+    - if the `$ref` is broken, the behaviour is considered unexpected", "path": "README.md", "position": 28, "original_position": 28, "commit_id": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "original_commit_id": "e4f3bd3680a9626f5243e439d7fa150fb00afd1e", "user": {"login": "awm33", "id": 3846080}, "body": "If we add the test case and an exception message, I think we can remove this line.", "created_at": "2018-11-06T02:05:09.000000Z", "updated_at": "2018-11-06T18:40:20.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/17#discussion_r230979893", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/17", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:12:58.207882Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/22", "id": "228814457", "number": 22, "state": "closed", "title": "Add Singer data collection and sponsorship info", "user": {"login": "awm33", "id": 3846080}, "body": "", "created_at": "2018-11-06T19:51:29.000000Z", "updated_at": "2018-11-06T20:01:14.000000Z", "closed_at": "2018-11-06T20:01:11.000000Z", "merged_at": "2018-11-06T20:01:11.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/16", "id": "228428899", "number": 16, "state": "closed", "title": "Feature/docker compose development setup", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nLocal dev setup could be simpler. Additionally, there is a slight divergence between what is running in CI and what is running locally.\r\n\r\n## Testing\r\n### Functional\r\n- [x] run `docker-compose up -d --build` followed by shelling in and confirming `python setup.py pytest` works as expected\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/deathfromabove1979/nomad?in=deathfromabove1979/sets/outrage-is-now", "created_at": "2018-11-05T17:19:36.000000Z", "updated_at": "2018-11-06T02:46:08.000000Z", "closed_at": "2018-11-06T02:40:34.000000Z", "merged_at": "2018-11-06T02:40:34.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171839196, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/16#pullrequestreview-171839196", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/16", "commit_id": "1d7ea48d0d1d8a9d925028accffe493204fb2d54", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "id": "227652737", "number": 10, "state": "closed", "title": "Fix/json schema type annotations string and array", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nhttps://github.com/datamill-co/target-postgres/issues/7\r\n\r\nPresently the JSON Schema format allows for arrays OR strings to be present in the `type` field. This codebase doesn't quite like the latter...\r\n\r\n## Notes\r\nPlease read below rationale and next steps as they offer some other ideas I think could be pulled off quickly.\r\n\r\n## Rationale to Approach\r\n`target-postgres` leverages many of the benefits of mutability. As such, it can become quite difficult to know where a value is being set/handled/coming from.\r\n\r\nI first approached this problem by trying to pull the JSON Schema out into it's own class and proceeding in a very OO forward fashion. The diff for this was incredibly large. Instead of continuing down that path, I instead decided to highlight the places where we are playing with the `type` attr. by explicitly referencing only one helper function. This will make updating any related code around this much simpler in the future.\r\n\r\n## Next Steps\r\nI think there are some logical next steps that _could_ be taken here, but are now non-pressing (aside from code readability etc.):\r\n- move all schema helper fns over into the `json_schema` file\r\n  - things like `to_sql` `from_sql` etc.\r\n- upon passing the schema into the process (ie, in `main`), make it immutable to have the testing highlight all of the places where we are either making assumptions or munging data\r\n- move all conditional checks about the schema over into `json_schema` as helpers (ie, `is_nullable`) etc. so that the underlying structure can be changed at any point in the future\r\n  - make these actually handle the logic they are supposed to, and ignore whether values are `arrays` or `strings`\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/rjd2-official/see-you-leave", "created_at": "2018-11-01T15:12:01.000000Z", "updated_at": "2018-11-05T16:27:43.000000Z", "closed_at": "2018-11-05T16:27:39.000000Z", "merged_at": "2018-11-05T16:27:39.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 170836325, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-170836325", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171254558, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-171254558", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171254700, "user": {"login": "AlexanderMann", "id": 3885029}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-171254700", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171260123, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-171260123", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171313101, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "COMMENTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-171313101", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "0b18cf7a1dbea89564fc8e80c3f9f5dd08275211", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 171639672, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#pullrequestreview-171639672", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 170836325, "id": 230161092, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDE2MTA5Mg==", "diff_hunk": "@@ -9,6 +9,8 @@\n import arrow\n from psycopg2 import sql\n \n+import target_postgres.json_schema as JSONSchema", "path": "target_postgres/postgres.py", "position": null, "original_position": 4, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "user": {"login": "awm33", "id": 3846080}, "body": "I actually think keeping it as `json_schema` would be more pythonic. Capitalized words are generally used for classes, which below made me thing you had created a JSONSchema class.", "created_at": "2018-11-01T19:05:28.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230161092", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 170836325, "id": 230161862, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDE2MTg2Mg==", "diff_hunk": "@@ -9,6 +9,8 @@\n import arrow\n from psycopg2 import sql\n \n+import target_postgres.json_schema as JSONSchema\n+", "path": "target_postgres/postgres.py", "position": null, "original_position": 5, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "user": {"login": "awm33", "id": 3846080}, "body": "This is one thing it pep 8 I kind of like but generally there are three import groups with a line in between:\r\n```\r\nbuilt in packages/modules\r\n\r\n3rd-party packages/modules\r\n\r\npackage internal packages/modules\r\n```\r\n\r\n```\r\nimport io\r\nimport re\r\nimport csv\r\nimport uuid\r\nimport json\r\nfrom functools import partial\r\nfrom copy import deepcopy\r\n\r\nimport arrow\r\nfrom psycopg2 import sql\r\n\r\nfrom target_postgres import json_schema\r\nfrom target_postgres.singer_stream import (\r\n    SINGER_RECEIVED_AT,\r\n    SINGER_BATCHED_AT,\r\n    SINGER_SEQUENCE,\r\n    SINGER_TABLE_VERSION,\r\n    SINGER_PK,\r\n    SINGER_SOURCE_PK_PREFIX,\r\n    SINGER_LEVEL\r\n)\r\n```", "created_at": "2018-11-01T19:07:56.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230161862", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171254558, "id": 230494788, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5NDc4OA==", "diff_hunk": "@@ -9,6 +9,8 @@\n import arrow\n from psycopg2 import sql\n \n+import target_postgres.json_schema as JSONSchema", "path": "target_postgres/postgres.py", "position": null, "original_position": 4, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Yeah, the reason I _didn't_ do that here was that the variable `json_schema` is...everywhere...in this file. Due to this, I figured it'd be far simpler to have a separate PR which only makes the correction to the names as a pure refactor, thus keeping the meat of this PR tiny and focused. I'm happy to make that change here as well in a single comment!", "created_at": "2018-11-02T20:12:44.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230494788", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "COLLABORATOR", "in_reply_to_id": 230161092, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171254700, "id": 230494899, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5NDg5OQ==", "diff_hunk": "@@ -9,6 +9,8 @@\n import arrow\n from psycopg2 import sql\n \n+import target_postgres.json_schema as JSONSchema\n+", "path": "target_postgres/postgres.py", "position": null, "original_position": 5, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "Easily done!", "created_at": "2018-11-02T20:13:10.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230494899", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "COLLABORATOR", "in_reply_to_id": 230161862, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171260123, "id": 230499389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5OTM4OQ==", "diff_hunk": "@@ -9,6 +9,8 @@\n import arrow\n from psycopg2 import sql\n \n+import target_postgres.json_schema as JSONSchema", "path": "target_postgres/postgres.py", "position": null, "original_position": 4, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "543c461c9fc1df66316e3a690488422bd4b4a85a", "user": {"login": "awm33", "id": 3846080}, "body": "Hmm true. I also use the variable `json_schema` a lot in taps. We could rename the module to something like `json_schema_utils` or import the functions directly.", "created_at": "2018-11-02T20:30:11.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230499389", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "MEMBER", "in_reply_to_id": 230161092, "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 171313101, "id": 230542261, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDU0MjI2MQ==", "diff_hunk": "@@ -736,7 +743,7 @@ def add_column(self, cur, table_schema, table_name, column_name, data_type, defa\n     def merge_put_schemas(self, cur, table_schema, table_name, existing_schema, new_schema):\n         new_properties = new_schema['properties']\n         existing_properties = existing_schema['properties']\n-        for prop, json_schema in new_properties.items():\n+        for prop, _ in new_properties.items():", "path": "target_postgres/postgres.py", "position": null, "original_position": 240, "commit_id": "78512db63e50782d869740fd29e860e30e78ac64", "original_commit_id": "0b18cf7a1dbea89564fc8e80c3f9f5dd08275211", "user": {"login": "awm33", "id": 3846080}, "body": "We can actually change this to:\r\n`for prop in new_properties:`\r\n(I realize this was like this before, but thought I'd mention it plus I know you are diving deep into python)", "created_at": "2018-11-03T02:10:28.000000Z", "updated_at": "2018-11-05T16:23:13.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/10#discussion_r230542261", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/10", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "pull_requests", "record": {"url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/9", "id": "227435799", "number": 9, "state": "closed", "title": "Improve documentation", "user": {"login": "AlexanderMann", "id": 3885029}, "body": "# Motivation\r\nWhile working on https://github.com/datamill-co/target-postgres/pull/8 I noticed some documentation oversights. Most of the issues I saw I took the opportunity to improve via code (ie, better `setup.py` etc.).\r\n\r\n## Notes\r\nThe link to the badge is _technically_ broken right now because I pointed it at the non-building-non-existent DataMill repo instead of my personal fork where all the work was done. It'll work once DataMill is building.\r\n\r\n## TODO\r\nBetter _how to run locally_.\r\n\r\n## Suggested Musical Pairing\r\nhttps://soundcloud.com/wallowsmusic/these-days", "created_at": "2018-10-31T20:45:03.000000Z", "updated_at": "2018-11-01T14:46:13.000000Z", "closed_at": "2018-11-01T14:46:10.000000Z", "merged_at": "2018-11-01T14:46:10.000000Z", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 170467461, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "CHANGES_REQUESTED", "html_url": "https://github.com/datamill-co/target-postgres/pull/9#pullrequestreview-170467461", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/9", "commit_id": "68fa14e901e4756223b2367848eb59ee45dc7eb1", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "reviews", "record": {"id": 170715925, "user": {"login": "awm33", "id": 3846080}, "body": "", "state": "APPROVED", "html_url": "https://github.com/datamill-co/target-postgres/pull/9#pullrequestreview-170715925", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/9", "commit_id": "00d279e3ef31195357999c3a90fb148008a13b1c", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "RECORD", "stream": "review_comments", "record": {"pull_request_review_id": 170467461, "id": 229863738, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTg2MzczOA==", "diff_hunk": "@@ -48,4 +50,27 @@ It ignores \"STATE\" type Singer messages.\n - Types must be arrays\n - Types cannot change\n - JSON Schema combinations such as \"anyOf\" and \"allOf\" are not supported.\n-- JSON Schema $ref is not supported.\n\\ No newline at end of file\n+- JSON Schema $ref is not supported.\n+\n+## Developing\n+`target-postgres` utilizes [setup.py](https://python-packaging.readthedocs.io/en/latest/index.html) for package management, and [PyTest](https://docs.pytest.org/en/latest/contents.html) for testing.\n+\n+### DB\n+The nature of `target-postgres` is integration with [PostgreSQL](https://www.postgresql.org/). Due to this, many of the tests in this repo are what are traditionally considered \"integration tests\".", "path": "README.md", "position": null, "original_position": 38, "commit_id": "42baab385d8345af468da2d3c620992364df177f", "original_commit_id": "68fa14e901e4756223b2367848eb59ee45dc7eb1", "user": {"login": "awm33", "id": 3846080}, "body": "These two sentences seem not necessary. If they are kept, can we make the wording a little more plain?", "created_at": "2018-10-31T20:53:15.000000Z", "updated_at": "2018-11-01T14:45:37.000000Z", "html_url": "https://github.com/datamill-co/target-postgres/pull/9#discussion_r229863738", "pull_request_url": "https://api.github.com/repos/datamill-co/target-postgres/pulls/9", "author_association": "MEMBER", "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:10.452134Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}, "assignees": {"since": "2019-08-12T18:12:33.661657Z"}, "issues": {"since": "2019-08-12T18:12:35.765459Z"}, "comments": {"since": "2019-08-12T18:12:38.519017Z"}, "pull_requests": {"since": "2019-08-12T18:13:10.452134Z"}, "reviews": {"since": "2019-08-12T18:13:10.452134Z"}, "review_comments": {"since": "2019-08-12T18:13:10.452134Z"}}}}}
{"type": "SCHEMA", "stream": "commits", "schema": {"selected": true, "type": ["null", "object"], "additionalProperties": false, "properties": {"_sdc_repository": {"type": ["string"]}, "sha": {"type": ["null", "string"], "description": "The git commit hash"}, "url": {"type": ["null", "string"]}, "parents": {"type": ["null", "array"], "items": {"type": ["null", "object"], "additionalProperties": false, "properties": {"sha": {"type": ["null", "string"], "description": "The git hash of the parent commit"}, "url": {"type": ["null", "string"], "description": "The URL to the parent commit"}, "html_url": {"type": ["null", "string"], "description": "The HTML URL to the parent commit"}}}}, "html_url": {"type": ["null", "string"], "description": "The HTML URL to the commit"}, "comments_url": {"type": ["null", "string"], "description": "The URL to the commit's comments page"}, "commit": {"type": ["null", "object"], "additionalProperties": false, "properties": {"url": {"type": ["null", "string"], "description": "The URL to the commit"}, "tree": {"type": ["null", "object"], "additionalProperties": false, "properties": {"sha": {"type": ["null", "string"]}, "url": {"type": ["null", "string"]}}}, "author": {"type": ["null", "object"], "additionalProperties": false, "properties": {"date": {"type": ["null", "string"], "format": "date-time", "description": "The date the author committed the change"}, "name": {"type": ["null", "string"], "description": "The author's name"}, "email": {"type": ["null", "string"], "description": "The author's email"}}}, "message": {"type": ["null", "string"], "description": "The commit message"}, "committer": {"type": ["null", "object"], "additionalProperties": false, "properties": {"date": {"type": ["null", "string"], "format": "date-time", "description": "The date the committer committed the change"}, "name": {"type": ["null", "string"], "description": "The committer's name"}, "email": {"type": ["null", "string"], "description": "The committer's email"}}}, "comment_count": {"type": ["null", "integer"], "description": "The number of comments on the commit"}}}}}, "key_properties": ["sha"]}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4f87ebb923cd7929ea86191fa7857249bffba7e7", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-08-12T18:06:28.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-12T18:06:28.000000Z"}, "message": "Merge pull request #137 from AlexanderMann/release/0_1_9\n\nRelease/0 1 9", "tree": {"sha": "57c2d1ed172eb6e765b25aaba1ae4e586ed85912", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/57c2d1ed172eb6e765b25aaba1ae4e586ed85912"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4f87ebb923cd7929ea86191fa7857249bffba7e7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f87ebb923cd7929ea86191fa7857249bffba7e7", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f87ebb923cd7929ea86191fa7857249bffba7e7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f87ebb923cd7929ea86191fa7857249bffba7e7/comments", "parents": [{"sha": "259fc4df63c7e284bc6dfe9206b75335985cdfbb", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/259fc4df63c7e284bc6dfe9206b75335985cdfbb", "html_url": "https://github.com/datamill-co/target-postgres/commit/259fc4df63c7e284bc6dfe9206b75335985cdfbb"}, {"sha": "d2bd63e7aa001641ac236fecc7d2ad18313b609a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d2bd63e7aa001641ac236fecc7d2ad18313b609a", "html_url": "https://github.com/datamill-co/target-postgres/commit/d2bd63e7aa001641ac236fecc7d2ad18313b609a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d2bd63e7aa001641ac236fecc7d2ad18313b609a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-12T18:05:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-12T18:05:33.000000Z"}, "message": "Bump: setup.py to 0.1.9", "tree": {"sha": "57c2d1ed172eb6e765b25aaba1ae4e586ed85912", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/57c2d1ed172eb6e765b25aaba1ae4e586ed85912"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d2bd63e7aa001641ac236fecc7d2ad18313b609a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d2bd63e7aa001641ac236fecc7d2ad18313b609a", "html_url": "https://github.com/datamill-co/target-postgres/commit/d2bd63e7aa001641ac236fecc7d2ad18313b609a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d2bd63e7aa001641ac236fecc7d2ad18313b609a/comments", "parents": [{"sha": "e7e214058dd6e2b6b09a20df5db857f1439722ce", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7e214058dd6e2b6b09a20df5db857f1439722ce", "html_url": "https://github.com/datamill-co/target-postgres/commit/e7e214058dd6e2b6b09a20df5db857f1439722ce"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e7e214058dd6e2b6b09a20df5db857f1439722ce", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-12T18:05:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-12T18:05:03.000000Z"}, "message": "CHANGELOG: Update with 0.1.9 changes", "tree": {"sha": "62b303b77ae2f706b64e4129cc183975b2a16caf", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/62b303b77ae2f706b64e4129cc183975b2a16caf"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e7e214058dd6e2b6b09a20df5db857f1439722ce", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7e214058dd6e2b6b09a20df5db857f1439722ce", "html_url": "https://github.com/datamill-co/target-postgres/commit/e7e214058dd6e2b6b09a20df5db857f1439722ce", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7e214058dd6e2b6b09a20df5db857f1439722ce/comments", "parents": [{"sha": "259fc4df63c7e284bc6dfe9206b75335985cdfbb", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/259fc4df63c7e284bc6dfe9206b75335985cdfbb", "html_url": "https://github.com/datamill-co/target-postgres/commit/259fc4df63c7e284bc6dfe9206b75335985cdfbb"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "259fc4df63c7e284bc6dfe9206b75335985cdfbb", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-08-12T17:49:36.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-12T17:49:36.000000Z"}, "message": "Merge pull request #135 from AlexanderMann/fix/activate_version-not-flushing-buffer\n\nFix/activate version not flushing buffer", "tree": {"sha": "d3e06830afa2f54844e8070335288395d681aa7e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d3e06830afa2f54844e8070335288395d681aa7e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/259fc4df63c7e284bc6dfe9206b75335985cdfbb", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/259fc4df63c7e284bc6dfe9206b75335985cdfbb", "html_url": "https://github.com/datamill-co/target-postgres/commit/259fc4df63c7e284bc6dfe9206b75335985cdfbb", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/259fc4df63c7e284bc6dfe9206b75335985cdfbb/comments", "parents": [{"sha": "870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "html_url": "https://github.com/datamill-co/target-postgres/commit/870e8bc375266107b0f1b9cc6ff3072b4cb541ec"}, {"sha": "513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "html_url": "https://github.com/datamill-co/target-postgres/commit/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:31:23.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:31:55.000000Z"}, "message": "Fix: Flush single stream after writing batch for activate version", "tree": {"sha": "d3e06830afa2f54844e8070335288395d681aa7e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d3e06830afa2f54844e8070335288395d681aa7e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "html_url": "https://github.com/datamill-co/target-postgres/commit/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/513c1dc1172a5d02886c3e3c9a6e3b75d6efe433/comments", "parents": [{"sha": "76cea77f96f946e55f81cba3389c01e624583aca", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76cea77f96f946e55f81cba3389c01e624583aca", "html_url": "https://github.com/datamill-co/target-postgres/commit/76cea77f96f946e55f81cba3389c01e624583aca"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "76cea77f96f946e55f81cba3389c01e624583aca", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:25:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:31:55.000000Z"}, "message": "Refactor: Make flushing a single stream via state tracker possible", "tree": {"sha": "ca624361e4f1191c172128085cb6667bf29c640f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ca624361e4f1191c172128085cb6667bf29c640f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/76cea77f96f946e55f81cba3389c01e624583aca", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76cea77f96f946e55f81cba3389c01e624583aca", "html_url": "https://github.com/datamill-co/target-postgres/commit/76cea77f96f946e55f81cba3389c01e624583aca", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76cea77f96f946e55f81cba3389c01e624583aca/comments", "parents": [{"sha": "c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "html_url": "https://github.com/datamill-co/target-postgres/commit/c43d31afd57e1b74bc72d8b98b38110f8fa57d34"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:20:02.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:20:02.000000Z"}, "message": "Fail: Activate version persisting too many records", "tree": {"sha": "54d5519f385bf9afab64e95742d9d868919b7382", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/54d5519f385bf9afab64e95742d9d868919b7382"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "html_url": "https://github.com/datamill-co/target-postgres/commit/c43d31afd57e1b74bc72d8b98b38110f8fa57d34", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c43d31afd57e1b74bc72d8b98b38110f8fa57d34/comments", "parents": [{"sha": "825acec3611e1e6fa4f03dceb3ff377b70526a82", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/825acec3611e1e6fa4f03dceb3ff377b70526a82", "html_url": "https://github.com/datamill-co/target-postgres/commit/825acec3611e1e6fa4f03dceb3ff377b70526a82"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "825acec3611e1e6fa4f03dceb3ff377b70526a82", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:19:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:19:47.000000Z"}, "message": "Refactor: Run prettier on test_target_tools", "tree": {"sha": "c0d4eb684bbe5b91b64de778a4997d1c602bb46c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c0d4eb684bbe5b91b64de778a4997d1c602bb46c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/825acec3611e1e6fa4f03dceb3ff377b70526a82", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/825acec3611e1e6fa4f03dceb3ff377b70526a82", "html_url": "https://github.com/datamill-co/target-postgres/commit/825acec3611e1e6fa4f03dceb3ff377b70526a82", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/825acec3611e1e6fa4f03dceb3ff377b70526a82/comments", "parents": [{"sha": "c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:19:20.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:19:20.000000Z"}, "message": "Fix: Activate version for fake target broken", "tree": {"sha": "9fe6a214730ef1df5e2c279e2145eaf197052219", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9fe6a214730ef1df5e2c279e2145eaf197052219"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4c3818312b6fd2ac852c34f3fd40c5d8166fe5f/comments", "parents": [{"sha": "2be1154db39023755d1b687d347cd7927661ff23", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2be1154db39023755d1b687d347cd7927661ff23", "html_url": "https://github.com/datamill-co/target-postgres/commit/2be1154db39023755d1b687d347cd7927661ff23"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2be1154db39023755d1b687d347cd7927661ff23", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:17:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-08-02T16:17:57.000000Z"}, "message": "Refactor: Move SandboxTarget to fixtures, rename to ListTarget", "tree": {"sha": "e8bb3a0ac6e5649aded3bbca8dd42f274e452e5f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e8bb3a0ac6e5649aded3bbca8dd42f274e452e5f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2be1154db39023755d1b687d347cd7927661ff23", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2be1154db39023755d1b687d347cd7927661ff23", "html_url": "https://github.com/datamill-co/target-postgres/commit/2be1154db39023755d1b687d347cd7927661ff23", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2be1154db39023755d1b687d347cd7927661ff23/comments", "parents": [{"sha": "870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "html_url": "https://github.com/datamill-co/target-postgres/commit/870e8bc375266107b0f1b9cc6ff3072b4cb541ec"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-07-31T22:39:52.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-31T22:39:52.000000Z"}, "message": "Merge pull request #130 from airhorns/performant-state-message-flush\n\nPerformant STATE message flush", "tree": {"sha": "ed4226da04b96868ba7ff9655cf492d98559a408", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ed4226da04b96868ba7ff9655cf492d98559a408"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "html_url": "https://github.com/datamill-co/target-postgres/commit/870e8bc375266107b0f1b9cc6ff3072b4cb541ec", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/870e8bc375266107b0f1b9cc6ff3072b4cb541ec/comments", "parents": [{"sha": "1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "html_url": "https://github.com/datamill-co/target-postgres/commit/1c003870a3dbb33b4e8f84ff91440fd0be5d91db"}, {"sha": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89cb8cc3ab12f4c9667b34587996543b1bceb01d", "html_url": "https://github.com/datamill-co/target-postgres/commit/89cb8cc3ab12f4c9667b34587996543b1bceb01d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "89cb8cc3ab12f4c9667b34587996543b1bceb01d", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T19:15:48.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T19:15:48.000000Z"}, "message": "Ensure the whole STATE message blob is emitted by the StreamTracker, not just the state itself", "tree": {"sha": "23e6a2cf7e22c311042dcf914fab728aefd90118", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/23e6a2cf7e22c311042dcf914fab728aefd90118"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/89cb8cc3ab12f4c9667b34587996543b1bceb01d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89cb8cc3ab12f4c9667b34587996543b1bceb01d", "html_url": "https://github.com/datamill-co/target-postgres/commit/89cb8cc3ab12f4c9667b34587996543b1bceb01d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89cb8cc3ab12f4c9667b34587996543b1bceb01d/comments", "parents": [{"sha": "e3e08db58b9f4a8f508988335b0515dc5da15d2f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e3e08db58b9f4a8f508988335b0515dc5da15d2f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e3e08db58b9f4a8f508988335b0515dc5da15d2f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e3e08db58b9f4a8f508988335b0515dc5da15d2f", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T14:05:23.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T18:28:55.000000Z"}, "message": "Factor out a module with all the exceptions for clarity and to prevent them residing in weird places to prevent circular imports", "tree": {"sha": "ae06cf43127a803b0c1b9e6040a44831c0c9f2f1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ae06cf43127a803b0c1b9e6040a44831c0c9f2f1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e3e08db58b9f4a8f508988335b0515dc5da15d2f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e3e08db58b9f4a8f508988335b0515dc5da15d2f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e3e08db58b9f4a8f508988335b0515dc5da15d2f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e3e08db58b9f4a8f508988335b0515dc5da15d2f/comments", "parents": [{"sha": "d403e2ce0556a0cb047297d93b343333c1cd6de3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d403e2ce0556a0cb047297d93b343333c1cd6de3", "html_url": "https://github.com/datamill-co/target-postgres/commit/d403e2ce0556a0cb047297d93b343333c1cd6de3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d403e2ce0556a0cb047297d93b343333c1cd6de3", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-29T15:29:25.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T18:28:54.000000Z"}, "message": "Rename StateTracker to StreamTracker as it does more than just track state", "tree": {"sha": "8bb3cb145b2da0fc3e266bc497729d958caac36e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8bb3cb145b2da0fc3e266bc497729d958caac36e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d403e2ce0556a0cb047297d93b343333c1cd6de3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d403e2ce0556a0cb047297d93b343333c1cd6de3", "html_url": "https://github.com/datamill-co/target-postgres/commit/d403e2ce0556a0cb047297d93b343333c1cd6de3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d403e2ce0556a0cb047297d93b343333c1cd6de3/comments", "parents": [{"sha": "7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "html_url": "https://github.com/datamill-co/target-postgres/commit/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-07-31T15:26:27.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-31T15:26:27.000000Z"}, "message": "Merge pull request #133 from AlexanderMann/bump/singer-python-5_6_1\n\nBump: singer-python to 5.6.1", "tree": {"sha": "062e5b180216dff509ac5ea1e6402f91c604a6b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/062e5b180216dff509ac5ea1e6402f91c604a6b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "html_url": "https://github.com/datamill-co/target-postgres/commit/1c003870a3dbb33b4e8f84ff91440fd0be5d91db", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1c003870a3dbb33b4e8f84ff91440fd0be5d91db/comments", "parents": [{"sha": "86a5b5060946f5ffe911201d94270a427e126806", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/86a5b5060946f5ffe911201d94270a427e126806", "html_url": "https://github.com/datamill-co/target-postgres/commit/86a5b5060946f5ffe911201d94270a427e126806"}, {"sha": "e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-07-31T15:21:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-07-31T15:21:37.000000Z"}, "message": "Bump: singer-python to 5.6.1", "tree": {"sha": "062e5b180216dff509ac5ea1e6402f91c604a6b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/062e5b180216dff509ac5ea1e6402f91c604a6b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c83a623b2f89f16dcbc4adf5c08b495de81aa7/comments", "parents": [{"sha": "86a5b5060946f5ffe911201d94270a427e126806", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/86a5b5060946f5ffe911201d94270a427e126806", "html_url": "https://github.com/datamill-co/target-postgres/commit/86a5b5060946f5ffe911201d94270a427e126806"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-24T21:15:21.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T14:28:27.000000Z"}, "message": "Use the singer statediff tool to only emit states that are actually different than the previous state emitted.", "tree": {"sha": "1226f89758566857cfbe3924c0ebf0d9593d37e1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1226f89758566857cfbe3924c0ebf0d9593d37e1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "html_url": "https://github.com/datamill-co/target-postgres/commit/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7564d135d143b029acdf6b4ea28bd6dc7f9fa3a4/comments", "parents": [{"sha": "71e4266dc9c807bbff8ff7174f80e16a2d22d814", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/71e4266dc9c807bbff8ff7174f80e16a2d22d814", "html_url": "https://github.com/datamill-co/target-postgres/commit/71e4266dc9c807bbff8ff7174f80e16a2d22d814"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "71e4266dc9c807bbff8ff7174f80e16a2d22d814", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-24T21:11:24.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T14:28:26.000000Z"}, "message": "Emit STATE messages as they are safe to emit when all dependent buffers are flushed\n\nIn order for orchestrating systems to properly keep track of the STATE of Singer streams, target-postgres needs to emit the STATE messages it receives from the tap to stdout for the orchestrator to persist. This keeps target-postgres Singer-spec compliant and lets users pass that STATE back into the tap to incrementally load from any big sources.\n\nThe Singer spec however does not specify what exactly is in STATE messages, so, they can relate to any or all of the active streams. That means that target-postgres doesn't and can't know which records that it may have buffered in memory are \"covered\" by an incoming STATE record. If target-postgres eagerly emitted the STATE record to stdout, but didn't flush all the records, the system becomes open to inconsistency. If the STATE message were persisted by the outside orchestrator, but then the process crashed later, the buffers in target-postgres process would be lost and data dropped. The implementation prior to this commit suffers from this bug, see https://github.com/datamill-co/target-postgres/pull/120 for more discussion.\n\nThis commit prevents this bug by \"late\" flushing buffered STATE messages when all the records that arrived prior to that STATE message have been flushed. STATE messages are \"delayed\" until the records that came before have all been put on a buffered stream and then flushed. target-snowflake implements this here: https://gitlab.com/meltano/target-snowflake/blob/master/target_snowflake/target_snowflake.py.\n\nThis is accomplished by keeping a low watermark of the least recently arriving record for each stream, and upon flushing a buffer, checking to see if there are any unflushed STATE messages that have become safe to flush because they are below that watermark. The way to think about this is as a \"safety cursor\" that lags behind the incoming stream, pointing to the point in the stream where all records before that point have been saved to the database. Some records ahead of that point will likely have been saved, as different streams records may be interleaved or arriving at different rates, but because of the whole \"states are on one timeline different than each stream\" thing, the STATE message has to wait for all prior records to be flushed.\n\nThis is implemented using the StateTracker class, which wraps a bit of business logic around the old streams dict that is used to hold the BufferedSingerStream objects.", "tree": {"sha": "949f18b2a63545e610802a77db743b5b7fc53ebf", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/949f18b2a63545e610802a77db743b5b7fc53ebf"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/71e4266dc9c807bbff8ff7174f80e16a2d22d814", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/71e4266dc9c807bbff8ff7174f80e16a2d22d814", "html_url": "https://github.com/datamill-co/target-postgres/commit/71e4266dc9c807bbff8ff7174f80e16a2d22d814", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/71e4266dc9c807bbff8ff7174f80e16a2d22d814/comments", "parents": [{"sha": "992e58a147e19eecc56adcd16c0eb99f8edfe0df", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/992e58a147e19eecc56adcd16c0eb99f8edfe0df", "html_url": "https://github.com/datamill-co/target-postgres/commit/992e58a147e19eecc56adcd16c0eb99f8edfe0df"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "992e58a147e19eecc56adcd16c0eb99f8edfe0df", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-24T18:11:08.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T13:55:30.000000Z"}, "message": "Factor out a StateTracker object that can be responsible for emitting state messages when it is safe to do so", "tree": {"sha": "94d88fce85b590f3113e7518909230f49b7b242b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/94d88fce85b590f3113e7518909230f49b7b242b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/992e58a147e19eecc56adcd16c0eb99f8edfe0df", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/992e58a147e19eecc56adcd16c0eb99f8edfe0df", "html_url": "https://github.com/datamill-co/target-postgres/commit/992e58a147e19eecc56adcd16c0eb99f8edfe0df", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/992e58a147e19eecc56adcd16c0eb99f8edfe0df/comments", "parents": [{"sha": "112aa98f279cde56537bbbf49385e5a9247a71a0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/112aa98f279cde56537bbbf49385e5a9247a71a0", "html_url": "https://github.com/datamill-co/target-postgres/commit/112aa98f279cde56537bbbf49385e5a9247a71a0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "112aa98f279cde56537bbbf49385e5a9247a71a0", "commit": {"author": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-22T14:27:07.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T13:55:08.000000Z"}, "message": "Make state support / eager flushing an opt out config property", "tree": {"sha": "b64052d837af22c50768289249eabdb1664bc8f8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b64052d837af22c50768289249eabdb1664bc8f8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/112aa98f279cde56537bbbf49385e5a9247a71a0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/112aa98f279cde56537bbbf49385e5a9247a71a0", "html_url": "https://github.com/datamill-co/target-postgres/commit/112aa98f279cde56537bbbf49385e5a9247a71a0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/112aa98f279cde56537bbbf49385e5a9247a71a0/comments", "parents": [{"sha": "3c15836e682a63fce09b6bf62c04c6b88841407e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3c15836e682a63fce09b6bf62c04c6b88841407e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3c15836e682a63fce09b6bf62c04c6b88841407e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3c15836e682a63fce09b6bf62c04c6b88841407e", "commit": {"author": {"name": "Brad Price", "email": "bradleyprice@gmail.com", "date": "2019-05-20T18:44:04.000000Z"}, "committer": {"name": "Harry Brundage", "email": "harry.brundage@gmail.com", "date": "2019-07-31T13:55:08.000000Z"}, "message": "Send STATE records to stdout\n\nThis will pass all `STATE` records to stdout.\n\nThe command could now be:\n\n`tap | target >> state.json`\n\nAnd the resulting state file would look something like this:\n\n```\n{ \"users\": 1 }\n{ \"users\": 2 }\n```\n\nWith this approach, if the end user only cares about the latest\n`STATE` record, they can manually handle updating their state file:\n\n`tail -1 state.json > state.json.tmp && mv state.json.tmp state.json`", "tree": {"sha": "171840324e7a0e50fddd36fca3f78f3ab3a483cb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/171840324e7a0e50fddd36fca3f78f3ab3a483cb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3c15836e682a63fce09b6bf62c04c6b88841407e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3c15836e682a63fce09b6bf62c04c6b88841407e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3c15836e682a63fce09b6bf62c04c6b88841407e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3c15836e682a63fce09b6bf62c04c6b88841407e/comments", "parents": [{"sha": "86a5b5060946f5ffe911201d94270a427e126806", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/86a5b5060946f5ffe911201d94270a427e126806", "html_url": "https://github.com/datamill-co/target-postgres/commit/86a5b5060946f5ffe911201d94270a427e126806"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "86a5b5060946f5ffe911201d94270a427e126806", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-07-30T16:25:24.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-30T16:25:24.000000Z"}, "message": "Merge pull request #121 from bradleyprice/bump/psycopg2-to-2.8.2\n\nBump psycopg2 from 2.7.7 -> 2.8.2", "tree": {"sha": "8d67543d09f27fce395a4ce857ff20d178f29a14", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8d67543d09f27fce395a4ce857ff20d178f29a14"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/86a5b5060946f5ffe911201d94270a427e126806", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/86a5b5060946f5ffe911201d94270a427e126806", "html_url": "https://github.com/datamill-co/target-postgres/commit/86a5b5060946f5ffe911201d94270a427e126806", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/86a5b5060946f5ffe911201d94270a427e126806/comments", "parents": [{"sha": "0bad70093a60571f9d2ec883e9919ba437b4f385", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bad70093a60571f9d2ec883e9919ba437b4f385", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bad70093a60571f9d2ec883e9919ba437b4f385"}, {"sha": "a6397b052011fc3cd59f882ec637bc3b3b26cecd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a6397b052011fc3cd59f882ec637bc3b3b26cecd", "html_url": "https://github.com/datamill-co/target-postgres/commit/a6397b052011fc3cd59f882ec637bc3b3b26cecd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0bad70093a60571f9d2ec883e9919ba437b4f385", "commit": {"author": {"name": "Adam Roderick", "email": "aroder@gmail.com", "date": "2019-07-25T21:38:52.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-07-25T21:38:52.000000Z"}, "message": "windows equivalent to run target (#126)\n\n* added syntax for running in windows\r\n\r\n* multiline for windows\r\n\r\n* fix", "tree": {"sha": "b7c6aadd14815b5e7aaf26db3505c663555c76b2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b7c6aadd14815b5e7aaf26db3505c663555c76b2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0bad70093a60571f9d2ec883e9919ba437b4f385", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bad70093a60571f9d2ec883e9919ba437b4f385", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bad70093a60571f9d2ec883e9919ba437b4f385", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bad70093a60571f9d2ec883e9919ba437b4f385/comments", "parents": [{"sha": "dc4ed8f85cbbca798d81f90c9dae7447c645636d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc4ed8f85cbbca798d81f90c9dae7447c645636d", "html_url": "https://github.com/datamill-co/target-postgres/commit/dc4ed8f85cbbca798d81f90c9dae7447c645636d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dc4ed8f85cbbca798d81f90c9dae7447c645636d", "commit": {"author": {"name": "Mihir", "email": "2125849+citruspi@users.noreply.github.com", "date": "2019-06-11T15:24:49.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-06-11T15:24:49.000000Z"}, "message": "Enable Configuration of SSL (#124)\n\n* Enabled configuration of SSL options when connecting to Postgres\r\n\r\n* Added documentation re: Postgres SSL options to the readme", "tree": {"sha": "7289885cce62b4397153548c6644c34ac0229cf9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7289885cce62b4397153548c6644c34ac0229cf9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dc4ed8f85cbbca798d81f90c9dae7447c645636d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc4ed8f85cbbca798d81f90c9dae7447c645636d", "html_url": "https://github.com/datamill-co/target-postgres/commit/dc4ed8f85cbbca798d81f90c9dae7447c645636d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc4ed8f85cbbca798d81f90c9dae7447c645636d/comments", "parents": [{"sha": "2b11567582d8cfb6859a8db00141c15cde4ddb3d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b11567582d8cfb6859a8db00141c15cde4ddb3d", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b11567582d8cfb6859a8db00141c15cde4ddb3d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2b11567582d8cfb6859a8db00141c15cde4ddb3d", "commit": {"author": {"name": "Bradley Price", "email": "bradleyprice@gmail.com", "date": "2019-06-06T19:20:53.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-06-06T19:20:53.000000Z"}, "message": "Fix typo disttribution -> distribution (#122)", "tree": {"sha": "b3fb46d34e241998a35337c41f52cc6b2836da94", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b3fb46d34e241998a35337c41f52cc6b2836da94"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2b11567582d8cfb6859a8db00141c15cde4ddb3d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b11567582d8cfb6859a8db00141c15cde4ddb3d", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b11567582d8cfb6859a8db00141c15cde4ddb3d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b11567582d8cfb6859a8db00141c15cde4ddb3d/comments", "parents": [{"sha": "8445b7b42b254b93980cef649d756bdc8095aaa6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8445b7b42b254b93980cef649d756bdc8095aaa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/8445b7b42b254b93980cef649d756bdc8095aaa6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a6397b052011fc3cd59f882ec637bc3b3b26cecd", "commit": {"author": {"name": "Brad Price", "email": "bradleyprice@gmail.com", "date": "2019-05-31T15:57:18.000000Z"}, "committer": {"name": "Brad Price", "email": "bradleyprice@gmail.com", "date": "2019-05-31T15:57:18.000000Z"}, "message": "trigger circleci", "tree": {"sha": "dd8a9a22668e0fd7cbd914fc6daefdfd9aadc0ee", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/dd8a9a22668e0fd7cbd914fc6daefdfd9aadc0ee"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a6397b052011fc3cd59f882ec637bc3b3b26cecd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a6397b052011fc3cd59f882ec637bc3b3b26cecd", "html_url": "https://github.com/datamill-co/target-postgres/commit/a6397b052011fc3cd59f882ec637bc3b3b26cecd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a6397b052011fc3cd59f882ec637bc3b3b26cecd/comments", "parents": [{"sha": "d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "html_url": "https://github.com/datamill-co/target-postgres/commit/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "commit": {"author": {"name": "Brad Price", "email": "bradleyprice@gmail.com", "date": "2019-05-31T04:32:51.000000Z"}, "committer": {"name": "Brad Price", "email": "bradleyprice@gmail.com", "date": "2019-05-31T04:43:09.000000Z"}, "message": "Bump psycopg2 from 2.7.7 -> 2.8.2\n\nFixes #119\n\npsycopg2 2.8 release introduced mappings between Postgresql errors\nand python exceptions.\n\nI assume this came with additional, more granular exceptions that are\nnow subclassed.\n\nIf the original code had been throwing the `IntegrityError` exception, the\ncode would have still worked, since the `NotNullValidation` is a subclass.\nHowever, since the exception is wrapped in `postgres.PostgresError` and\nit's using a matcher, the matching string had to be updated to match the\nnew exception being thrown.\n\nREFERENCES:\n* http://initd.org/psycopg/articles/2019/04/04/psycopg-28-released/\n* http://initd.org/psycopg/docs/errors.html", "tree": {"sha": "dd8a9a22668e0fd7cbd914fc6daefdfd9aadc0ee", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/dd8a9a22668e0fd7cbd914fc6daefdfd9aadc0ee"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "html_url": "https://github.com/datamill-co/target-postgres/commit/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d05ef301c24e33cf6fc652d3dc63072b1b4acaa2/comments", "parents": [{"sha": "8445b7b42b254b93980cef649d756bdc8095aaa6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8445b7b42b254b93980cef649d756bdc8095aaa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/8445b7b42b254b93980cef649d756bdc8095aaa6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8445b7b42b254b93980cef649d756bdc8095aaa6", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:57:00.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:57:00.000000Z"}, "message": "Resolving local merge in master", "tree": {"sha": "1ade94e25ea5da3c297bb4c9fb6c66a4388260b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1ade94e25ea5da3c297bb4c9fb6c66a4388260b9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8445b7b42b254b93980cef649d756bdc8095aaa6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8445b7b42b254b93980cef649d756bdc8095aaa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/8445b7b42b254b93980cef649d756bdc8095aaa6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8445b7b42b254b93980cef649d756bdc8095aaa6/comments", "parents": [{"sha": "531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "html_url": "https://github.com/datamill-co/target-postgres/commit/531ebd74eb7dd762b13bf4c6c4049babf291d5b7"}, {"sha": "0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "html_url": "https://github.com/datamill-co/target-postgres/commit/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:55:02.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-30T17:55:02.000000Z"}, "message": "Merge pull request #118 from AlexanderMann/bump/latest-dependencies\n\nBump: All dependencies to latest", "tree": {"sha": "1ade94e25ea5da3c297bb4c9fb6c66a4388260b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1ade94e25ea5da3c297bb4c9fb6c66a4388260b9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "html_url": "https://github.com/datamill-co/target-postgres/commit/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0364f53d35e70aa8fcfd1215d9ea12afc1862f6f/comments", "parents": [{"sha": "e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "html_url": "https://github.com/datamill-co/target-postgres/commit/e6daf67a5c12aa1707408ad78ae78c5ec04bc870"}, {"sha": "988ffcf3b0e1b5d3687c243b4afa541e580095f5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/988ffcf3b0e1b5d3687c243b4afa541e580095f5", "html_url": "https://github.com/datamill-co/target-postgres/commit/988ffcf3b0e1b5d3687c243b4afa541e580095f5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "988ffcf3b0e1b5d3687c243b4afa541e580095f5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:54:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:54:08.000000Z"}, "message": "Release: 0.1.8", "tree": {"sha": "1ade94e25ea5da3c297bb4c9fb6c66a4388260b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1ade94e25ea5da3c297bb4c9fb6c66a4388260b9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/988ffcf3b0e1b5d3687c243b4afa541e580095f5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/988ffcf3b0e1b5d3687c243b4afa541e580095f5", "html_url": "https://github.com/datamill-co/target-postgres/commit/988ffcf3b0e1b5d3687c243b4afa541e580095f5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/988ffcf3b0e1b5d3687c243b4afa541e580095f5/comments", "parents": [{"sha": "cac6d076164194563d777c05fe34260f401b0286", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cac6d076164194563d777c05fe34260f401b0286", "html_url": "https://github.com/datamill-co/target-postgres/commit/cac6d076164194563d777c05fe34260f401b0286"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.001101Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cac6d076164194563d777c05fe34260f401b0286", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:42:45.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:42:45.000000Z"}, "message": "Bump: test_require", "tree": {"sha": "7dfa946216294503188d51644e8dc8a16862c09c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7dfa946216294503188d51644e8dc8a16862c09c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cac6d076164194563d777c05fe34260f401b0286", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cac6d076164194563d777c05fe34260f401b0286", "html_url": "https://github.com/datamill-co/target-postgres/commit/cac6d076164194563d777c05fe34260f401b0286", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cac6d076164194563d777c05fe34260f401b0286/comments", "parents": [{"sha": "3967b1f2dfb20be4f9d1351efede052c6578600e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3967b1f2dfb20be4f9d1351efede052c6578600e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3967b1f2dfb20be4f9d1351efede052c6578600e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3967b1f2dfb20be4f9d1351efede052c6578600e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:41:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:41:53.000000Z"}, "message": "Housekeeping: We cannot update jsonschema due to singer-python", "tree": {"sha": "d56ca17c532fd8535ee36101cfbc2d5e91584b83", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d56ca17c532fd8535ee36101cfbc2d5e91584b83"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3967b1f2dfb20be4f9d1351efede052c6578600e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3967b1f2dfb20be4f9d1351efede052c6578600e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3967b1f2dfb20be4f9d1351efede052c6578600e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3967b1f2dfb20be4f9d1351efede052c6578600e/comments", "parents": [{"sha": "a7872ff700c546afae1c0e506ef887a4e5d954e9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7872ff700c546afae1c0e506ef887a4e5d954e9", "html_url": "https://github.com/datamill-co/target-postgres/commit/a7872ff700c546afae1c0e506ef887a4e5d954e9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a7872ff700c546afae1c0e506ef887a4e5d954e9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:34:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:39:33.000000Z"}, "message": "Readme: Update supported PSQL versions", "tree": {"sha": "fadc6f1008abac4ae7b97e3f25520ed38981d867", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/fadc6f1008abac4ae7b97e3f25520ed38981d867"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a7872ff700c546afae1c0e506ef887a4e5d954e9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7872ff700c546afae1c0e506ef887a4e5d954e9", "html_url": "https://github.com/datamill-co/target-postgres/commit/a7872ff700c546afae1c0e506ef887a4e5d954e9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7872ff700c546afae1c0e506ef887a4e5d954e9/comments", "parents": [{"sha": "4f57249dc991b9ab2918f5035f0540a9752cde62", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f57249dc991b9ab2918f5035f0540a9752cde62", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f57249dc991b9ab2918f5035f0540a9752cde62"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4f57249dc991b9ab2918f5035f0540a9752cde62", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:34:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:39:33.000000Z"}, "message": "Housekeeping: Add in test for 10.8 in CI", "tree": {"sha": "2a6de411db9eb0fecaab553766ed312b04c37d79", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2a6de411db9eb0fecaab553766ed312b04c37d79"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4f57249dc991b9ab2918f5035f0540a9752cde62", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f57249dc991b9ab2918f5035f0540a9752cde62", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f57249dc991b9ab2918f5035f0540a9752cde62", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f57249dc991b9ab2918f5035f0540a9752cde62/comments", "parents": [{"sha": "f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:29:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:38:22.000000Z"}, "message": "Bump: Containers in docker-compose.yml", "tree": {"sha": "a1ab62907ada2cb4937c7d3a48eb401cfe107697", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a1ab62907ada2cb4937c7d3a48eb401cfe107697"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f8e8ea565c90f1461bdd96f070d07a4d17cfacb2/comments", "parents": [{"sha": "625070665aa415dbc7930c2444e8e09393ed4a15", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/625070665aa415dbc7930c2444e8e09393ed4a15", "html_url": "https://github.com/datamill-co/target-postgres/commit/625070665aa415dbc7930c2444e8e09393ed4a15"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "625070665aa415dbc7930c2444e8e09393ed4a15", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:29:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:38:22.000000Z"}, "message": "Bump: Container versions in circle config", "tree": {"sha": "c070477f4bb496ae612ce8a14986d4ab8491fc18", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c070477f4bb496ae612ce8a14986d4ab8491fc18"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/625070665aa415dbc7930c2444e8e09393ed4a15", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/625070665aa415dbc7930c2444e8e09393ed4a15", "html_url": "https://github.com/datamill-co/target-postgres/commit/625070665aa415dbc7930c2444e8e09393ed4a15", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/625070665aa415dbc7930c2444e8e09393ed4a15/comments", "parents": [{"sha": "66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "html_url": "https://github.com/datamill-co/target-postgres/commit/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-29T19:22:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-05-30T17:38:22.000000Z"}, "message": "Bump: Singer dependency to latest\n\nArrow cannot yet run in Python 3.7\nPsycoPg2 being updated results in some errors which need to be investigated and dealt with outside of this\nJSONSchema _cannot_ be updated since Singer depends _exclusively_ on 2.6.0", "tree": {"sha": "b24c0b0a6ede670e8df32ad3a1689c27d6705c01", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b24c0b0a6ede670e8df32ad3a1689c27d6705c01"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "html_url": "https://github.com/datamill-co/target-postgres/commit/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66c1d9b99fc9cebfa3af1f4ca695b8a12d2d54d7/comments", "parents": [{"sha": "e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "html_url": "https://github.com/datamill-co/target-postgres/commit/e6daf67a5c12aa1707408ad78ae78c5ec04bc870"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T17:52:24.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T17:52:24.000000Z"}, "message": "Release: 0.1.7", "tree": {"sha": "e966676eaa0af62890f2e2b3915bb7cd45886bd5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e966676eaa0af62890f2e2b3915bb7cd45886bd5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "html_url": "https://github.com/datamill-co/target-postgres/commit/531ebd74eb7dd762b13bf4c6c4049babf291d5b7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/531ebd74eb7dd762b13bf4c6c4049babf291d5b7/comments", "parents": [{"sha": "e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "html_url": "https://github.com/datamill-co/target-postgres/commit/e6daf67a5c12aa1707408ad78ae78c5ec04bc870"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-04-16T17:42:36.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-16T17:42:36.000000Z"}, "message": "Merge pull request #113 from AlexanderMann/release/0_1_7\n\nCHANGELOG: Bug for 0.1.7", "tree": {"sha": "8d1f0ee2d41d0cbc7907ec0bab2cdaba28152c17", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8d1f0ee2d41d0cbc7907ec0bab2cdaba28152c17"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "html_url": "https://github.com/datamill-co/target-postgres/commit/e6daf67a5c12aa1707408ad78ae78c5ec04bc870", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e6daf67a5c12aa1707408ad78ae78c5ec04bc870/comments", "parents": [{"sha": "4f7aaec1a88c572ca4e7a557d1e015e11e522137", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f7aaec1a88c572ca4e7a557d1e015e11e522137", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f7aaec1a88c572ca4e7a557d1e015e11e522137"}, {"sha": "2f86d68a9c9b027d02cfc05463f75f38a34fe012", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f86d68a9c9b027d02cfc05463f75f38a34fe012", "html_url": "https://github.com/datamill-co/target-postgres/commit/2f86d68a9c9b027d02cfc05463f75f38a34fe012"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2f86d68a9c9b027d02cfc05463f75f38a34fe012", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T14:18:39.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T14:18:39.000000Z"}, "message": "CHANGELOG: More detail about 0.1.7 denesting bug", "tree": {"sha": "8d1f0ee2d41d0cbc7907ec0bab2cdaba28152c17", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8d1f0ee2d41d0cbc7907ec0bab2cdaba28152c17"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2f86d68a9c9b027d02cfc05463f75f38a34fe012", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f86d68a9c9b027d02cfc05463f75f38a34fe012", "html_url": "https://github.com/datamill-co/target-postgres/commit/2f86d68a9c9b027d02cfc05463f75f38a34fe012", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f86d68a9c9b027d02cfc05463f75f38a34fe012/comments", "parents": [{"sha": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/85a8b5fa3483aaa2637a199748e55348c2c3b2ea"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T00:33:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-16T00:33:54.000000Z"}, "message": "CHANGELOG: Bug for 0.1.7", "tree": {"sha": "489050850604c35c9190e86a89e8686ac5be95fe", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/489050850604c35c9190e86a89e8686ac5be95fe"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/85a8b5fa3483aaa2637a199748e55348c2c3b2ea", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/85a8b5fa3483aaa2637a199748e55348c2c3b2ea/comments", "parents": [{"sha": "4f7aaec1a88c572ca4e7a557d1e015e11e522137", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f7aaec1a88c572ca4e7a557d1e015e11e522137", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f7aaec1a88c572ca4e7a557d1e015e11e522137"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4f7aaec1a88c572ca4e7a557d1e015e11e522137", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-04-15T18:45:06.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-15T18:45:06.000000Z"}, "message": "Merge pull request #111 from CStejmar/fix/nested-schema-issue\n\n[bugfix] Fix for issue #109", "tree": {"sha": "f9cc4cd8bb74ee59c0143d875bb7d8a9f9cc279e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f9cc4cd8bb74ee59c0143d875bb7d8a9f9cc279e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4f7aaec1a88c572ca4e7a557d1e015e11e522137", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f7aaec1a88c572ca4e7a557d1e015e11e522137", "html_url": "https://github.com/datamill-co/target-postgres/commit/4f7aaec1a88c572ca4e7a557d1e015e11e522137", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4f7aaec1a88c572ca4e7a557d1e015e11e522137/comments", "parents": [{"sha": "8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "html_url": "https://github.com/datamill-co/target-postgres/commit/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd"}, {"sha": "3b865c09e0abe7ffacf122b574676346ad252f14", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b865c09e0abe7ffacf122b574676346ad252f14", "html_url": "https://github.com/datamill-co/target-postgres/commit/3b865c09e0abe7ffacf122b574676346ad252f14"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3b865c09e0abe7ffacf122b574676346ad252f14", "commit": {"author": {"name": "Carl Stejmar", "email": "carl.stejmar@netlight.com", "date": "2019-04-05T11:47:39.000000Z"}, "committer": {"name": "Carl Stejmar", "email": "carl.stejmar@netlight.com", "date": "2019-04-12T14:24:23.000000Z"}, "message": "[bugfix] Fix for issue #109\n\nissue: https://github.com/datamill-co/target-postgres/issues/109\n\nThe table_schemas and the table_records did not match for more complex\nand nested schemas.", "tree": {"sha": "f9cc4cd8bb74ee59c0143d875bb7d8a9f9cc279e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f9cc4cd8bb74ee59c0143d875bb7d8a9f9cc279e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3b865c09e0abe7ffacf122b574676346ad252f14", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b865c09e0abe7ffacf122b574676346ad252f14", "html_url": "https://github.com/datamill-co/target-postgres/commit/3b865c09e0abe7ffacf122b574676346ad252f14", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b865c09e0abe7ffacf122b574676346ad252f14/comments", "parents": [{"sha": "8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "html_url": "https://github.com/datamill-co/target-postgres/commit/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-04-11T18:24:17.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-11T18:24:17.000000Z"}, "message": "Merge pull request #110 from AlexanderMann/fix/nested-records--array-object-object\n\nFIX: Nested Records of objects of objects.", "tree": {"sha": "e8ba5c6a1254f8981daa5822f56275c9e2c8fc66", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e8ba5c6a1254f8981daa5822f56275c9e2c8fc66"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "html_url": "https://github.com/datamill-co/target-postgres/commit/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8d3405025011797f1ac9bd4b0ed5bfc381a6aabd/comments", "parents": [{"sha": "b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "html_url": "https://github.com/datamill-co/target-postgres/commit/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2"}, {"sha": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f59e904c3a3c444202fd5c64d8891bcaa26fe227", "html_url": "https://github.com/datamill-co/target-postgres/commit/f59e904c3a3c444202fd5c64d8891bcaa26fe227"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f59e904c3a3c444202fd5c64d8891bcaa26fe227", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-11T18:23:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-11T18:23:49.000000Z"}, "message": "Fix: Helper function not returning correct var", "tree": {"sha": "ecb9fe3cd4907e71bcb89e3ca411d0aa1ebd3761", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ecb9fe3cd4907e71bcb89e3ca411d0aa1ebd3761"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f59e904c3a3c444202fd5c64d8891bcaa26fe227", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f59e904c3a3c444202fd5c64d8891bcaa26fe227", "html_url": "https://github.com/datamill-co/target-postgres/commit/f59e904c3a3c444202fd5c64d8891bcaa26fe227", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f59e904c3a3c444202fd5c64d8891bcaa26fe227/comments", "parents": [{"sha": "c1e30f02aed6942b8dfb95c761111333370d458e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c1e30f02aed6942b8dfb95c761111333370d458e", "html_url": "https://github.com/datamill-co/target-postgres/commit/c1e30f02aed6942b8dfb95c761111333370d458e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c1e30f02aed6942b8dfb95c761111333370d458e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-10T14:07:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-10T14:07:51.000000Z"}, "message": "PR Feedback: split multi step test up into smaller easier to grok chunks", "tree": {"sha": "3d1712a69e24ef2d298f0b53116f7425634d8454", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3d1712a69e24ef2d298f0b53116f7425634d8454"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c1e30f02aed6942b8dfb95c761111333370d458e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c1e30f02aed6942b8dfb95c761111333370d458e", "html_url": "https://github.com/datamill-co/target-postgres/commit/c1e30f02aed6942b8dfb95c761111333370d458e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c1e30f02aed6942b8dfb95c761111333370d458e/comments", "parents": [{"sha": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7f8857e76df3d9ea15885131531ebc02ae61ed86", "html_url": "https://github.com/datamill-co/target-postgres/commit/7f8857e76df3d9ea15885131531ebc02ae61ed86"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7f8857e76df3d9ea15885131531ebc02ae61ed86", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-08T20:34:05.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-08T20:34:05.000000Z"}, "message": "Fail: Complex nesting in denest tests", "tree": {"sha": "b2cb258888523606a57ef25035a9f3bde2aaa08c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b2cb258888523606a57ef25035a9f3bde2aaa08c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7f8857e76df3d9ea15885131531ebc02ae61ed86", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7f8857e76df3d9ea15885131531ebc02ae61ed86", "html_url": "https://github.com/datamill-co/target-postgres/commit/7f8857e76df3d9ea15885131531ebc02ae61ed86", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7f8857e76df3d9ea15885131531ebc02ae61ed86/comments", "parents": [{"sha": "f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "html_url": "https://github.com/datamill-co/target-postgres/commit/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "commit": {"author": {"name": "Tyler Guo", "email": "tylereguo@gmail.com", "date": "2019-04-05T02:21:12.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-04-05T02:21:12.000000Z"}, "message": "Added collaboration and contributions section (#105)", "tree": {"sha": "982de122730d77583af5bc4695b2d0073aed7d9f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/982de122730d77583af5bc4695b2d0073aed7d9f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "html_url": "https://github.com/datamill-co/target-postgres/commit/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b21bc129b18c2aa6143d4a1766420c0dafc3bbf2/comments", "parents": [{"sha": "a9c8442fd49a7203559ad5d2ec28efb557689580", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9c8442fd49a7203559ad5d2ec28efb557689580", "html_url": "https://github.com/datamill-co/target-postgres/commit/a9c8442fd49a7203559ad5d2ec28efb557689580"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-04T18:27:11.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-04T18:27:11.000000Z"}, "message": "Housekeeping: Additional testing around nested arrays and objects of objects", "tree": {"sha": "60ca503b10d935ec26d28db5f369b943823b9e09", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/60ca503b10d935ec26d28db5f369b943823b9e09"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "html_url": "https://github.com/datamill-co/target-postgres/commit/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f13f41ad27f708ff3cfbe73fc135234ebcfe6b3c/comments", "parents": [{"sha": "a9c8442fd49a7203559ad5d2ec28efb557689580", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9c8442fd49a7203559ad5d2ec28efb557689580", "html_url": "https://github.com/datamill-co/target-postgres/commit/a9c8442fd49a7203559ad5d2ec28efb557689580"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a9c8442fd49a7203559ad5d2ec28efb557689580", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-04-04T18:00:44.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-04T18:00:44.000000Z"}, "message": "Merge pull request #108 from AlexanderMann/feature/metrics\n\nFeature: init singer.metrics usage", "tree": {"sha": "2866c76b6aa6818659bc1267410e6cce9c6ef3d4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2866c76b6aa6818659bc1267410e6cce9c6ef3d4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a9c8442fd49a7203559ad5d2ec28efb557689580", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9c8442fd49a7203559ad5d2ec28efb557689580", "html_url": "https://github.com/datamill-co/target-postgres/commit/a9c8442fd49a7203559ad5d2ec28efb557689580", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9c8442fd49a7203559ad5d2ec28efb557689580/comments", "parents": [{"sha": "2b8ed92d4f1a4ebe0403e488964997137f9266ba", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b8ed92d4f1a4ebe0403e488964997137f9266ba", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b8ed92d4f1a4ebe0403e488964997137f9266ba"}, {"sha": "365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "html_url": "https://github.com/datamill-co/target-postgres/commit/365c49ba5b65a7a7a1775ffb60c1f9709c30811e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-03T19:50:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-03T19:50:51.000000Z"}, "message": "Refactor: Use count_type over job_type for counters", "tree": {"sha": "2866c76b6aa6818659bc1267410e6cce9c6ef3d4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2866c76b6aa6818659bc1267410e6cce9c6ef3d4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "html_url": "https://github.com/datamill-co/target-postgres/commit/365c49ba5b65a7a7a1775ffb60c1f9709c30811e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/365c49ba5b65a7a7a1775ffb60c1f9709c30811e/comments", "parents": [{"sha": "3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "html_url": "https://github.com/datamill-co/target-postgres/commit/3e3a72ca1252f10f84e83987c6a67c7ce6afd950"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-02T17:10:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-02T22:44:05.000000Z"}, "message": "Fix: Update metrics job_type values to be clearer", "tree": {"sha": "d11d27950f6ace5244768684ebfbf4d3b197789a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d11d27950f6ace5244768684ebfbf4d3b197789a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "html_url": "https://github.com/datamill-co/target-postgres/commit/3e3a72ca1252f10f84e83987c6a67c7ce6afd950", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3e3a72ca1252f10f84e83987c6a67c7ce6afd950/comments", "parents": [{"sha": "5d783a32ce9adbbdd5c6b05681fea91f2d392587", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d783a32ce9adbbdd5c6b05681fea91f2d392587", "html_url": "https://github.com/datamill-co/target-postgres/commit/5d783a32ce9adbbdd5c6b05681fea91f2d392587"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5d783a32ce9adbbdd5c6b05681fea91f2d392587", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-01T19:40:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-01T19:47:51.000000Z"}, "message": "Feature: Simple extendable tags for metrics", "tree": {"sha": "d67bb22bf502b36dd90e820486ee23133e3d9799", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d67bb22bf502b36dd90e820486ee23133e3d9799"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5d783a32ce9adbbdd5c6b05681fea91f2d392587", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d783a32ce9adbbdd5c6b05681fea91f2d392587", "html_url": "https://github.com/datamill-co/target-postgres/commit/5d783a32ce9adbbdd5c6b05681fea91f2d392587", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d783a32ce9adbbdd5c6b05681fea91f2d392587/comments", "parents": [{"sha": "0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "html_url": "https://github.com/datamill-co/target-postgres/commit/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-01T19:06:07.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-04-01T19:06:07.000000Z"}, "message": "Feature: init singer.metrics usage", "tree": {"sha": "a7a1f62877cebae8c4a0c1ef116ca4f47ea04ea1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a7a1f62877cebae8c4a0c1ef116ca4f47ea04ea1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "html_url": "https://github.com/datamill-co/target-postgres/commit/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0e59c3cbdbe9ca42e3f30ccf26f47950c4a058af/comments", "parents": [{"sha": "2b8ed92d4f1a4ebe0403e488964997137f9266ba", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b8ed92d4f1a4ebe0403e488964997137f9266ba", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b8ed92d4f1a4ebe0403e488964997137f9266ba"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2b8ed92d4f1a4ebe0403e488964997137f9266ba", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-03-25T17:37:22.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-25T17:37:22.000000Z"}, "message": "Merge pull request #106 from AlexanderMann/feature/volumes-over-add-for-local-development\n\nFeature/volumes over add for local development", "tree": {"sha": "56e38d4607a886cb2a395c658f38064fdbd3e48a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/56e38d4607a886cb2a395c658f38064fdbd3e48a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2b8ed92d4f1a4ebe0403e488964997137f9266ba", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b8ed92d4f1a4ebe0403e488964997137f9266ba", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b8ed92d4f1a4ebe0403e488964997137f9266ba", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b8ed92d4f1a4ebe0403e488964997137f9266ba/comments", "parents": [{"sha": "bafb99d4ba7394019a6689752a71cf6625f7c49e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bafb99d4ba7394019a6689752a71cf6625f7c49e", "html_url": "https://github.com/datamill-co/target-postgres/commit/bafb99d4ba7394019a6689752a71cf6625f7c49e"}, {"sha": "5b9953afeb50e729d542f773b3ac3ba6963d4a78", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9953afeb50e729d542f773b3ac3ba6963d4a78", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b9953afeb50e729d542f773b3ac3ba6963d4a78"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5b9953afeb50e729d542f773b3ac3ba6963d4a78", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:30:30.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:30:30.000000Z"}, "message": "README: Document venv", "tree": {"sha": "56e38d4607a886cb2a395c658f38064fdbd3e48a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/56e38d4607a886cb2a395c658f38064fdbd3e48a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5b9953afeb50e729d542f773b3ac3ba6963d4a78", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9953afeb50e729d542f773b3ac3ba6963d4a78", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b9953afeb50e729d542f773b3ac3ba6963d4a78", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9953afeb50e729d542f773b3ac3ba6963d4a78/comments", "parents": [{"sha": "9e505a686443123a90a885453eb3ce7de4de3e20", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9e505a686443123a90a885453eb3ce7de4de3e20", "html_url": "https://github.com/datamill-co/target-postgres/commit/9e505a686443123a90a885453eb3ce7de4de3e20"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "9e505a686443123a90a885453eb3ce7de4de3e20", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:29:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:29:33.000000Z"}, "message": "Refactor: Auto format README.md", "tree": {"sha": "9a877cf5b0b196e2a6b4ef8e66a3b07dee20e62c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9a877cf5b0b196e2a6b4ef8e66a3b07dee20e62c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/9e505a686443123a90a885453eb3ce7de4de3e20", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9e505a686443123a90a885453eb3ce7de4de3e20", "html_url": "https://github.com/datamill-co/target-postgres/commit/9e505a686443123a90a885453eb3ce7de4de3e20", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9e505a686443123a90a885453eb3ce7de4de3e20/comments", "parents": [{"sha": "da612a55c3b925216f0c83d7068dbb89df297ab2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da612a55c3b925216f0c83d7068dbb89df297ab2", "html_url": "https://github.com/datamill-co/target-postgres/commit/da612a55c3b925216f0c83d7068dbb89df297ab2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "da612a55c3b925216f0c83d7068dbb89df297ab2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:23:48.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:23:48.000000Z"}, "message": "Housekeeping: Ignore venv", "tree": {"sha": "4a068ef7a52b258198e0d9c53a9f4afe6b7c38b0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4a068ef7a52b258198e0d9c53a9f4afe6b7c38b0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/da612a55c3b925216f0c83d7068dbb89df297ab2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da612a55c3b925216f0c83d7068dbb89df297ab2", "html_url": "https://github.com/datamill-co/target-postgres/commit/da612a55c3b925216f0c83d7068dbb89df297ab2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da612a55c3b925216f0c83d7068dbb89df297ab2/comments", "parents": [{"sha": "c9caad76b702505b5dc240f94bd6fc9705d4d409", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c9caad76b702505b5dc240f94bd6fc9705d4d409", "html_url": "https://github.com/datamill-co/target-postgres/commit/c9caad76b702505b5dc240f94bd6fc9705d4d409"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c9caad76b702505b5dc240f94bd6fc9705d4d409", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:15:56.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-25T16:15:56.000000Z"}, "message": "Housekeeping: Improving local development by using compose settings", "tree": {"sha": "b2edf76571711ac3f87233280702a79d5c8136a6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b2edf76571711ac3f87233280702a79d5c8136a6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c9caad76b702505b5dc240f94bd6fc9705d4d409", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c9caad76b702505b5dc240f94bd6fc9705d4d409", "html_url": "https://github.com/datamill-co/target-postgres/commit/c9caad76b702505b5dc240f94bd6fc9705d4d409", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c9caad76b702505b5dc240f94bd6fc9705d4d409/comments", "parents": [{"sha": "bafb99d4ba7394019a6689752a71cf6625f7c49e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bafb99d4ba7394019a6689752a71cf6625f7c49e", "html_url": "https://github.com/datamill-co/target-postgres/commit/bafb99d4ba7394019a6689752a71cf6625f7c49e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bafb99d4ba7394019a6689752a71cf6625f7c49e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:52:32.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-14T17:52:32.000000Z"}, "message": "Merge pull request #101 from AlexanderMann/release/0_1_6\n\nHousekeeping: Pre release for 0.1.6: bump, changelog", "tree": {"sha": "9339824fb9601f6c00c5aec4e409626fc3163210", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9339824fb9601f6c00c5aec4e409626fc3163210"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bafb99d4ba7394019a6689752a71cf6625f7c49e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bafb99d4ba7394019a6689752a71cf6625f7c49e", "html_url": "https://github.com/datamill-co/target-postgres/commit/bafb99d4ba7394019a6689752a71cf6625f7c49e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bafb99d4ba7394019a6689752a71cf6625f7c49e/comments", "parents": [{"sha": "4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "html_url": "https://github.com/datamill-co/target-postgres/commit/4007f8e1803ca35beb1d3b9ea3f7f325be715de5"}, {"sha": "2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "html_url": "https://github.com/datamill-co/target-postgres/commit/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.177594Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:51:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:51:25.000000Z"}, "message": "Housekeeping: Pre release for 0.1.6: bump, changelog", "tree": {"sha": "324a7287ebb843a0bd5dc27f87c30da759e9f93b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/324a7287ebb843a0bd5dc27f87c30da759e9f93b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "html_url": "https://github.com/datamill-co/target-postgres/commit/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c0f9cc82d935fe8e7f031361fdad4d37b265ffe/comments", "parents": [{"sha": "16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "html_url": "https://github.com/datamill-co/target-postgres/commit/16c49b47d56f396d274b2bb8616caaf0f32cfc1b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:50:47.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-14T17:50:47.000000Z"}, "message": "Merge pull request #100 from AlexanderMann/fix/hubspot-postgres-error--unknown-column-path\n\nFix/hubspot postgres error  unknown column path", "tree": {"sha": "de54d180a06794422f3331e2cc90179c58689ab6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/de54d180a06794422f3331e2cc90179c58689ab6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "html_url": "https://github.com/datamill-co/target-postgres/commit/4007f8e1803ca35beb1d3b9ea3f7f325be715de5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4007f8e1803ca35beb1d3b9ea3f7f325be715de5/comments", "parents": [{"sha": "16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "html_url": "https://github.com/datamill-co/target-postgres/commit/16c49b47d56f396d274b2bb8616caaf0f32cfc1b"}, {"sha": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "html_url": "https://github.com/datamill-co/target-postgres/commit/7e0de667da8ae9311b3b680dcd9477a1f80c93f6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:40:59.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-14T17:40:59.000000Z"}, "message": "Housekeeping: Refine error messages in sql-base", "tree": {"sha": "de54d180a06794422f3331e2cc90179c58689ab6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/de54d180a06794422f3331e2cc90179c58689ab6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "html_url": "https://github.com/datamill-co/target-postgres/commit/7e0de667da8ae9311b3b680dcd9477a1f80c93f6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7e0de667da8ae9311b3b680dcd9477a1f80c93f6/comments", "parents": [{"sha": "534b6780609582eef0fe605fd8cfc3bda11c7843", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/534b6780609582eef0fe605fd8cfc3bda11c7843", "html_url": "https://github.com/datamill-co/target-postgres/commit/534b6780609582eef0fe605fd8cfc3bda11c7843"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "534b6780609582eef0fe605fd8cfc3bda11c7843", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-11T22:38:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-11T22:41:26.000000Z"}, "message": "Fix: Unknown column path", "tree": {"sha": "9508d64c5c440a592325334a9f17ce5ef26badcb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9508d64c5c440a592325334a9f17ce5ef26badcb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/534b6780609582eef0fe605fd8cfc3bda11c7843", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/534b6780609582eef0fe605fd8cfc3bda11c7843", "html_url": "https://github.com/datamill-co/target-postgres/commit/534b6780609582eef0fe605fd8cfc3bda11c7843", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/534b6780609582eef0fe605fd8cfc3bda11c7843/comments", "parents": [{"sha": "ba78425c8ea7e0843865b50067c4deed8d3467eb", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba78425c8ea7e0843865b50067c4deed8d3467eb", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba78425c8ea7e0843865b50067c4deed8d3467eb"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ba78425c8ea7e0843865b50067c4deed8d3467eb", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-11T21:40:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-03-11T22:41:11.000000Z"}, "message": "Fail: reproduce unknown column error", "tree": {"sha": "e35d4fb60495c45f3cd83d36fcc6366964421a47", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e35d4fb60495c45f3cd83d36fcc6366964421a47"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ba78425c8ea7e0843865b50067c4deed8d3467eb", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba78425c8ea7e0843865b50067c4deed8d3467eb", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba78425c8ea7e0843865b50067c4deed8d3467eb", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba78425c8ea7e0843865b50067c4deed8d3467eb/comments", "parents": [{"sha": "16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "html_url": "https://github.com/datamill-co/target-postgres/commit/16c49b47d56f396d274b2bb8616caaf0f32cfc1b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:43:11.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-20T18:43:11.000000Z"}, "message": "Merge pull request #98 from AlexanderMann/release/0_1_5\n\nBump: 0.1.4 -> 0.1.5", "tree": {"sha": "03246c7f90b067cd6145dc1d7e74d0335a7b84df", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/03246c7f90b067cd6145dc1d7e74d0335a7b84df"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "html_url": "https://github.com/datamill-co/target-postgres/commit/16c49b47d56f396d274b2bb8616caaf0f32cfc1b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16c49b47d56f396d274b2bb8616caaf0f32cfc1b/comments", "parents": [{"sha": "d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "html_url": "https://github.com/datamill-co/target-postgres/commit/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6"}, {"sha": "b4aa7544cc87adb815cbf9322be8328be8f79a0e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4aa7544cc87adb815cbf9322be8328be8f79a0e", "html_url": "https://github.com/datamill-co/target-postgres/commit/b4aa7544cc87adb815cbf9322be8328be8f79a0e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b4aa7544cc87adb815cbf9322be8328be8f79a0e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:42:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:42:04.000000Z"}, "message": "Housekeeping: Update README", "tree": {"sha": "dfa5c63010c31791e72df30beb99973a2ab9d635", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/dfa5c63010c31791e72df30beb99973a2ab9d635"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b4aa7544cc87adb815cbf9322be8328be8f79a0e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4aa7544cc87adb815cbf9322be8328be8f79a0e", "html_url": "https://github.com/datamill-co/target-postgres/commit/b4aa7544cc87adb815cbf9322be8328be8f79a0e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4aa7544cc87adb815cbf9322be8328be8f79a0e/comments", "parents": [{"sha": "0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "html_url": "https://github.com/datamill-co/target-postgres/commit/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:40:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:40:51.000000Z"}, "message": "Housekeeping: Update CHANGELOG", "tree": {"sha": "a6a9de4c9b8fd2c7cc6360a3e5215371cbf15088", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a6a9de4c9b8fd2c7cc6360a3e5215371cbf15088"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "html_url": "https://github.com/datamill-co/target-postgres/commit/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a4df0e96f73a1a0ab79c6e739fd24808a89fed9/comments", "parents": [{"sha": "a339080281d6f0226226ca1d4bae86661228b4de", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a339080281d6f0226226ca1d4bae86661228b4de", "html_url": "https://github.com/datamill-co/target-postgres/commit/a339080281d6f0226226ca1d4bae86661228b4de"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a339080281d6f0226226ca1d4bae86661228b4de", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:38:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:38:03.000000Z"}, "message": "Bump: 0.1.4 -> 0.1.5", "tree": {"sha": "8c7fa0912950401b83373b78bcbf5892cd441ce5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8c7fa0912950401b83373b78bcbf5892cd441ce5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a339080281d6f0226226ca1d4bae86661228b4de", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a339080281d6f0226226ca1d4bae86661228b4de", "html_url": "https://github.com/datamill-co/target-postgres/commit/a339080281d6f0226226ca1d4bae86661228b4de", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a339080281d6f0226226ca1d4bae86661228b4de/comments", "parents": [{"sha": "994fa1315c8830617661f26d4a6cb42eb0017118", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/994fa1315c8830617661f26d4a6cb42eb0017118", "html_url": "https://github.com/datamill-co/target-postgres/commit/994fa1315c8830617661f26d4a6cb42eb0017118"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-02-20T18:36:13.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-20T18:36:13.000000Z"}, "message": "Merge pull request #97 from AlexanderMann/feature/empty-table-persistence\n\nFeature/empty table persistence", "tree": {"sha": "2d9fd1dc5ee6f5859683fb6d1c41f5ab92c5ada7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2d9fd1dc5ee6f5859683fb6d1c41f5ab92c5ada7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "html_url": "https://github.com/datamill-co/target-postgres/commit/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b2d00a1bf0e8b702b4e14aa4c2c5467bda42a6/comments", "parents": [{"sha": "994fa1315c8830617661f26d4a6cb42eb0017118", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/994fa1315c8830617661f26d4a6cb42eb0017118", "html_url": "https://github.com/datamill-co/target-postgres/commit/994fa1315c8830617661f26d4a6cb42eb0017118"}, {"sha": "fa67871b24c271e374b866b0fd50ac580f909818", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa67871b24c271e374b866b0fd50ac580f909818", "html_url": "https://github.com/datamill-co/target-postgres/commit/fa67871b24c271e374b866b0fd50ac580f909818"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fa67871b24c271e374b866b0fd50ac580f909818", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T16:47:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T16:48:37.000000Z"}, "message": "Feature: Empty table persistence", "tree": {"sha": "2d9fd1dc5ee6f5859683fb6d1c41f5ab92c5ada7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2d9fd1dc5ee6f5859683fb6d1c41f5ab92c5ada7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fa67871b24c271e374b866b0fd50ac580f909818", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa67871b24c271e374b866b0fd50ac580f909818", "html_url": "https://github.com/datamill-co/target-postgres/commit/fa67871b24c271e374b866b0fd50ac580f909818", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa67871b24c271e374b866b0fd50ac580f909818/comments", "parents": [{"sha": "39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "html_url": "https://github.com/datamill-co/target-postgres/commit/39a6d1bfcabc5a1c63753825371eae5cddf24c5d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T16:37:56.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-20T16:48:37.000000Z"}, "message": "Fail: Empty table persistence feature flag", "tree": {"sha": "e2868a41ecf48af85a076f626ba0bf976130bd64", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e2868a41ecf48af85a076f626ba0bf976130bd64"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "html_url": "https://github.com/datamill-co/target-postgres/commit/39a6d1bfcabc5a1c63753825371eae5cddf24c5d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/39a6d1bfcabc5a1c63753825371eae5cddf24c5d/comments", "parents": [{"sha": "994fa1315c8830617661f26d4a6cb42eb0017118", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/994fa1315c8830617661f26d4a6cb42eb0017118", "html_url": "https://github.com/datamill-co/target-postgres/commit/994fa1315c8830617661f26d4a6cb42eb0017118"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "994fa1315c8830617661f26d4a6cb42eb0017118", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:26:39.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-08T23:26:39.000000Z"}, "message": "Merge pull request #96 from AlexanderMann/release/0_1_4\n\nBump: 0.1.3 -> 0.1.4", "tree": {"sha": "191b0a53bb031cdfe3cadc42bf0c27213252cce1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/191b0a53bb031cdfe3cadc42bf0c27213252cce1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/994fa1315c8830617661f26d4a6cb42eb0017118", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/994fa1315c8830617661f26d4a6cb42eb0017118", "html_url": "https://github.com/datamill-co/target-postgres/commit/994fa1315c8830617661f26d4a6cb42eb0017118", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/994fa1315c8830617661f26d4a6cb42eb0017118/comments", "parents": [{"sha": "cef059ef29fda2d673fa7623e9522fc127456f65", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef059ef29fda2d673fa7623e9522fc127456f65", "html_url": "https://github.com/datamill-co/target-postgres/commit/cef059ef29fda2d673fa7623e9522fc127456f65"}, {"sha": "027504e773a070a5246095788e8757ac53a779c7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/027504e773a070a5246095788e8757ac53a779c7", "html_url": "https://github.com/datamill-co/target-postgres/commit/027504e773a070a5246095788e8757ac53a779c7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "027504e773a070a5246095788e8757ac53a779c7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:18:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:18:43.000000Z"}, "message": "Fix: Invalid syntax in tests", "tree": {"sha": "191b0a53bb031cdfe3cadc42bf0c27213252cce1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/191b0a53bb031cdfe3cadc42bf0c27213252cce1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/027504e773a070a5246095788e8757ac53a779c7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/027504e773a070a5246095788e8757ac53a779c7", "html_url": "https://github.com/datamill-co/target-postgres/commit/027504e773a070a5246095788e8757ac53a779c7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/027504e773a070a5246095788e8757ac53a779c7/comments", "parents": [{"sha": "1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:14:10.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:14:10.000000Z"}, "message": "Bump: 0.1.3 -> 0.1.4", "tree": {"sha": "fb410cd62d8616a8768b0533e05ef0aee20310ba", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/fb410cd62d8616a8768b0533e05ef0aee20310ba"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d9f2c3b39ecbe1da7726ba1dd0bc456e7078eaa/comments", "parents": [{"sha": "cef059ef29fda2d673fa7623e9522fc127456f65", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef059ef29fda2d673fa7623e9522fc127456f65", "html_url": "https://github.com/datamill-co/target-postgres/commit/cef059ef29fda2d673fa7623e9522fc127456f65"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cef059ef29fda2d673fa7623e9522fc127456f65", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-02-08T23:00:03.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-08T23:00:03.000000Z"}, "message": "Merge pull request #95 from AlexanderMann/fix/key_properties-canonicalized\n\nFix/key properties canonicalized", "tree": {"sha": "f4355c34f8ac4164eaedb91821cf518a2f2fbe2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f4355c34f8ac4164eaedb91821cf518a2f2fbe2e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cef059ef29fda2d673fa7623e9522fc127456f65", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef059ef29fda2d673fa7623e9522fc127456f65", "html_url": "https://github.com/datamill-co/target-postgres/commit/cef059ef29fda2d673fa7623e9522fc127456f65", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef059ef29fda2d673fa7623e9522fc127456f65/comments", "parents": [{"sha": "fef95e4257457c71383c8f2e9c47c52b0aefb30c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fef95e4257457c71383c8f2e9c47c52b0aefb30c", "html_url": "https://github.com/datamill-co/target-postgres/commit/fef95e4257457c71383c8f2e9c47c52b0aefb30c"}, {"sha": "8b8ff9139ab80f866c829e18dded1e79426af6b0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8b8ff9139ab80f866c829e18dded1e79426af6b0", "html_url": "https://github.com/datamill-co/target-postgres/commit/8b8ff9139ab80f866c829e18dded1e79426af6b0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8b8ff9139ab80f866c829e18dded1e79426af6b0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:19:24.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:19:24.000000Z"}, "message": "Fix: first pass at fix for key_properties which have to be canonicalized", "tree": {"sha": "f4355c34f8ac4164eaedb91821cf518a2f2fbe2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f4355c34f8ac4164eaedb91821cf518a2f2fbe2e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8b8ff9139ab80f866c829e18dded1e79426af6b0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8b8ff9139ab80f866c829e18dded1e79426af6b0", "html_url": "https://github.com/datamill-co/target-postgres/commit/8b8ff9139ab80f866c829e18dded1e79426af6b0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8b8ff9139ab80f866c829e18dded1e79426af6b0/comments", "parents": [{"sha": "fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:18:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:18:19.000000Z"}, "message": "Refactor: key to key_property in pre checking", "tree": {"sha": "e098fcfb2da85f73cfb2a30c59ea4cf3d4cac8e8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e098fcfb2da85f73cfb2a30c59ea4cf3d4cac8e8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc901c9f66f28c9c1fd6a38e74a105d34a4bef41/comments", "parents": [{"sha": "628b314558be1451a653945e635adb00eb451be8", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/628b314558be1451a653945e635adb00eb451be8", "html_url": "https://github.com/datamill-co/target-postgres/commit/628b314558be1451a653945e635adb00eb451be8"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "628b314558be1451a653945e635adb00eb451be8", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:16:50.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-02-08T18:16:50.000000Z"}, "message": "Fail: key_property gets canonicalized", "tree": {"sha": "b493c9ca8ba81277d75419f4cb7a830f5ef58e63", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b493c9ca8ba81277d75419f4cb7a830f5ef58e63"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/628b314558be1451a653945e635adb00eb451be8", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/628b314558be1451a653945e635adb00eb451be8", "html_url": "https://github.com/datamill-co/target-postgres/commit/628b314558be1451a653945e635adb00eb451be8", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/628b314558be1451a653945e635adb00eb451be8/comments", "parents": [{"sha": "fef95e4257457c71383c8f2e9c47c52b0aefb30c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fef95e4257457c71383c8f2e9c47c52b0aefb30c", "html_url": "https://github.com/datamill-co/target-postgres/commit/fef95e4257457c71383c8f2e9c47c52b0aefb30c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fef95e4257457c71383c8f2e9c47c52b0aefb30c", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-28T15:06:39.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-28T15:06:39.000000Z"}, "message": "Merge pull request #93 from AlexanderMann/release/0_1_3\n\nBump: target-postgres 0.1.2 -> 0.1.3", "tree": {"sha": "69adb5112adfd3db57c5971cfb0ef86fbff3fba3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/69adb5112adfd3db57c5971cfb0ef86fbff3fba3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fef95e4257457c71383c8f2e9c47c52b0aefb30c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fef95e4257457c71383c8f2e9c47c52b0aefb30c", "html_url": "https://github.com/datamill-co/target-postgres/commit/fef95e4257457c71383c8f2e9c47c52b0aefb30c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fef95e4257457c71383c8f2e9c47c52b0aefb30c/comments", "parents": [{"sha": "6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "html_url": "https://github.com/datamill-co/target-postgres/commit/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490"}, {"sha": "2e77ffc14c415351de943028d4efa6845f7269ee", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e77ffc14c415351de943028d4efa6845f7269ee", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e77ffc14c415351de943028d4efa6845f7269ee"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2e77ffc14c415351de943028d4efa6845f7269ee", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-28T01:14:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-28T01:14:16.000000Z"}, "message": "Bump: target-postgres 0.1.2 -> 0.1.3", "tree": {"sha": "69adb5112adfd3db57c5971cfb0ef86fbff3fba3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/69adb5112adfd3db57c5971cfb0ef86fbff3fba3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2e77ffc14c415351de943028d4efa6845f7269ee", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e77ffc14c415351de943028d4efa6845f7269ee", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e77ffc14c415351de943028d4efa6845f7269ee", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e77ffc14c415351de943028d4efa6845f7269ee/comments", "parents": [{"sha": "6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "html_url": "https://github.com/datamill-co/target-postgres/commit/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-28T01:08:33.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-28T01:08:33.000000Z"}, "message": "Merge pull request #92 from AlexanderMann/feature/loggging-of-schema-changes\n\nFeature/loggging of schema changes", "tree": {"sha": "1e472d10f02240893a5872a03890ad925dea0700", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1e472d10f02240893a5872a03890ad925dea0700"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "html_url": "https://github.com/datamill-co/target-postgres/commit/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6f9f448a2e5eb8c639c3a4841b2c5473d6b69490/comments", "parents": [{"sha": "1f8e585f3376fffd57c08d751b6833fe6e062163", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f8e585f3376fffd57c08d751b6833fe6e062163", "html_url": "https://github.com/datamill-co/target-postgres/commit/1f8e585f3376fffd57c08d751b6833fe6e062163"}, {"sha": "a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "html_url": "https://github.com/datamill-co/target-postgres/commit/a7eeb46467611d561983ba1a6da0c0eae8a10eeb"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T22:23:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T22:29:50.000000Z"}, "message": "Feature: Simpler to understand scheam change logging", "tree": {"sha": "1e472d10f02240893a5872a03890ad925dea0700", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1e472d10f02240893a5872a03890ad925dea0700"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "html_url": "https://github.com/datamill-co/target-postgres/commit/a7eeb46467611d561983ba1a6da0c0eae8a10eeb", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a7eeb46467611d561983ba1a6da0c0eae8a10eeb/comments", "parents": [{"sha": "ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T22:22:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T22:22:38.000000Z"}, "message": "Refactor: time.monotonic over time.time", "tree": {"sha": "1ff337b2aeaddceab19ef354fb99a35e9a6c0182", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1ff337b2aeaddceab19ef354fb99a35e9a6c0182"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff02e07f9cfd06bd0c9e87952f02807232d1a8c1/comments", "parents": [{"sha": "55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:38:40.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:38:40.000000Z"}, "message": "Housekeeping: Update changelog with logging_level feature", "tree": {"sha": "43ecfe523f2530154f0de4746f6d0d9ddd6eb847", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/43ecfe523f2530154f0de4746f6d0d9ddd6eb847"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/55ec71c3235bc11a0955b84e89f51b8cc72b8cb2/comments", "parents": [{"sha": "748685b89dd0066f1abcf03a309b8ee6464fd8a0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/748685b89dd0066f1abcf03a309b8ee6464fd8a0", "html_url": "https://github.com/datamill-co/target-postgres/commit/748685b89dd0066f1abcf03a309b8ee6464fd8a0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "748685b89dd0066f1abcf03a309b8ee6464fd8a0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:28:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:28:16.000000Z"}, "message": "Feature: upsert_table_helper logging with duration", "tree": {"sha": "b0a512e5a8e5ede10efcee0d1bf84104448344ca", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b0a512e5a8e5ede10efcee0d1bf84104448344ca"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/748685b89dd0066f1abcf03a309b8ee6464fd8a0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/748685b89dd0066f1abcf03a309b8ee6464fd8a0", "html_url": "https://github.com/datamill-co/target-postgres/commit/748685b89dd0066f1abcf03a309b8ee6464fd8a0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/748685b89dd0066f1abcf03a309b8ee6464fd8a0/comments", "parents": [{"sha": "ece52b1acb43fa4b4648779f5c6522da2649b806", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ece52b1acb43fa4b4648779f5c6522da2649b806", "html_url": "https://github.com/datamill-co/target-postgres/commit/ece52b1acb43fa4b4648779f5c6522da2649b806"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ece52b1acb43fa4b4648779f5c6522da2649b806", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:27:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T20:27:38.000000Z"}, "message": "Refactor: Use  over  everywhere for duration logging", "tree": {"sha": "e2cbfe3da31e0f7d2f727d65f28db5e45f15697f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e2cbfe3da31e0f7d2f727d65f28db5e45f15697f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ece52b1acb43fa4b4648779f5c6522da2649b806", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ece52b1acb43fa4b4648779f5c6522da2649b806", "html_url": "https://github.com/datamill-co/target-postgres/commit/ece52b1acb43fa4b4648779f5c6522da2649b806", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ece52b1acb43fa4b4648779f5c6522da2649b806/comments", "parents": [{"sha": "4ecdb15cf5241440f4d52927f049e4992edda7bc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4ecdb15cf5241440f4d52927f049e4992edda7bc", "html_url": "https://github.com/datamill-co/target-postgres/commit/4ecdb15cf5241440f4d52927f049e4992edda7bc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4ecdb15cf5241440f4d52927f049e4992edda7bc", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T19:41:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T19:41:37.000000Z"}, "message": "Feature: logging_level config option along with query level timing logs", "tree": {"sha": "3e97526d76cdb69d92a608a8ade9580860f01a37", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3e97526d76cdb69d92a608a8ade9580860f01a37"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4ecdb15cf5241440f4d52927f049e4992edda7bc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4ecdb15cf5241440f4d52927f049e4992edda7bc", "html_url": "https://github.com/datamill-co/target-postgres/commit/4ecdb15cf5241440f4d52927f049e4992edda7bc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4ecdb15cf5241440f4d52927f049e4992edda7bc/comments", "parents": [{"sha": "1f8e585f3376fffd57c08d751b6833fe6e062163", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f8e585f3376fffd57c08d751b6833fe6e062163", "html_url": "https://github.com/datamill-co/target-postgres/commit/1f8e585f3376fffd57c08d751b6833fe6e062163"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1f8e585f3376fffd57c08d751b6833fe6e062163", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-25T17:59:50.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-25T17:59:50.000000Z"}, "message": "Merge pull request #89 from AlexanderMann/fix/datetime-split-columns\n\nFix/datetime split columns", "tree": {"sha": "e1e4ae387225752f277d13cdf34890619f74050c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e1e4ae387225752f277d13cdf34890619f74050c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1f8e585f3376fffd57c08d751b6833fe6e062163", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f8e585f3376fffd57c08d751b6833fe6e062163", "html_url": "https://github.com/datamill-co/target-postgres/commit/1f8e585f3376fffd57c08d751b6833fe6e062163", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f8e585f3376fffd57c08d751b6833fe6e062163/comments", "parents": [{"sha": "d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d"}, {"sha": "11c5c79bc64490370641ba27d014420e38d3a95f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11c5c79bc64490370641ba27d014420e38d3a95f", "html_url": "https://github.com/datamill-co/target-postgres/commit/11c5c79bc64490370641ba27d014420e38d3a95f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "11c5c79bc64490370641ba27d014420e38d3a95f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T03:25:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-25T03:25:26.000000Z"}, "message": "Fix: is_datetime distinguishes between varying formats", "tree": {"sha": "d2000c367ee98853d6d87e37010021d3b2c36ae6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d2000c367ee98853d6d87e37010021d3b2c36ae6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/11c5c79bc64490370641ba27d014420e38d3a95f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11c5c79bc64490370641ba27d014420e38d3a95f", "html_url": "https://github.com/datamill-co/target-postgres/commit/11c5c79bc64490370641ba27d014420e38d3a95f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11c5c79bc64490370641ba27d014420e38d3a95f/comments", "parents": [{"sha": "a601f5c1bdcdd6275206845aa71066851742eef4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a601f5c1bdcdd6275206845aa71066851742eef4", "html_url": "https://github.com/datamill-co/target-postgres/commit/a601f5c1bdcdd6275206845aa71066851742eef4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.280990Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-22T22:45:54.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-22T22:45:54.000000Z"}, "message": "Merge pull request #90 from AlexanderMann/bump/latest-versions\n\nBump: psycopg2 2.7.6 -> 2.7.7", "tree": {"sha": "db04628cfa237a9a0d3d720dfebe15fff44f0eb9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/db04628cfa237a9a0d3d720dfebe15fff44f0eb9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9af3bf636156c7a7e0c01fc9581eaefe9a43c8d/comments", "parents": [{"sha": "a1362645b21c736fc13835de59aea77595bc8b7a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a1362645b21c736fc13835de59aea77595bc8b7a", "html_url": "https://github.com/datamill-co/target-postgres/commit/a1362645b21c736fc13835de59aea77595bc8b7a"}, {"sha": "e9972a49598a9a515b991b36d968716efe254da2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e9972a49598a9a515b991b36d968716efe254da2", "html_url": "https://github.com/datamill-co/target-postgres/commit/e9972a49598a9a515b991b36d968716efe254da2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e9972a49598a9a515b991b36d968716efe254da2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T22:19:10.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T22:19:10.000000Z"}, "message": "Bump: psycopg2 2.7.6 -> 2.7.7", "tree": {"sha": "db04628cfa237a9a0d3d720dfebe15fff44f0eb9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/db04628cfa237a9a0d3d720dfebe15fff44f0eb9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e9972a49598a9a515b991b36d968716efe254da2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e9972a49598a9a515b991b36d968716efe254da2", "html_url": "https://github.com/datamill-co/target-postgres/commit/e9972a49598a9a515b991b36d968716efe254da2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e9972a49598a9a515b991b36d968716efe254da2/comments", "parents": [{"sha": "a1362645b21c736fc13835de59aea77595bc8b7a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a1362645b21c736fc13835de59aea77595bc8b7a", "html_url": "https://github.com/datamill-co/target-postgres/commit/a1362645b21c736fc13835de59aea77595bc8b7a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a601f5c1bdcdd6275206845aa71066851742eef4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:51:07.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:51:07.000000Z"}, "message": "CHANGELOG: Init", "tree": {"sha": "e8f19d4bc1fddd620334c85c28486db3966fc2db", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e8f19d4bc1fddd620334c85c28486db3966fc2db"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a601f5c1bdcdd6275206845aa71066851742eef4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a601f5c1bdcdd6275206845aa71066851742eef4", "html_url": "https://github.com/datamill-co/target-postgres/commit/a601f5c1bdcdd6275206845aa71066851742eef4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a601f5c1bdcdd6275206845aa71066851742eef4/comments", "parents": [{"sha": "dd1060cc6c406d8dd793ba824fb485e66830367c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd1060cc6c406d8dd793ba824fb485e66830367c", "html_url": "https://github.com/datamill-co/target-postgres/commit/dd1060cc6c406d8dd793ba824fb485e66830367c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dd1060cc6c406d8dd793ba824fb485e66830367c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:24:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:25:40.000000Z"}, "message": "Refactor: Remove unused import from fixtures", "tree": {"sha": "c20b61a59544f6a9cc7d996baa5ca9e91898bbdb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c20b61a59544f6a9cc7d996baa5ca9e91898bbdb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dd1060cc6c406d8dd793ba824fb485e66830367c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd1060cc6c406d8dd793ba824fb485e66830367c", "html_url": "https://github.com/datamill-co/target-postgres/commit/dd1060cc6c406d8dd793ba824fb485e66830367c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd1060cc6c406d8dd793ba824fb485e66830367c/comments", "parents": [{"sha": "8f0a5886f175ee3bdb0f1447545611e388f8bdda", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f0a5886f175ee3bdb0f1447545611e388f8bdda", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f0a5886f175ee3bdb0f1447545611e388f8bdda"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8f0a5886f175ee3bdb0f1447545611e388f8bdda", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:08:17.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:25:40.000000Z"}, "message": "Feature: Migrate schema_version 0 to schema_version 1", "tree": {"sha": "b7a0b4d762c4004889c4109976cfd457e7973ad8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b7a0b4d762c4004889c4109976cfd457e7973ad8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8f0a5886f175ee3bdb0f1447545611e388f8bdda", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f0a5886f175ee3bdb0f1447545611e388f8bdda", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f0a5886f175ee3bdb0f1447545611e388f8bdda", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f0a5886f175ee3bdb0f1447545611e388f8bdda/comments", "parents": [{"sha": "dccd8973df6544eaef45aaf39567f350a92adec5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dccd8973df6544eaef45aaf39567f350a92adec5", "html_url": "https://github.com/datamill-co/target-postgres/commit/dccd8973df6544eaef45aaf39567f350a92adec5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dccd8973df6544eaef45aaf39567f350a92adec5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T20:43:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:25:40.000000Z"}, "message": "Fix: Table schema_version set", "tree": {"sha": "5123ebe1377f5b13468a2312d916935f44f99761", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5123ebe1377f5b13468a2312d916935f44f99761"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dccd8973df6544eaef45aaf39567f350a92adec5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dccd8973df6544eaef45aaf39567f350a92adec5", "html_url": "https://github.com/datamill-co/target-postgres/commit/dccd8973df6544eaef45aaf39567f350a92adec5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dccd8973df6544eaef45aaf39567f350a92adec5/comments", "parents": [{"sha": "e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e27e7b5d10ae389658cf15a55cf70edf2f6390f7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T20:42:46.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:25:40.000000Z"}, "message": "Fail: Table schema_version outdated", "tree": {"sha": "f608f29ecaa3138f52cb28c47d6e6302cbb63021", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f608f29ecaa3138f52cb28c47d6e6302cbb63021"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e27e7b5d10ae389658cf15a55cf70edf2f6390f7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e27e7b5d10ae389658cf15a55cf70edf2f6390f7/comments", "parents": [{"sha": "cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "html_url": "https://github.com/datamill-co/target-postgres/commit/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T20:41:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-22T21:25:40.000000Z"}, "message": "Housekeeping: Explanation for Integers as valid Numbers in test", "tree": {"sha": "7f79f30ad64f2ca48d0f4bd9a2a016be5e3c6d36", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7f79f30ad64f2ca48d0f4bd9a2a016be5e3c6d36"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "html_url": "https://github.com/datamill-co/target-postgres/commit/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cf0f0a7871d8cbbeb19a2ce593f869b5585960a2/comments", "parents": [{"sha": "52023475190dcd0a45f6470ebcaec19d5bc53109", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/52023475190dcd0a45f6470ebcaec19d5bc53109", "html_url": "https://github.com/datamill-co/target-postgres/commit/52023475190dcd0a45f6470ebcaec19d5bc53109"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "52023475190dcd0a45f6470ebcaec19d5bc53109", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:16:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Housekeeping: Generative test for column type changing", "tree": {"sha": "2a2654737c69605f89a9c8d254fdfa4f60aa87a8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2a2654737c69605f89a9c8d254fdfa4f60aa87a8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/52023475190dcd0a45f6470ebcaec19d5bc53109", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/52023475190dcd0a45f6470ebcaec19d5bc53109", "html_url": "https://github.com/datamill-co/target-postgres/commit/52023475190dcd0a45f6470ebcaec19d5bc53109", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/52023475190dcd0a45f6470ebcaec19d5bc53109/comments", "parents": [{"sha": "77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "html_url": "https://github.com/datamill-co/target-postgres/commit/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T17:12:06.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Fix: Mutability in single type columns splitting", "tree": {"sha": "49be5712db36b2cd3f16ddbfebd4004b3b499a0a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/49be5712db36b2cd3f16ddbfebd4004b3b499a0a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "html_url": "https://github.com/datamill-co/target-postgres/commit/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/77eed3ec9da4c65cc3e588d4743c3b2a1a2c47da/comments", "parents": [{"sha": "e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "html_url": "https://github.com/datamill-co/target-postgres/commit/e8be83e65ef3cb38384d8ea29541d1fc39abaebc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T17:11:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Refactor: Make mappings use simple_type", "tree": {"sha": "4ad8022d6cae4a62996f4b3eaeb92a7e003f19e5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4ad8022d6cae4a62996f4b3eaeb92a7e003f19e5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "html_url": "https://github.com/datamill-co/target-postgres/commit/e8be83e65ef3cb38384d8ea29541d1fc39abaebc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8be83e65ef3cb38384d8ea29541d1fc39abaebc/comments", "parents": [{"sha": "cc740e8c4322ff4418ee306b3a9109a04edf064b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc740e8c4322ff4418ee306b3a9109a04edf064b", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc740e8c4322ff4418ee306b3a9109a04edf064b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cc740e8c4322ff4418ee306b3a9109a04edf064b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T17:03:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Feature: JSON Schema, is_datetime, simple_type", "tree": {"sha": "936d09d9762712eada82704bae83a52dbbb265ba", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/936d09d9762712eada82704bae83a52dbbb265ba"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cc740e8c4322ff4418ee306b3a9109a04edf064b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc740e8c4322ff4418ee306b3a9109a04edf064b", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc740e8c4322ff4418ee306b3a9109a04edf064b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc740e8c4322ff4418ee306b3a9109a04edf064b/comments", "parents": [{"sha": "fd58e4788b8c0853d611d35d914f8cd863750c64", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd58e4788b8c0853d611d35d914f8cd863750c64", "html_url": "https://github.com/datamill-co/target-postgres/commit/fd58e4788b8c0853d611d35d914f8cd863750c64"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fd58e4788b8c0853d611d35d914f8cd863750c64", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T14:48:06.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Feature: sql_shorthand for date-time json_schema type", "tree": {"sha": "c61ea0d60456f9b14d85b3acb13b659b98ec7088", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c61ea0d60456f9b14d85b3acb13b659b98ec7088"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fd58e4788b8c0853d611d35d914f8cd863750c64", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd58e4788b8c0853d611d35d914f8cd863750c64", "html_url": "https://github.com/datamill-co/target-postgres/commit/fd58e4788b8c0853d611d35d914f8cd863750c64", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd58e4788b8c0853d611d35d914f8cd863750c64/comments", "parents": [{"sha": "e4201584fd16174ef84238e537816ef839ed904f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4201584fd16174ef84238e537816ef839ed904f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4201584fd16174ef84238e537816ef839ed904f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e4201584fd16174ef84238e537816ef839ed904f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T17:09:11.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Feature: Better repeated upsert tests\n\nAssert schema on each upset to assure that no change in the json schema, means no change in the resulting schema", "tree": {"sha": "35cf5d8e62a50817bd0d4b29f1cb26675375e655", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/35cf5d8e62a50817bd0d4b29f1cb26675375e655"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e4201584fd16174ef84238e537816ef839ed904f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4201584fd16174ef84238e537816ef839ed904f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4201584fd16174ef84238e537816ef839ed904f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4201584fd16174ef84238e537816ef839ed904f/comments", "parents": [{"sha": "20df8f9dde702fe2bb2847ae442343894fb3de9e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20df8f9dde702fe2bb2847ae442343894fb3de9e", "html_url": "https://github.com/datamill-co/target-postgres/commit/20df8f9dde702fe2bb2847ae442343894fb3de9e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "20df8f9dde702fe2bb2847ae442343894fb3de9e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-19T02:36:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-21T15:18:22.000000Z"}, "message": "Fail: string to date-time (vice-versa) column split", "tree": {"sha": "5e468eecc737850e94a50cc2c1ef74324243e8e7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5e468eecc737850e94a50cc2c1ef74324243e8e7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/20df8f9dde702fe2bb2847ae442343894fb3de9e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20df8f9dde702fe2bb2847ae442343894fb3de9e", "html_url": "https://github.com/datamill-co/target-postgres/commit/20df8f9dde702fe2bb2847ae442343894fb3de9e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20df8f9dde702fe2bb2847ae442343894fb3de9e/comments", "parents": [{"sha": "a1362645b21c736fc13835de59aea77595bc8b7a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a1362645b21c736fc13835de59aea77595bc8b7a", "html_url": "https://github.com/datamill-co/target-postgres/commit/a1362645b21c736fc13835de59aea77595bc8b7a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a1362645b21c736fc13835de59aea77595bc8b7a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-18T22:57:47.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T22:57:47.000000Z"}, "message": "Merge pull request #88 from AlexanderMann/release/0_1_2\n\nBump: target-postgres 0.1.1 -> 0.1.2", "tree": {"sha": "baba70146462afe3bcb5eb375e445e76c269e5e3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/baba70146462afe3bcb5eb375e445e76c269e5e3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a1362645b21c736fc13835de59aea77595bc8b7a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a1362645b21c736fc13835de59aea77595bc8b7a", "html_url": "https://github.com/datamill-co/target-postgres/commit/a1362645b21c736fc13835de59aea77595bc8b7a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a1362645b21c736fc13835de59aea77595bc8b7a/comments", "parents": [{"sha": "b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "html_url": "https://github.com/datamill-co/target-postgres/commit/b9c2889c1c2b3fdda4c0accd45adb350abc9b982"}, {"sha": "0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "html_url": "https://github.com/datamill-co/target-postgres/commit/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-18T22:57:02.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-18T22:57:02.000000Z"}, "message": "Bump: target-postgres 0.1.1 -> 0.1.2", "tree": {"sha": "baba70146462afe3bcb5eb375e445e76c269e5e3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/baba70146462afe3bcb5eb375e445e76c269e5e3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "html_url": "https://github.com/datamill-co/target-postgres/commit/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0a3c3d065e0af7ded8c2824a8b706d03f8fe270b/comments", "parents": [{"sha": "b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "html_url": "https://github.com/datamill-co/target-postgres/commit/b9c2889c1c2b3fdda4c0accd45adb350abc9b982"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-18T22:53:48.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T22:53:48.000000Z"}, "message": "Merge pull request #87 from AlexanderMann/feature/more-robust-update-sql\n\nFeature: update_sql does not depend on header ordering", "tree": {"sha": "f06faa1309f5a365a545491aaf41cf0a803f08b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f06faa1309f5a365a545491aaf41cf0a803f08b9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "html_url": "https://github.com/datamill-co/target-postgres/commit/b9c2889c1c2b3fdda4c0accd45adb350abc9b982", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b9c2889c1c2b3fdda4c0accd45adb350abc9b982/comments", "parents": [{"sha": "e8434d7343bcdac379a7a184a77f67903c1ed143", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8434d7343bcdac379a7a184a77f67903c1ed143", "html_url": "https://github.com/datamill-co/target-postgres/commit/e8434d7343bcdac379a7a184a77f67903c1ed143"}, {"sha": "ec97706b1981f347e325aa53836c29a4c71657a8", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ec97706b1981f347e325aa53836c29a4c71657a8", "html_url": "https://github.com/datamill-co/target-postgres/commit/ec97706b1981f347e325aa53836c29a4c71657a8"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ec97706b1981f347e325aa53836c29a4c71657a8", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-18T19:26:11.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-18T19:26:11.000000Z"}, "message": "Feature: update_sql does not depend on header ordering", "tree": {"sha": "f06faa1309f5a365a545491aaf41cf0a803f08b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f06faa1309f5a365a545491aaf41cf0a803f08b9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ec97706b1981f347e325aa53836c29a4c71657a8", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ec97706b1981f347e325aa53836c29a4c71657a8", "html_url": "https://github.com/datamill-co/target-postgres/commit/ec97706b1981f347e325aa53836c29a4c71657a8", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ec97706b1981f347e325aa53836c29a4c71657a8/comments", "parents": [{"sha": "e8434d7343bcdac379a7a184a77f67903c1ed143", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8434d7343bcdac379a7a184a77f67903c1ed143", "html_url": "https://github.com/datamill-co/target-postgres/commit/e8434d7343bcdac379a7a184a77f67903c1ed143"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e8434d7343bcdac379a7a184a77f67903c1ed143", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:44:05.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-16T16:44:05.000000Z"}, "message": "Merge pull request #86 from AlexanderMann/fix/release\n\nFix: Release logic broken", "tree": {"sha": "37ca35f28529fc296e302ff74e350cbd3236f362", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/37ca35f28529fc296e302ff74e350cbd3236f362"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e8434d7343bcdac379a7a184a77f67903c1ed143", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8434d7343bcdac379a7a184a77f67903c1ed143", "html_url": "https://github.com/datamill-co/target-postgres/commit/e8434d7343bcdac379a7a184a77f67903c1ed143", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e8434d7343bcdac379a7a184a77f67903c1ed143/comments", "parents": [{"sha": "0752c310229afa113e4e7f84a77a24dd9277fbf1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0752c310229afa113e4e7f84a77a24dd9277fbf1", "html_url": "https://github.com/datamill-co/target-postgres/commit/0752c310229afa113e4e7f84a77a24dd9277fbf1"}, {"sha": "75625f3ccb091431127aafa4b3baf2c374039412", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75625f3ccb091431127aafa4b3baf2c374039412", "html_url": "https://github.com/datamill-co/target-postgres/commit/75625f3ccb091431127aafa4b3baf2c374039412"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "75625f3ccb091431127aafa4b3baf2c374039412", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:42:35.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:42:35.000000Z"}, "message": "Fix: Release logic broken", "tree": {"sha": "37ca35f28529fc296e302ff74e350cbd3236f362", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/37ca35f28529fc296e302ff74e350cbd3236f362"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/75625f3ccb091431127aafa4b3baf2c374039412", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75625f3ccb091431127aafa4b3baf2c374039412", "html_url": "https://github.com/datamill-co/target-postgres/commit/75625f3ccb091431127aafa4b3baf2c374039412", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75625f3ccb091431127aafa4b3baf2c374039412/comments", "parents": [{"sha": "0752c310229afa113e4e7f84a77a24dd9277fbf1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0752c310229afa113e4e7f84a77a24dd9277fbf1", "html_url": "https://github.com/datamill-co/target-postgres/commit/0752c310229afa113e4e7f84a77a24dd9277fbf1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0752c310229afa113e4e7f84a77a24dd9277fbf1", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:26:59.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-16T16:26:59.000000Z"}, "message": "Merge pull request #85 from AlexanderMann/release/0_1_1\n\nBump: target-postgres 0.1.0 -> 0.1.1", "tree": {"sha": "57897fc5ed747c13c323526eb9fc510ca09c2ccc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/57897fc5ed747c13c323526eb9fc510ca09c2ccc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0752c310229afa113e4e7f84a77a24dd9277fbf1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0752c310229afa113e4e7f84a77a24dd9277fbf1", "html_url": "https://github.com/datamill-co/target-postgres/commit/0752c310229afa113e4e7f84a77a24dd9277fbf1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0752c310229afa113e4e7f84a77a24dd9277fbf1/comments", "parents": [{"sha": "843b3807482e020946340aae3c763a6802ec044e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/843b3807482e020946340aae3c763a6802ec044e", "html_url": "https://github.com/datamill-co/target-postgres/commit/843b3807482e020946340aae3c763a6802ec044e"}, {"sha": "2c7a062c673ec8282d44692c3057e7f2d590a3be", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c7a062c673ec8282d44692c3057e7f2d590a3be", "html_url": "https://github.com/datamill-co/target-postgres/commit/2c7a062c673ec8282d44692c3057e7f2d590a3be"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2c7a062c673ec8282d44692c3057e7f2d590a3be", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:25:45.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:25:45.000000Z"}, "message": "Bump: target-postgres 0.1.0 -> 0.1.1", "tree": {"sha": "57897fc5ed747c13c323526eb9fc510ca09c2ccc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/57897fc5ed747c13c323526eb9fc510ca09c2ccc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2c7a062c673ec8282d44692c3057e7f2d590a3be", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c7a062c673ec8282d44692c3057e7f2d590a3be", "html_url": "https://github.com/datamill-co/target-postgres/commit/2c7a062c673ec8282d44692c3057e7f2d590a3be", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2c7a062c673ec8282d44692c3057e7f2d590a3be/comments", "parents": [{"sha": "843b3807482e020946340aae3c763a6802ec044e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/843b3807482e020946340aae3c763a6802ec044e", "html_url": "https://github.com/datamill-co/target-postgres/commit/843b3807482e020946340aae3c763a6802ec044e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "843b3807482e020946340aae3c763a6802ec044e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-16T16:17:01.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-16T16:17:01.000000Z"}, "message": "Merge pull request #84 from AlexanderMann/bump/dependencies-2019-01-16\n\nBump/dependencies 2019 01 16", "tree": {"sha": "df51d9254640696c9ed160d5a3d3c0f6a02ebbfd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/df51d9254640696c9ed160d5a3d3c0f6a02ebbfd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/843b3807482e020946340aae3c763a6802ec044e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/843b3807482e020946340aae3c763a6802ec044e", "html_url": "https://github.com/datamill-co/target-postgres/commit/843b3807482e020946340aae3c763a6802ec044e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/843b3807482e020946340aae3c763a6802ec044e/comments", "parents": [{"sha": "12e41bd922c970c8e777e48517f15e4915f5841a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12e41bd922c970c8e777e48517f15e4915f5841a", "html_url": "https://github.com/datamill-co/target-postgres/commit/12e41bd922c970c8e777e48517f15e4915f5841a"}, {"sha": "ba85a4d4fada84da942ed201118196a22dc34199", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba85a4d4fada84da942ed201118196a22dc34199", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba85a4d4fada84da942ed201118196a22dc34199"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ba85a4d4fada84da942ed201118196a22dc34199", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T15:00:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T15:10:27.000000Z"}, "message": "README: Dependencies badge", "tree": {"sha": "df51d9254640696c9ed160d5a3d3c0f6a02ebbfd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/df51d9254640696c9ed160d5a3d3c0f6a02ebbfd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ba85a4d4fada84da942ed201118196a22dc34199", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba85a4d4fada84da942ed201118196a22dc34199", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba85a4d4fada84da942ed201118196a22dc34199", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba85a4d4fada84da942ed201118196a22dc34199/comments", "parents": [{"sha": "a48e3e766b7cad79328c26d52991b777871ba9d1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a48e3e766b7cad79328c26d52991b777871ba9d1", "html_url": "https://github.com/datamill-co/target-postgres/commit/a48e3e766b7cad79328c26d52991b777871ba9d1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a48e3e766b7cad79328c26d52991b777871ba9d1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:57:29.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:57:29.000000Z"}, "message": "Bump: Singer-python 5.0.12 -> 5.4.1", "tree": {"sha": "3ca3981b58f6a612a75e64b83c4749f6d0780889", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3ca3981b58f6a612a75e64b83c4749f6d0780889"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a48e3e766b7cad79328c26d52991b777871ba9d1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a48e3e766b7cad79328c26d52991b777871ba9d1", "html_url": "https://github.com/datamill-co/target-postgres/commit/a48e3e766b7cad79328c26d52991b777871ba9d1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a48e3e766b7cad79328c26d52991b777871ba9d1/comments", "parents": [{"sha": "bb4cf793beaba7ca88220acbd70bfee561b44e0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb4cf793beaba7ca88220acbd70bfee561b44e0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/bb4cf793beaba7ca88220acbd70bfee561b44e0c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bb4cf793beaba7ca88220acbd70bfee561b44e0c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:56:50.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:56:50.000000Z"}, "message": "Bump: Psycopg 2.7.4 -> 2.7.6", "tree": {"sha": "1cb4f3c0ce81ddbde2b9dcebab9d29c7c470f1a6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1cb4f3c0ce81ddbde2b9dcebab9d29c7c470f1a6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bb4cf793beaba7ca88220acbd70bfee561b44e0c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb4cf793beaba7ca88220acbd70bfee561b44e0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/bb4cf793beaba7ca88220acbd70bfee561b44e0c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb4cf793beaba7ca88220acbd70bfee561b44e0c/comments", "parents": [{"sha": "dcbee2c8d0068e2be702ad5e6891de472bd42083", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dcbee2c8d0068e2be702ad5e6891de472bd42083", "html_url": "https://github.com/datamill-co/target-postgres/commit/dcbee2c8d0068e2be702ad5e6891de472bd42083"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dcbee2c8d0068e2be702ad5e6891de472bd42083", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:55:56.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-16T14:55:56.000000Z"}, "message": "Bump: Arrow 0.12.1 -> 0.13.0", "tree": {"sha": "c103361b2f74bcf80e830ef358d3844f4acba8d4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c103361b2f74bcf80e830ef358d3844f4acba8d4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dcbee2c8d0068e2be702ad5e6891de472bd42083", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dcbee2c8d0068e2be702ad5e6891de472bd42083", "html_url": "https://github.com/datamill-co/target-postgres/commit/dcbee2c8d0068e2be702ad5e6891de472bd42083", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dcbee2c8d0068e2be702ad5e6891de472bd42083/comments", "parents": [{"sha": "12e41bd922c970c8e777e48517f15e4915f5841a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12e41bd922c970c8e777e48517f15e4915f5841a", "html_url": "https://github.com/datamill-co/target-postgres/commit/12e41bd922c970c8e777e48517f15e4915f5841a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "12e41bd922c970c8e777e48517f15e4915f5841a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-15T19:11:13.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T19:11:13.000000Z"}, "message": "Merge pull request #83 from AlexanderMann/refactor/json-schema-no-more-sql\n\nRefactor: Remove SQL notions from json_schema, embed code where it's \u2026", "tree": {"sha": "8c1c827858953ad0132c5f8bc05da9f69120aa44", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8c1c827858953ad0132c5f8bc05da9f69120aa44"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/12e41bd922c970c8e777e48517f15e4915f5841a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12e41bd922c970c8e777e48517f15e4915f5841a", "html_url": "https://github.com/datamill-co/target-postgres/commit/12e41bd922c970c8e777e48517f15e4915f5841a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12e41bd922c970c8e777e48517f15e4915f5841a/comments", "parents": [{"sha": "ed0520d6b35b569382121c69238303f0250936bf", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ed0520d6b35b569382121c69238303f0250936bf", "html_url": "https://github.com/datamill-co/target-postgres/commit/ed0520d6b35b569382121c69238303f0250936bf"}, {"sha": "4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ed0520d6b35b569382121c69238303f0250936bf", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-15T19:10:57.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T19:10:57.000000Z"}, "message": "Merge pull request #82 from AlexanderMann/feature/postgres-8_4-compatible-code\n\nFeature/postgres 8 4 compatible code", "tree": {"sha": "f1e1f052adce6eef61ffda0e439cfd7c8e501e35", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f1e1f052adce6eef61ffda0e439cfd7c8e501e35"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ed0520d6b35b569382121c69238303f0250936bf", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ed0520d6b35b569382121c69238303f0250936bf", "html_url": "https://github.com/datamill-co/target-postgres/commit/ed0520d6b35b569382121c69238303f0250936bf", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ed0520d6b35b569382121c69238303f0250936bf/comments", "parents": [{"sha": "82695e61c3e6fd360b7a15c654900d23549c23f2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/82695e61c3e6fd360b7a15c654900d23549c23f2", "html_url": "https://github.com/datamill-co/target-postgres/commit/82695e61c3e6fd360b7a15c654900d23549c23f2"}, {"sha": "e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.387796Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T23:10:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T23:10:19.000000Z"}, "message": "Refactor: Remove SQL notions from json_schema, embed code where it's used", "tree": {"sha": "370a9bea9fde20e923412f73661d007fb2157630", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/370a9bea9fde20e923412f73661d007fb2157630"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d381d2efa21fcc0a3110a3ee427c4abf90c7cc2/comments", "parents": [{"sha": "82695e61c3e6fd360b7a15c654900d23549c23f2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/82695e61c3e6fd360b7a15c654900d23549c23f2", "html_url": "https://github.com/datamill-co/target-postgres/commit/82695e61c3e6fd360b7a15c654900d23549c23f2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T22:10:06.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T22:10:06.000000Z"}, "message": "Decision: PostgreSQL 8.4.22 partial support", "tree": {"sha": "f1e1f052adce6eef61ffda0e439cfd7c8e501e35", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f1e1f052adce6eef61ffda0e439cfd7c8e501e35"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "html_url": "https://github.com/datamill-co/target-postgres/commit/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e248d7eba379dbf416d8b5a7ec1e43c28f39da8f/comments", "parents": [{"sha": "0ce8e88853fb586df28cda65d7fbe43337e87c38", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0ce8e88853fb586df28cda65d7fbe43337e87c38", "html_url": "https://github.com/datamill-co/target-postgres/commit/0ce8e88853fb586df28cda65d7fbe43337e87c38"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0ce8e88853fb586df28cda65d7fbe43337e87c38", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T21:50:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T21:50:34.000000Z"}, "message": "Fix: tap-github using old version", "tree": {"sha": "75f907a94db11a87720296efe15d1c25a44f9f94", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/75f907a94db11a87720296efe15d1c25a44f9f94"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0ce8e88853fb586df28cda65d7fbe43337e87c38", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0ce8e88853fb586df28cda65d7fbe43337e87c38", "html_url": "https://github.com/datamill-co/target-postgres/commit/0ce8e88853fb586df28cda65d7fbe43337e87c38", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0ce8e88853fb586df28cda65d7fbe43337e87c38/comments", "parents": [{"sha": "396df29081a351724ffda92a00ee7edd982933d5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/396df29081a351724ffda92a00ee7edd982933d5", "html_url": "https://github.com/datamill-co/target-postgres/commit/396df29081a351724ffda92a00ee7edd982933d5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "396df29081a351724ffda92a00ee7edd982933d5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:23:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:24:30.000000Z"}, "message": "Feature: Postgres 8.4.22 Compatible code", "tree": {"sha": "3f3ad2eb8393776eb9df7da2e6aa842b6104f50b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3f3ad2eb8393776eb9df7da2e6aa842b6104f50b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/396df29081a351724ffda92a00ee7edd982933d5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/396df29081a351724ffda92a00ee7edd982933d5", "html_url": "https://github.com/datamill-co/target-postgres/commit/396df29081a351724ffda92a00ee7edd982933d5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/396df29081a351724ffda92a00ee7edd982933d5/comments", "parents": [{"sha": "cef6956f12d3e5cccdb098753f6f678c78645f6b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef6956f12d3e5cccdb098753f6f678c78645f6b", "html_url": "https://github.com/datamill-co/target-postgres/commit/cef6956f12d3e5cccdb098753f6f678c78645f6b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cef6956f12d3e5cccdb098753f6f678c78645f6b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:21:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:24:30.000000Z"}, "message": "Fail: 8.4.22 Postgres not supported", "tree": {"sha": "e91e20bfaa5282d1c09dffcee889f1254603f1ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e91e20bfaa5282d1c09dffcee889f1254603f1ea"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cef6956f12d3e5cccdb098753f6f678c78645f6b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef6956f12d3e5cccdb098753f6f678c78645f6b", "html_url": "https://github.com/datamill-co/target-postgres/commit/cef6956f12d3e5cccdb098753f6f678c78645f6b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cef6956f12d3e5cccdb098753f6f678c78645f6b/comments", "parents": [{"sha": "82695e61c3e6fd360b7a15c654900d23549c23f2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/82695e61c3e6fd360b7a15c654900d23549c23f2", "html_url": "https://github.com/datamill-co/target-postgres/commit/82695e61c3e6fd360b7a15c654900d23549c23f2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "82695e61c3e6fd360b7a15c654900d23549c23f2", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:18:05.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-11T20:18:05.000000Z"}, "message": "Merge pull request #81 from AlexanderMann/refactor/denest-as-module\n\nRefactor/denest as module", "tree": {"sha": "1d356eee2fe4bb064583714c73f7890b75445511", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1d356eee2fe4bb064583714c73f7890b75445511"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/82695e61c3e6fd360b7a15c654900d23549c23f2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/82695e61c3e6fd360b7a15c654900d23549c23f2", "html_url": "https://github.com/datamill-co/target-postgres/commit/82695e61c3e6fd360b7a15c654900d23549c23f2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/82695e61c3e6fd360b7a15c654900d23549c23f2/comments", "parents": [{"sha": "3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e"}, {"sha": "e4c97f487b7776670e0705bdd224543b4a074ab3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c97f487b7776670e0705bdd224543b4a074ab3", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4c97f487b7776670e0705bdd224543b4a074ab3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e4c97f487b7776670e0705bdd224543b4a074ab3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:09:50.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T20:09:50.000000Z"}, "message": "Refactor: Remove adding sdc properties from denest", "tree": {"sha": "1d356eee2fe4bb064583714c73f7890b75445511", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1d356eee2fe4bb064583714c73f7890b75445511"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e4c97f487b7776670e0705bdd224543b4a074ab3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c97f487b7776670e0705bdd224543b4a074ab3", "html_url": "https://github.com/datamill-co/target-postgres/commit/e4c97f487b7776670e0705bdd224543b4a074ab3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e4c97f487b7776670e0705bdd224543b4a074ab3/comments", "parents": [{"sha": "a92da93a11a2ef37db2578ccd289f23c46164213", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a92da93a11a2ef37db2578ccd289f23c46164213", "html_url": "https://github.com/datamill-co/target-postgres/commit/a92da93a11a2ef37db2578ccd289f23c46164213"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a92da93a11a2ef37db2578ccd289f23c46164213", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-10T17:57:22.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T02:15:31.000000Z"}, "message": "Housekeeping: Tests for de-nesting schema", "tree": {"sha": "c174f1af296d1326911e5eaad228f3a193878e5f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c174f1af296d1326911e5eaad228f3a193878e5f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a92da93a11a2ef37db2578ccd289f23c46164213", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a92da93a11a2ef37db2578ccd289f23c46164213", "html_url": "https://github.com/datamill-co/target-postgres/commit/a92da93a11a2ef37db2578ccd289f23c46164213", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a92da93a11a2ef37db2578ccd289f23c46164213/comments", "parents": [{"sha": "12d77118ac212198368c6134be91e25eff175547", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12d77118ac212198368c6134be91e25eff175547", "html_url": "https://github.com/datamill-co/target-postgres/commit/12d77118ac212198368c6134be91e25eff175547"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "12d77118ac212198368c6134be91e25eff175547", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-10T14:58:00.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-11T02:15:31.000000Z"}, "message": "Refactor: Denesting moved to its own module", "tree": {"sha": "fecfa1e2ba6835d3cb192a0732758418e843086b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/fecfa1e2ba6835d3cb192a0732758418e843086b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/12d77118ac212198368c6134be91e25eff175547", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12d77118ac212198368c6134be91e25eff175547", "html_url": "https://github.com/datamill-co/target-postgres/commit/12d77118ac212198368c6134be91e25eff175547", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/12d77118ac212198368c6134be91e25eff175547/comments", "parents": [{"sha": "3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-11T02:11:37.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-11T02:11:37.000000Z"}, "message": "Merge pull request #79 from AlexanderMann/feature/target-tools\n\nFeature/target tools", "tree": {"sha": "3e408c245eea16ea2bb0316af790fc064b4eb49e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3e408c245eea16ea2bb0316af790fc064b4eb49e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "html_url": "https://github.com/datamill-co/target-postgres/commit/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3f5d4a3f90544c3176bcbc9e75c21e89ba05ae2e/comments", "parents": [{"sha": "736d76c3387b7bcc59a8a8da1dfc0246587f171c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/736d76c3387b7bcc59a8a8da1dfc0246587f171c", "html_url": "https://github.com/datamill-co/target-postgres/commit/736d76c3387b7bcc59a8a8da1dfc0246587f171c"}, {"sha": "28103727101f81ef634c00952dbfa644c1139061", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/28103727101f81ef634c00952dbfa644c1139061", "html_url": "https://github.com/datamill-co/target-postgres/commit/28103727101f81ef634c00952dbfa644c1139061"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "736d76c3387b7bcc59a8a8da1dfc0246587f171c", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-11T02:10:31.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-11T02:10:31.000000Z"}, "message": "Merge pull request #78 from AlexanderMann/housekeeping/release-ci\n\nHousekeeping: CI CD", "tree": {"sha": "b1e76631ada586da2b33a535a169142f1ff9a90b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b1e76631ada586da2b33a535a169142f1ff9a90b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/736d76c3387b7bcc59a8a8da1dfc0246587f171c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/736d76c3387b7bcc59a8a8da1dfc0246587f171c", "html_url": "https://github.com/datamill-co/target-postgres/commit/736d76c3387b7bcc59a8a8da1dfc0246587f171c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/736d76c3387b7bcc59a8a8da1dfc0246587f171c/comments", "parents": [{"sha": "6058803b4035817f672dac9316ebd3cfabcedfc7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6058803b4035817f672dac9316ebd3cfabcedfc7", "html_url": "https://github.com/datamill-co/target-postgres/commit/6058803b4035817f672dac9316ebd3cfabcedfc7"}, {"sha": "07dda332524cd5a0cd6311dfc9f250650268d7a2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/07dda332524cd5a0cd6311dfc9f250650268d7a2", "html_url": "https://github.com/datamill-co/target-postgres/commit/07dda332524cd5a0cd6311dfc9f250650268d7a2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "28103727101f81ef634c00952dbfa644c1139061", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:26:23.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:52:31.000000Z"}, "message": "Housekeeping: Improve api of target_tools", "tree": {"sha": "d350dd768c30d03365702222736bb797f148a31f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d350dd768c30d03365702222736bb797f148a31f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/28103727101f81ef634c00952dbfa644c1139061", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/28103727101f81ef634c00952dbfa644c1139061", "html_url": "https://github.com/datamill-co/target-postgres/commit/28103727101f81ef634c00952dbfa644c1139061", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/28103727101f81ef634c00952dbfa644c1139061/comments", "parents": [{"sha": "ae14a89da807fa358097440c462de00fe2819222", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ae14a89da807fa358097440c462de00fe2819222", "html_url": "https://github.com/datamill-co/target-postgres/commit/ae14a89da807fa358097440c462de00fe2819222"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ae14a89da807fa358097440c462de00fe2819222", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:13:20.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:52:31.000000Z"}, "message": "Refactor: Move invalid records tests over to target_tools", "tree": {"sha": "9e9e08cb8a3269b23f5bd4fb817fc85a38511b42", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9e9e08cb8a3269b23f5bd4fb817fc85a38511b42"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ae14a89da807fa358097440c462de00fe2819222", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ae14a89da807fa358097440c462de00fe2819222", "html_url": "https://github.com/datamill-co/target-postgres/commit/ae14a89da807fa358097440c462de00fe2819222", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ae14a89da807fa358097440c462de00fe2819222/comments", "parents": [{"sha": "af954f015e63ada0569330d31442d9aa02998c55", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af954f015e63ada0569330d31442d9aa02998c55", "html_url": "https://github.com/datamill-co/target-postgres/commit/af954f015e63ada0569330d31442d9aa02998c55"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "af954f015e63ada0569330d31442d9aa02998c55", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T22:55:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:52:31.000000Z"}, "message": "Performance: Disable stats collection for tests", "tree": {"sha": "6e3fcaa02d6fc7aeacc9e0b1b5778d2d0e546449", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6e3fcaa02d6fc7aeacc9e0b1b5778d2d0e546449"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/af954f015e63ada0569330d31442d9aa02998c55", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af954f015e63ada0569330d31442d9aa02998c55", "html_url": "https://github.com/datamill-co/target-postgres/commit/af954f015e63ada0569330d31442d9aa02998c55", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af954f015e63ada0569330d31442d9aa02998c55/comments", "parents": [{"sha": "524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "html_url": "https://github.com/datamill-co/target-postgres/commit/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T22:39:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:52:31.000000Z"}, "message": "Feature: init target_tools", "tree": {"sha": "241dac50d1094e7020678ec8e3c55fa83f1fb171", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/241dac50d1094e7020678ec8e3c55fa83f1fb171"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "html_url": "https://github.com/datamill-co/target-postgres/commit/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/524d5f70eeadb85b9c8b60bc671cdd3284f67cc3/comments", "parents": [{"sha": "6058803b4035817f672dac9316ebd3cfabcedfc7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6058803b4035817f672dac9316ebd3cfabcedfc7", "html_url": "https://github.com/datamill-co/target-postgres/commit/6058803b4035817f672dac9316ebd3cfabcedfc7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "07dda332524cd5a0cd6311dfc9f250650268d7a2", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T18:23:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:44:54.000000Z"}, "message": "Housekeeping: CI Release\n\n- All CI jobs will now `build` a release that _could_ be released. This catches bugs with our builds early\n- Any tags which are pushed to GitHub which are similar to `v0.1.5` etc., will:\n  - validate that the tag matches the `setup.py` version\n  - make a test-release in test.pypi\n  - wait for approval from a member of Datamill\n  - release to PyPi", "tree": {"sha": "b1e76631ada586da2b33a535a169142f1ff9a90b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b1e76631ada586da2b33a535a169142f1ff9a90b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/07dda332524cd5a0cd6311dfc9f250650268d7a2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/07dda332524cd5a0cd6311dfc9f250650268d7a2", "html_url": "https://github.com/datamill-co/target-postgres/commit/07dda332524cd5a0cd6311dfc9f250650268d7a2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/07dda332524cd5a0cd6311dfc9f250650268d7a2/comments", "parents": [{"sha": "ceb801df7f3c88eaf60e835c46c1fb8549989573", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ceb801df7f3c88eaf60e835c46c1fb8549989573", "html_url": "https://github.com/datamill-co/target-postgres/commit/ceb801df7f3c88eaf60e835c46c1fb8549989573"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ceb801df7f3c88eaf60e835c46c1fb8549989573", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T21:47:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T23:44:54.000000Z"}, "message": "Housekeeping: Set required metadata fields for Twine", "tree": {"sha": "70de17570779634e1366cdbe2a9daa91b9a21820", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/70de17570779634e1366cdbe2a9daa91b9a21820"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ceb801df7f3c88eaf60e835c46c1fb8549989573", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ceb801df7f3c88eaf60e835c46c1fb8549989573", "html_url": "https://github.com/datamill-co/target-postgres/commit/ceb801df7f3c88eaf60e835c46c1fb8549989573", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ceb801df7f3c88eaf60e835c46c1fb8549989573/comments", "parents": [{"sha": "e7522ebe34f8e11db086c01856fa0d52b29651d6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7522ebe34f8e11db086c01856fa0d52b29651d6", "html_url": "https://github.com/datamill-co/target-postgres/commit/e7522ebe34f8e11db086c01856fa0d52b29651d6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e7522ebe34f8e11db086c01856fa0d52b29651d6", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T18:09:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T18:09:47.000000Z"}, "message": "README: Upload to PyPi", "tree": {"sha": "47d384a883841baf0542cb29b73a2d81635af2df", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/47d384a883841baf0542cb29b73a2d81635af2df"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e7522ebe34f8e11db086c01856fa0d52b29651d6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7522ebe34f8e11db086c01856fa0d52b29651d6", "html_url": "https://github.com/datamill-co/target-postgres/commit/e7522ebe34f8e11db086c01856fa0d52b29651d6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e7522ebe34f8e11db086c01856fa0d52b29651d6/comments", "parents": [{"sha": "2dae504df39aab0e31bce01b59501a3553e56727", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2dae504df39aab0e31bce01b59501a3553e56727", "html_url": "https://github.com/datamill-co/target-postgres/commit/2dae504df39aab0e31bce01b59501a3553e56727"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2dae504df39aab0e31bce01b59501a3553e56727", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T17:38:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T17:38:37.000000Z"}, "message": "README: PyPi badge", "tree": {"sha": "b8c88be1f46a6691ff4ba3eff74a1eb663850cf1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b8c88be1f46a6691ff4ba3eff74a1eb663850cf1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2dae504df39aab0e31bce01b59501a3553e56727", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2dae504df39aab0e31bce01b59501a3553e56727", "html_url": "https://github.com/datamill-co/target-postgres/commit/2dae504df39aab0e31bce01b59501a3553e56727", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2dae504df39aab0e31bce01b59501a3553e56727/comments", "parents": [{"sha": "968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "html_url": "https://github.com/datamill-co/target-postgres/commit/968a410a567d2dabf20cbe98af6d1ae2d23ec74d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T15:27:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-09T17:33:18.000000Z"}, "message": "Housekeeping: Placeholder release ci job", "tree": {"sha": "9d55444e30158cf81b73d615a1eef5addea4acad", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9d55444e30158cf81b73d615a1eef5addea4acad"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "html_url": "https://github.com/datamill-co/target-postgres/commit/968a410a567d2dabf20cbe98af6d1ae2d23ec74d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/968a410a567d2dabf20cbe98af6d1ae2d23ec74d/comments", "parents": [{"sha": "6058803b4035817f672dac9316ebd3cfabcedfc7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6058803b4035817f672dac9316ebd3cfabcedfc7", "html_url": "https://github.com/datamill-co/target-postgres/commit/6058803b4035817f672dac9316ebd3cfabcedfc7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6058803b4035817f672dac9316ebd3cfabcedfc7", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-01-09T15:47:03.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-09T15:47:03.000000Z"}, "message": "Add pip install instructions", "tree": {"sha": "10d956b976607ac9d23c3df5eee221644e1046b1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/10d956b976607ac9d23c3df5eee221644e1046b1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6058803b4035817f672dac9316ebd3cfabcedfc7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6058803b4035817f672dac9316ebd3cfabcedfc7", "html_url": "https://github.com/datamill-co/target-postgres/commit/6058803b4035817f672dac9316ebd3cfabcedfc7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6058803b4035817f672dac9316ebd3cfabcedfc7/comments", "parents": [{"sha": "526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "html_url": "https://github.com/datamill-co/target-postgres/commit/526ddcefabb4ebcf17e03881b61ed8e9d96eca91"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-01-09T15:43:30.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-01-09T15:43:30.000000Z"}, "message": "Rename package for available pypi name", "tree": {"sha": "bb1fff71c90b35a2624b68582f5c2be6fcdd5dab", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/bb1fff71c90b35a2624b68582f5c2be6fcdd5dab"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "html_url": "https://github.com/datamill-co/target-postgres/commit/526ddcefabb4ebcf17e03881b61ed8e9d96eca91", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/526ddcefabb4ebcf17e03881b61ed8e9d96eca91/comments", "parents": [{"sha": "6343b189c0243d9453843d2dbd0878305a393ac9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6343b189c0243d9453843d2dbd0878305a393ac9", "html_url": "https://github.com/datamill-co/target-postgres/commit/6343b189c0243d9453843d2dbd0878305a393ac9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6343b189c0243d9453843d2dbd0878305a393ac9", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-01-09T15:36:47.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2019-01-09T15:36:47.000000Z"}, "message": "First release", "tree": {"sha": "4c4461eec8fe3d7d61d9abedd58cd107c493191c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4c4461eec8fe3d7d61d9abedd58cd107c493191c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6343b189c0243d9453843d2dbd0878305a393ac9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6343b189c0243d9453843d2dbd0878305a393ac9", "html_url": "https://github.com/datamill-co/target-postgres/commit/6343b189c0243d9453843d2dbd0878305a393ac9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6343b189c0243d9453843d2dbd0878305a393ac9/comments", "parents": [{"sha": "46ae5dafc5eaf2aaaa308a9596e498c13239256e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/46ae5dafc5eaf2aaaa308a9596e498c13239256e", "html_url": "https://github.com/datamill-co/target-postgres/commit/46ae5dafc5eaf2aaaa308a9596e498c13239256e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "46ae5dafc5eaf2aaaa308a9596e498c13239256e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-09T15:14:44.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-09T15:14:44.000000Z"}, "message": "Merge pull request #77 from AlexanderMann/housekeeping/remove-unused-logger\n\nHousekeeping: Remove unused argument from PostgresTarget", "tree": {"sha": "898d5c28e25d546a96237ee2c7c2f443417f5c70", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/898d5c28e25d546a96237ee2c7c2f443417f5c70"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/46ae5dafc5eaf2aaaa308a9596e498c13239256e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/46ae5dafc5eaf2aaaa308a9596e498c13239256e", "html_url": "https://github.com/datamill-co/target-postgres/commit/46ae5dafc5eaf2aaaa308a9596e498c13239256e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/46ae5dafc5eaf2aaaa308a9596e498c13239256e/comments", "parents": [{"sha": "27a467ea71b851deffa3e7433b029b670a0a0097", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/27a467ea71b851deffa3e7433b029b670a0a0097", "html_url": "https://github.com/datamill-co/target-postgres/commit/27a467ea71b851deffa3e7433b029b670a0a0097"}, {"sha": "236952955f690ae863764fe3c95251315fa5e202", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/236952955f690ae863764fe3c95251315fa5e202", "html_url": "https://github.com/datamill-co/target-postgres/commit/236952955f690ae863764fe3c95251315fa5e202"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "236952955f690ae863764fe3c95251315fa5e202", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-05T22:13:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-05T22:13:13.000000Z"}, "message": "Housekeeping: Remove unused argument from PostgresTarget", "tree": {"sha": "898d5c28e25d546a96237ee2c7c2f443417f5c70", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/898d5c28e25d546a96237ee2c7c2f443417f5c70"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/236952955f690ae863764fe3c95251315fa5e202", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/236952955f690ae863764fe3c95251315fa5e202", "html_url": "https://github.com/datamill-co/target-postgres/commit/236952955f690ae863764fe3c95251315fa5e202", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/236952955f690ae863764fe3c95251315fa5e202/comments", "parents": [{"sha": "27a467ea71b851deffa3e7433b029b670a0a0097", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/27a467ea71b851deffa3e7433b029b670a0a0097", "html_url": "https://github.com/datamill-co/target-postgres/commit/27a467ea71b851deffa3e7433b029b670a0a0097"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "27a467ea71b851deffa3e7433b029b670a0a0097", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2019-01-04T22:09:41.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-04T22:09:41.000000Z"}, "message": "Merge pull request #76 from AlexanderMann/feature/sql-interface-logger\n\nFeature/sql interface logger", "tree": {"sha": "2700ccdfa902b6eb1cbfeee7f0a31912ec86aef8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2700ccdfa902b6eb1cbfeee7f0a31912ec86aef8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/27a467ea71b851deffa3e7433b029b670a0a0097", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/27a467ea71b851deffa3e7433b029b670a0a0097", "html_url": "https://github.com/datamill-co/target-postgres/commit/27a467ea71b851deffa3e7433b029b670a0a0097", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/27a467ea71b851deffa3e7433b029b670a0a0097/comments", "parents": [{"sha": "dd57ecb31667d26181d84fe895b3bcf485bff92e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd57ecb31667d26181d84fe895b3bcf485bff92e", "html_url": "https://github.com/datamill-co/target-postgres/commit/dd57ecb31667d26181d84fe895b3bcf485bff92e"}, {"sha": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "html_url": "https://github.com/datamill-co/target-postgres/commit/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T21:51:31.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-04T03:52:43.000000Z"}, "message": "Fix: PK resulting type, no change", "tree": {"sha": "f3446dcff2aef2fd994aafd04dc25839422fa97f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f3446dcff2aef2fd994aafd04dc25839422fa97f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "html_url": "https://github.com/datamill-co/target-postgres/commit/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e2c8bfad6f8ca3b174a3717f9becbde646b6b64/comments", "parents": [{"sha": "66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "html_url": "https://github.com/datamill-co/target-postgres/commit/66e1461f3ec61b56b2925d2f592bd6ba14c72b08"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T21:50:21.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-04T03:52:43.000000Z"}, "message": "Fail: PK resulting type, no change", "tree": {"sha": "e77b5bd6528de33e34168ab82781efca88a537e6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e77b5bd6528de33e34168ab82781efca88a537e6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "html_url": "https://github.com/datamill-co/target-postgres/commit/66e1461f3ec61b56b2925d2f592bd6ba14c72b08", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66e1461f3ec61b56b2925d2f592bd6ba14c72b08/comments", "parents": [{"sha": "4fca248056e16970dc1f6c891b7beab91ace0da9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4fca248056e16970dc1f6c891b7beab91ace0da9", "html_url": "https://github.com/datamill-co/target-postgres/commit/4fca248056e16970dc1f6c891b7beab91ace0da9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4fca248056e16970dc1f6c891b7beab91ace0da9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T21:48:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-04T03:52:43.000000Z"}, "message": "Fix: db_cleanup fixture not being used globally", "tree": {"sha": "f484f1b36cd59f201adf5db14fc699f47102c5af", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f484f1b36cd59f201adf5db14fc699f47102c5af"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4fca248056e16970dc1f6c891b7beab91ace0da9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4fca248056e16970dc1f6c891b7beab91ace0da9", "html_url": "https://github.com/datamill-co/target-postgres/commit/4fca248056e16970dc1f6c891b7beab91ace0da9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4fca248056e16970dc1f6c891b7beab91ace0da9/comments", "parents": [{"sha": "269ada185f4280ea5ec8cdc6b62065a5871b69ed", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/269ada185f4280ea5ec8cdc6b62065a5871b69ed", "html_url": "https://github.com/datamill-co/target-postgres/commit/269ada185f4280ea5ec8cdc6b62065a5871b69ed"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "269ada185f4280ea5ec8cdc6b62065a5871b69ed", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T20:29:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-04T03:52:43.000000Z"}, "message": "Feature: More fine grained logging around batches and PostgresTarget", "tree": {"sha": "cf789b3b7812aa86f11974b7124e146adbdb61e3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cf789b3b7812aa86f11974b7124e146adbdb61e3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/269ada185f4280ea5ec8cdc6b62065a5871b69ed", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/269ada185f4280ea5ec8cdc6b62065a5871b69ed", "html_url": "https://github.com/datamill-co/target-postgres/commit/269ada185f4280ea5ec8cdc6b62065a5871b69ed", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/269ada185f4280ea5ec8cdc6b62065a5871b69ed/comments", "parents": [{"sha": "2b44a457a3498774b6571bbe269e664ff4521d49", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b44a457a3498774b6571bbe269e664ff4521d49", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b44a457a3498774b6571bbe269e664ff4521d49"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.528668Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2b44a457a3498774b6571bbe269e664ff4521d49", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T19:59:42.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T19:59:42.000000Z"}, "message": "Housekeeping: Remove TODOs pertaining to logging in SQL Base", "tree": {"sha": "f5fe3dd66a30d0ea61a54f05af97a54cf0e5f2cf", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f5fe3dd66a30d0ea61a54f05af97a54cf0e5f2cf"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2b44a457a3498774b6571bbe269e664ff4521d49", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b44a457a3498774b6571bbe269e664ff4521d49", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b44a457a3498774b6571bbe269e664ff4521d49", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b44a457a3498774b6571bbe269e664ff4521d49/comments", "parents": [{"sha": "cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "html_url": "https://github.com/datamill-co/target-postgres/commit/cb9cdbbf195e86ea306c421c0e7f38b9554eea85"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T19:58:17.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2019-01-03T19:58:17.000000Z"}, "message": "Feature: SQL Interface global Singer LOGGER", "tree": {"sha": "403502dca4df2629a15b44e94827d8af3b40e985", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/403502dca4df2629a15b44e94827d8af3b40e985"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "html_url": "https://github.com/datamill-co/target-postgres/commit/cb9cdbbf195e86ea306c421c0e7f38b9554eea85", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb9cdbbf195e86ea306c421c0e7f38b9554eea85/comments", "parents": [{"sha": "7a17178ef6d21dfac725fd134354221ac049fc38", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7a17178ef6d21dfac725fd134354221ac049fc38", "html_url": "https://github.com/datamill-co/target-postgres/commit/7a17178ef6d21dfac725fd134354221ac049fc38"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dd57ecb31667d26181d84fe895b3bcf485bff92e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-28T17:27:02.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-28T17:27:02.000000Z"}, "message": "Merge pull request #73 from AlexanderMann/housekeeping/table-metadata-documentation\n\nHousekeeping/table metadata documentation", "tree": {"sha": "bd3678046af5ec8686a614ec9a797610a246f740", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/bd3678046af5ec8686a614ec9a797610a246f740"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dd57ecb31667d26181d84fe895b3bcf485bff92e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd57ecb31667d26181d84fe895b3bcf485bff92e", "html_url": "https://github.com/datamill-co/target-postgres/commit/dd57ecb31667d26181d84fe895b3bcf485bff92e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dd57ecb31667d26181d84fe895b3bcf485bff92e/comments", "parents": [{"sha": "99cb06dc706a9e1b027fcc720446c20889024cde", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99cb06dc706a9e1b027fcc720446c20889024cde", "html_url": "https://github.com/datamill-co/target-postgres/commit/99cb06dc706a9e1b027fcc720446c20889024cde"}, {"sha": "363aaaaa520e6e33bcdd4a872235c680402a3e34", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/363aaaaa520e6e33bcdd4a872235c680402a3e34", "html_url": "https://github.com/datamill-co/target-postgres/commit/363aaaaa520e6e33bcdd4a872235c680402a3e34"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "363aaaaa520e6e33bcdd4a872235c680402a3e34", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-27T15:49:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-27T15:49:26.000000Z"}, "message": "README: Link to other docs files", "tree": {"sha": "bd3678046af5ec8686a614ec9a797610a246f740", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/bd3678046af5ec8686a614ec9a797610a246f740"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/363aaaaa520e6e33bcdd4a872235c680402a3e34", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/363aaaaa520e6e33bcdd4a872235c680402a3e34", "html_url": "https://github.com/datamill-co/target-postgres/commit/363aaaaa520e6e33bcdd4a872235c680402a3e34", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/363aaaaa520e6e33bcdd4a872235c680402a3e34/comments", "parents": [{"sha": "1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "html_url": "https://github.com/datamill-co/target-postgres/commit/1904b2ebfcfca6a366720f6fd1d24c3235216bc0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T20:04:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-27T15:43:12.000000Z"}, "message": "Housekeeping: Documentation about Table Metadata", "tree": {"sha": "881d5653ead55cb4f0f467ae4e84f0728a0e5a1a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/881d5653ead55cb4f0f467ae4e84f0728a0e5a1a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "html_url": "https://github.com/datamill-co/target-postgres/commit/1904b2ebfcfca6a366720f6fd1d24c3235216bc0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1904b2ebfcfca6a366720f6fd1d24c3235216bc0/comments", "parents": [{"sha": "7a17178ef6d21dfac725fd134354221ac049fc38", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7a17178ef6d21dfac725fd134354221ac049fc38", "html_url": "https://github.com/datamill-co/target-postgres/commit/7a17178ef6d21dfac725fd134354221ac049fc38"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7a17178ef6d21dfac725fd134354221ac049fc38", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-24T15:43:25.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-24T15:43:25.000000Z"}, "message": "Merge pull request #28 from datamill-co/master\n\nBump fork.", "tree": {"sha": "29f48d6321bab0b2afc440d562a9aacf5b713cb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/29f48d6321bab0b2afc440d562a9aacf5b713cb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7a17178ef6d21dfac725fd134354221ac049fc38", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7a17178ef6d21dfac725fd134354221ac049fc38", "html_url": "https://github.com/datamill-co/target-postgres/commit/7a17178ef6d21dfac725fd134354221ac049fc38", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7a17178ef6d21dfac725fd134354221ac049fc38/comments", "parents": [{"sha": "d8f3e131ccc020e7280ec7f1264006143028ef6a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d8f3e131ccc020e7280ec7f1264006143028ef6a", "html_url": "https://github.com/datamill-co/target-postgres/commit/d8f3e131ccc020e7280ec7f1264006143028ef6a"}, {"sha": "99cb06dc706a9e1b027fcc720446c20889024cde", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99cb06dc706a9e1b027fcc720446c20889024cde", "html_url": "https://github.com/datamill-co/target-postgres/commit/99cb06dc706a9e1b027fcc720446c20889024cde"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "99cb06dc706a9e1b027fcc720446c20889024cde", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-24T15:42:21.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-24T15:42:21.000000Z"}, "message": "Merge pull request #71 from AlexanderMann/performance/singer-stream-retain-latest-records-only\n\nPerformance/singer stream retain latest records only", "tree": {"sha": "29f48d6321bab0b2afc440d562a9aacf5b713cb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/29f48d6321bab0b2afc440d562a9aacf5b713cb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/99cb06dc706a9e1b027fcc720446c20889024cde", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99cb06dc706a9e1b027fcc720446c20889024cde", "html_url": "https://github.com/datamill-co/target-postgres/commit/99cb06dc706a9e1b027fcc720446c20889024cde", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99cb06dc706a9e1b027fcc720446c20889024cde/comments", "parents": [{"sha": "e64c4ba9d053e189f502e696342da9c643a89bb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e64c4ba9d053e189f502e696342da9c643a89bb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/e64c4ba9d053e189f502e696342da9c643a89bb2"}, {"sha": "5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "html_url": "https://github.com/datamill-co/target-postgres/commit/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T02:02:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T02:04:54.000000Z"}, "message": "Refactor: Remove record processing from postgres", "tree": {"sha": "29f48d6321bab0b2afc440d562a9aacf5b713cb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/29f48d6321bab0b2afc440d562a9aacf5b713cb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "html_url": "https://github.com/datamill-co/target-postgres/commit/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5bc4b819ae949f19c5f18b3beb8c1d361de1d34c/comments", "parents": [{"sha": "e34921e9e03c5632668a0b40f65a0f75952e1df4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e34921e9e03c5632668a0b40f65a0f75952e1df4", "html_url": "https://github.com/datamill-co/target-postgres/commit/e34921e9e03c5632668a0b40f65a0f75952e1df4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e34921e9e03c5632668a0b40f65a0f75952e1df4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T01:42:42.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T02:04:54.000000Z"}, "message": "Refactor: Use Buffer's max_version instead of re-calculating", "tree": {"sha": "143402c3322eb2c8fc69caded681aad11010f906", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/143402c3322eb2c8fc69caded681aad11010f906"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e34921e9e03c5632668a0b40f65a0f75952e1df4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e34921e9e03c5632668a0b40f65a0f75952e1df4", "html_url": "https://github.com/datamill-co/target-postgres/commit/e34921e9e03c5632668a0b40f65a0f75952e1df4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e34921e9e03c5632668a0b40f65a0f75952e1df4/comments", "parents": [{"sha": "8f06770c3ea87d50833979c2b84e0f39f9554ca0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f06770c3ea87d50833979c2b84e0f39f9554ca0", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f06770c3ea87d50833979c2b84e0f39f9554ca0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8f06770c3ea87d50833979c2b84e0f39f9554ca0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T01:09:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T01:09:26.000000Z"}, "message": "Feature: Old records do not cause a buffer to fill up", "tree": {"sha": "e5db8dd6ca4d3fcc3620bc08196a869b52f904fe", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e5db8dd6ca4d3fcc3620bc08196a869b52f904fe"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8f06770c3ea87d50833979c2b84e0f39f9554ca0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f06770c3ea87d50833979c2b84e0f39f9554ca0", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f06770c3ea87d50833979c2b84e0f39f9554ca0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f06770c3ea87d50833979c2b84e0f39f9554ca0/comments", "parents": [{"sha": "b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "html_url": "https://github.com/datamill-co/target-postgres/commit/b89a0baad7f462ea9b41fd33e587bc0804d0aefe"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T01:09:00.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-22T01:09:00.000000Z"}, "message": "Fail: Old records cause a buffer to fill up", "tree": {"sha": "1db12baf9fa4a69541b589e2dec2f8a7691e6758", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1db12baf9fa4a69541b589e2dec2f8a7691e6758"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "html_url": "https://github.com/datamill-co/target-postgres/commit/b89a0baad7f462ea9b41fd33e587bc0804d0aefe", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b89a0baad7f462ea9b41fd33e587bc0804d0aefe/comments", "parents": [{"sha": "f69d669b20d75ae37b518e8366fc54aa9c825c75", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f69d669b20d75ae37b518e8366fc54aa9c825c75", "html_url": "https://github.com/datamill-co/target-postgres/commit/f69d669b20d75ae37b518e8366fc54aa9c825c75"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f69d669b20d75ae37b518e8366fc54aa9c825c75", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-21T20:42:22.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-21T20:43:14.000000Z"}, "message": "Fix: Old table versions overwrite current table", "tree": {"sha": "4a0cf3841112bbbbb862bd71da531f763d675c91", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4a0cf3841112bbbbb862bd71da531f763d675c91"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f69d669b20d75ae37b518e8366fc54aa9c825c75", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f69d669b20d75ae37b518e8366fc54aa9c825c75", "html_url": "https://github.com/datamill-co/target-postgres/commit/f69d669b20d75ae37b518e8366fc54aa9c825c75", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f69d669b20d75ae37b518e8366fc54aa9c825c75/comments", "parents": [{"sha": "59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "html_url": "https://github.com/datamill-co/target-postgres/commit/59b5204f357a0bad3d1d0c6ffd89a42488e8023a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-21T20:22:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-21T20:43:14.000000Z"}, "message": "Fail: Old table versions overwrite current table", "tree": {"sha": "02e2f18d73dd6ba52d2a5360e1a520095ca6ae75", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/02e2f18d73dd6ba52d2a5360e1a520095ca6ae75"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "html_url": "https://github.com/datamill-co/target-postgres/commit/59b5204f357a0bad3d1d0c6ffd89a42488e8023a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59b5204f357a0bad3d1d0c6ffd89a42488e8023a/comments", "parents": [{"sha": "0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e64c4ba9d053e189f502e696342da9c643a89bb2", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-19T17:43:18.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-19T17:43:18.000000Z"}, "message": "Merge pull request #69 from AlexanderMann/fix/remove-collaborators-from-synced\n\nFix/remove collaborators from synced", "tree": {"sha": "3fc080818d0c9e1e5ab1d899958da451c123df96", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3fc080818d0c9e1e5ab1d899958da451c123df96"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e64c4ba9d053e189f502e696342da9c643a89bb2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e64c4ba9d053e189f502e696342da9c643a89bb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/e64c4ba9d053e189f502e696342da9c643a89bb2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e64c4ba9d053e189f502e696342da9c643a89bb2/comments", "parents": [{"sha": "cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc"}, {"sha": "0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-18T18:56:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-18T18:56:34.000000Z"}, "message": "Fix: Remove collaborators from tap-github test", "tree": {"sha": "3fc080818d0c9e1e5ab1d899958da451c123df96", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3fc080818d0c9e1e5ab1d899958da451c123df96"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bfcb8e94fd46ad73a11911f3b548fbbdd58aa39/comments", "parents": [{"sha": "d8f3e131ccc020e7280ec7f1264006143028ef6a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d8f3e131ccc020e7280ec7f1264006143028ef6a", "html_url": "https://github.com/datamill-co/target-postgres/commit/d8f3e131ccc020e7280ec7f1264006143028ef6a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d8f3e131ccc020e7280ec7f1264006143028ef6a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-18T18:55:04.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-18T18:55:04.000000Z"}, "message": "Merge pull request #27 from datamill-co/master\n\nBump fork.", "tree": {"sha": "89762de45125efaf0f16eca164f5d339ec67e74b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/89762de45125efaf0f16eca164f5d339ec67e74b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d8f3e131ccc020e7280ec7f1264006143028ef6a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d8f3e131ccc020e7280ec7f1264006143028ef6a", "html_url": "https://github.com/datamill-co/target-postgres/commit/d8f3e131ccc020e7280ec7f1264006143028ef6a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d8f3e131ccc020e7280ec7f1264006143028ef6a/comments", "parents": [{"sha": "111063fcff38185cb320637e153567324f8c8fb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/111063fcff38185cb320637e153567324f8c8fb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/111063fcff38185cb320637e153567324f8c8fb2"}, {"sha": "cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-18T18:09:42.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-18T18:09:42.000000Z"}, "message": "Merge pull request #68 from AlexanderMann/housekeeping/cli-tests\n\nHousekeeping/cli tests", "tree": {"sha": "89762de45125efaf0f16eca164f5d339ec67e74b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/89762de45125efaf0f16eca164f5d339ec67e74b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc1dbcd5118f6e1237cce3d2d8846033fe0fc9fc/comments", "parents": [{"sha": "43b430d094e563cb2163f28828b31480276bf641", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43b430d094e563cb2163f28828b31480276bf641", "html_url": "https://github.com/datamill-co/target-postgres/commit/43b430d094e563cb2163f28828b31480276bf641"}, {"sha": "2e0722070cf66130cf3c14e00d1be69da2739af4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e0722070cf66130cf3c14e00d1be69da2739af4", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e0722070cf66130cf3c14e00d1be69da2739af4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2e0722070cf66130cf3c14e00d1be69da2739af4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T23:10:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-18T18:07:43.000000Z"}, "message": "Feature: Cache CI python", "tree": {"sha": "89762de45125efaf0f16eca164f5d339ec67e74b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/89762de45125efaf0f16eca164f5d339ec67e74b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2e0722070cf66130cf3c14e00d1be69da2739af4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e0722070cf66130cf3c14e00d1be69da2739af4", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e0722070cf66130cf3c14e00d1be69da2739af4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e0722070cf66130cf3c14e00d1be69da2739af4/comments", "parents": [{"sha": "cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "html_url": "https://github.com/datamill-co/target-postgres/commit/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T22:25:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-18T17:04:12.000000Z"}, "message": "Feature: Extract target data using singer for integration tests", "tree": {"sha": "d7247ff4d77428d4173a2749d59990570d2049fc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d7247ff4d77428d4173a2749d59990570d2049fc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "html_url": "https://github.com/datamill-co/target-postgres/commit/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cd31c7791fa15b3a15d060d2d95f2bea273b6c8e/comments", "parents": [{"sha": "5ee57375d7c2278918af0ca075f9c4de8b9d7704", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5ee57375d7c2278918af0ca075f9c4de8b9d7704", "html_url": "https://github.com/datamill-co/target-postgres/commit/5ee57375d7c2278918af0ca075f9c4de8b9d7704"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5ee57375d7c2278918af0ca075f9c4de8b9d7704", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T21:27:44.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-18T17:04:12.000000Z"}, "message": "Fix: Documentation did not match up with default value for username", "tree": {"sha": "cbfddfa82774ffc84cfb8903a4955a96d085503f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cbfddfa82774ffc84cfb8903a4955a96d085503f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5ee57375d7c2278918af0ca075f9c4de8b9d7704", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5ee57375d7c2278918af0ca075f9c4de8b9d7704", "html_url": "https://github.com/datamill-co/target-postgres/commit/5ee57375d7c2278918af0ca075f9c4de8b9d7704", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5ee57375d7c2278918af0ca075f9c4de8b9d7704/comments", "parents": [{"sha": "833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "html_url": "https://github.com/datamill-co/target-postgres/commit/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T21:16:05.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T23:18:37.000000Z"}, "message": "Issue: Remove milestone and closed_at from tap-github", "tree": {"sha": "f650376dabdadd6a61101e7895e0ee235625958d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f650376dabdadd6a61101e7895e0ee235625958d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "html_url": "https://github.com/datamill-co/target-postgres/commit/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/833bb4589cf3bc6eddc6044e58b8e251ace6a6d3/comments", "parents": [{"sha": "75f020158d18d67d6d6d0f0c21be750c34103240", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75f020158d18d67d6d6d0f0c21be750c34103240", "html_url": "https://github.com/datamill-co/target-postgres/commit/75f020158d18d67d6d6d0f0c21be750c34103240"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "75f020158d18d67d6d6d0f0c21be750c34103240", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T20:18:45.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T23:18:37.000000Z"}, "message": "Housekeeping: CLI Integration Tests", "tree": {"sha": "776fd599919a4c2af3910ad34dd36b1006d27f84", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/776fd599919a4c2af3910ad34dd36b1006d27f84"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/75f020158d18d67d6d6d0f0c21be750c34103240", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75f020158d18d67d6d6d0f0c21be750c34103240", "html_url": "https://github.com/datamill-co/target-postgres/commit/75f020158d18d67d6d6d0f0c21be750c34103240", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75f020158d18d67d6d6d0f0c21be750c34103240/comments", "parents": [{"sha": "c78ff92b2685347c23b0621647a1392d55829342", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78ff92b2685347c23b0621647a1392d55829342", "html_url": "https://github.com/datamill-co/target-postgres/commit/c78ff92b2685347c23b0621647a1392d55829342"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c78ff92b2685347c23b0621647a1392d55829342", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T20:18:22.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T20:18:22.000000Z"}, "message": "Feature: Prep work for cli integration tests", "tree": {"sha": "8b2c73d65a421f4a39b941664dbadf501e8b1033", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8b2c73d65a421f4a39b941664dbadf501e8b1033"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c78ff92b2685347c23b0621647a1392d55829342", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78ff92b2685347c23b0621647a1392d55829342", "html_url": "https://github.com/datamill-co/target-postgres/commit/c78ff92b2685347c23b0621647a1392d55829342", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78ff92b2685347c23b0621647a1392d55829342/comments", "parents": [{"sha": "d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "html_url": "https://github.com/datamill-co/target-postgres/commit/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T19:38:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-17T19:38:04.000000Z"}, "message": "Refactor: Auto-format yml", "tree": {"sha": "50af8bafbcc6fedf96c6424784a563af21fa41a4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/50af8bafbcc6fedf96c6424784a563af21fa41a4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "html_url": "https://github.com/datamill-co/target-postgres/commit/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d271a82f22bef49c2ec26ee8cce9a2f7e1d6629f/comments", "parents": [{"sha": "111063fcff38185cb320637e153567324f8c8fb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/111063fcff38185cb320637e153567324f8c8fb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/111063fcff38185cb320637e153567324f8c8fb2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "111063fcff38185cb320637e153567324f8c8fb2", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-14T17:36:39.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T17:36:39.000000Z"}, "message": "Merge pull request #26 from datamill-co/master\n\nBump fork.", "tree": {"sha": "567bf0b4f4b482d0de6076037bdc957465f323bd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/567bf0b4f4b482d0de6076037bdc957465f323bd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/111063fcff38185cb320637e153567324f8c8fb2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/111063fcff38185cb320637e153567324f8c8fb2", "html_url": "https://github.com/datamill-co/target-postgres/commit/111063fcff38185cb320637e153567324f8c8fb2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/111063fcff38185cb320637e153567324f8c8fb2/comments", "parents": [{"sha": "6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "html_url": "https://github.com/datamill-co/target-postgres/commit/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468"}, {"sha": "43b430d094e563cb2163f28828b31480276bf641", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43b430d094e563cb2163f28828b31480276bf641", "html_url": "https://github.com/datamill-co/target-postgres/commit/43b430d094e563cb2163f28828b31480276bf641"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "43b430d094e563cb2163f28828b31480276bf641", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-14T17:35:59.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T17:35:59.000000Z"}, "message": "Merge pull request #64 from AlexanderMann/fix/multiple-types-per-column-in-single-batch\n\nFix/multiple types per column in single batch", "tree": {"sha": "567bf0b4f4b482d0de6076037bdc957465f323bd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/567bf0b4f4b482d0de6076037bdc957465f323bd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/43b430d094e563cb2163f28828b31480276bf641", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43b430d094e563cb2163f28828b31480276bf641", "html_url": "https://github.com/datamill-co/target-postgres/commit/43b430d094e563cb2163f28828b31480276bf641", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43b430d094e563cb2163f28828b31480276bf641/comments", "parents": [{"sha": "8992be14c2813e3919a13a164815b464a39d415e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8992be14c2813e3919a13a164815b464a39d415e", "html_url": "https://github.com/datamill-co/target-postgres/commit/8992be14c2813e3919a13a164815b464a39d415e"}, {"sha": "19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "html_url": "https://github.com/datamill-co/target-postgres/commit/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T22:52:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Feature: Allow null only fields", "tree": {"sha": "567bf0b4f4b482d0de6076037bdc957465f323bd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/567bf0b4f4b482d0de6076037bdc957465f323bd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "html_url": "https://github.com/datamill-co/target-postgres/commit/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/19b4f9d60e8106f6c14e3969844d0cf5d4e36ab0/comments", "parents": [{"sha": "fd7ee1a9ab82aea6a1c6696760510664393520c0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd7ee1a9ab82aea6a1c6696760510664393520c0", "html_url": "https://github.com/datamill-co/target-postgres/commit/fd7ee1a9ab82aea6a1c6696760510664393520c0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fd7ee1a9ab82aea6a1c6696760510664393520c0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T22:39:32.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Fix: Number values coming over as integers", "tree": {"sha": "ab8efe5a33d82034149667f4f6a45f88732eecee", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ab8efe5a33d82034149667f4f6a45f88732eecee"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fd7ee1a9ab82aea6a1c6696760510664393520c0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd7ee1a9ab82aea6a1c6696760510664393520c0", "html_url": "https://github.com/datamill-co/target-postgres/commit/fd7ee1a9ab82aea6a1c6696760510664393520c0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fd7ee1a9ab82aea6a1c6696760510664393520c0/comments", "parents": [{"sha": "f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "html_url": "https://github.com/datamill-co/target-postgres/commit/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T22:20:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: Use column paths for all mappings", "tree": {"sha": "e727fd7dcbbb028a1bbeb10a00f8a83b7966044b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e727fd7dcbbb028a1bbeb10a00f8a83b7966044b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "html_url": "https://github.com/datamill-co/target-postgres/commit/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f6496aecd0daab2c2e8608d1f27e4a9aa1971a91/comments", "parents": [{"sha": "dbab3e065a30ae7554eddd015ffb9053b7a651fe", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dbab3e065a30ae7554eddd015ffb9053b7a651fe", "html_url": "https://github.com/datamill-co/target-postgres/commit/dbab3e065a30ae7554eddd015ffb9053b7a651fe"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dbab3e065a30ae7554eddd015ffb9053b7a651fe", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T17:56:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Fix: Serialize multi type columns", "tree": {"sha": "9eab759c4511c4b6c7c58a1c2e00c07df30625b0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9eab759c4511c4b6c7c58a1c2e00c07df30625b0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dbab3e065a30ae7554eddd015ffb9053b7a651fe", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dbab3e065a30ae7554eddd015ffb9053b7a651fe", "html_url": "https://github.com/datamill-co/target-postgres/commit/dbab3e065a30ae7554eddd015ffb9053b7a651fe", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dbab3e065a30ae7554eddd015ffb9053b7a651fe/comments", "parents": [{"sha": "62fcd43a6f98325037a45e768a8852aa62372956", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/62fcd43a6f98325037a45e768a8852aa62372956", "html_url": "https://github.com/datamill-co/target-postgres/commit/62fcd43a6f98325037a45e768a8852aa62372956"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.646493Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "62fcd43a6f98325037a45e768a8852aa62372956", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T17:32:53.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Fix: Multi type JSON Schema simplification", "tree": {"sha": "ca945f4fe426840510a6601d442abce1cceb2cd3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ca945f4fe426840510a6601d442abce1cceb2cd3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/62fcd43a6f98325037a45e768a8852aa62372956", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/62fcd43a6f98325037a45e768a8852aa62372956", "html_url": "https://github.com/datamill-co/target-postgres/commit/62fcd43a6f98325037a45e768a8852aa62372956", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/62fcd43a6f98325037a45e768a8852aa62372956/comments", "parents": [{"sha": "387f0a8c4368faadc7d1ef56d40fb73901df95c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/387f0a8c4368faadc7d1ef56d40fb73901df95c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/387f0a8c4368faadc7d1ef56d40fb73901df95c1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "387f0a8c4368faadc7d1ef56d40fb73901df95c1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T17:00:36.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: json_schema literals used in records denesting", "tree": {"sha": "daa0390992683c4b9d5ee2073414a38bb010336a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/daa0390992683c4b9d5ee2073414a38bb010336a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/387f0a8c4368faadc7d1ef56d40fb73901df95c1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/387f0a8c4368faadc7d1ef56d40fb73901df95c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/387f0a8c4368faadc7d1ef56d40fb73901df95c1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/387f0a8c4368faadc7d1ef56d40fb73901df95c1/comments", "parents": [{"sha": "14b293dba69ea7bebde2e11d77706353346aaaec", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/14b293dba69ea7bebde2e11d77706353346aaaec", "html_url": "https://github.com/datamill-co/target-postgres/commit/14b293dba69ea7bebde2e11d77706353346aaaec"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "14b293dba69ea7bebde2e11d77706353346aaaec", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T16:41:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Fix: Multi type schema denesting", "tree": {"sha": "5c302192871d247fcc037129892269ec95284567", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5c302192871d247fcc037129892269ec95284567"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/14b293dba69ea7bebde2e11d77706353346aaaec", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/14b293dba69ea7bebde2e11d77706353346aaaec", "html_url": "https://github.com/datamill-co/target-postgres/commit/14b293dba69ea7bebde2e11d77706353346aaaec", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/14b293dba69ea7bebde2e11d77706353346aaaec/comments", "parents": [{"sha": "59a162525b44411a5018bc5302965d53554381b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59a162525b44411a5018bc5302965d53554381b9", "html_url": "https://github.com/datamill-co/target-postgres/commit/59a162525b44411a5018bc5302965d53554381b9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "59a162525b44411a5018bc5302965d53554381b9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T16:40:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: OBJECT and ARRAY literals in json_schema", "tree": {"sha": "712f7ecfed97eeca5b591ef2eb4732522e13f013", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/712f7ecfed97eeca5b591ef2eb4732522e13f013"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/59a162525b44411a5018bc5302965d53554381b9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59a162525b44411a5018bc5302965d53554381b9", "html_url": "https://github.com/datamill-co/target-postgres/commit/59a162525b44411a5018bc5302965d53554381b9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59a162525b44411a5018bc5302965d53554381b9/comments", "parents": [{"sha": "1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "html_url": "https://github.com/datamill-co/target-postgres/commit/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T16:26:44.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: denest schema, use nullable for parent type", "tree": {"sha": "2e7b376100cfac040dd63cd584e2d8056484c6bc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2e7b376100cfac040dd63cd584e2d8056484c6bc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "html_url": "https://github.com/datamill-co/target-postgres/commit/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1eed6d98c83a8a37eadecf912ab729a6e0e4cb87/comments", "parents": [{"sha": "7517b084abe99600ad97d476175a2af0ccd18868", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7517b084abe99600ad97d476175a2af0ccd18868", "html_url": "https://github.com/datamill-co/target-postgres/commit/7517b084abe99600ad97d476175a2af0ccd18868"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7517b084abe99600ad97d476175a2af0ccd18868", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T16:23:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Feature: json_schema.is_literal()", "tree": {"sha": "82b17e17360710497126d00ac772e993514e54b5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/82b17e17360710497126d00ac772e993514e54b5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7517b084abe99600ad97d476175a2af0ccd18868", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7517b084abe99600ad97d476175a2af0ccd18868", "html_url": "https://github.com/datamill-co/target-postgres/commit/7517b084abe99600ad97d476175a2af0ccd18868", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7517b084abe99600ad97d476175a2af0ccd18868/comments", "parents": [{"sha": "8a7cad6339f935fae6a8da38482cdecc1716068d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8a7cad6339f935fae6a8da38482cdecc1716068d", "html_url": "https://github.com/datamill-co/target-postgres/commit/8a7cad6339f935fae6a8da38482cdecc1716068d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8a7cad6339f935fae6a8da38482cdecc1716068d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T16:01:48.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Fail: Multiple types per column, single batch", "tree": {"sha": "5d35d96cf71bb9a4f06c6ff17c3e815348499d0d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5d35d96cf71bb9a4f06c6ff17c3e815348499d0d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8a7cad6339f935fae6a8da38482cdecc1716068d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8a7cad6339f935fae6a8da38482cdecc1716068d", "html_url": "https://github.com/datamill-co/target-postgres/commit/8a7cad6339f935fae6a8da38482cdecc1716068d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8a7cad6339f935fae6a8da38482cdecc1716068d/comments", "parents": [{"sha": "8ce53eb42d16c3883540a6d1072178bf1293ca70", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8ce53eb42d16c3883540a6d1072178bf1293ca70", "html_url": "https://github.com/datamill-co/target-postgres/commit/8ce53eb42d16c3883540a6d1072178bf1293ca70"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8ce53eb42d16c3883540a6d1072178bf1293ca70", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T15:09:39.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: auto-format test_postgres", "tree": {"sha": "775542afb1b32537361e58ecdc26a8d5468e65a3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/775542afb1b32537361e58ecdc26a8d5468e65a3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8ce53eb42d16c3883540a6d1072178bf1293ca70", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8ce53eb42d16c3883540a6d1072178bf1293ca70", "html_url": "https://github.com/datamill-co/target-postgres/commit/8ce53eb42d16c3883540a6d1072178bf1293ca70", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8ce53eb42d16c3883540a6d1072178bf1293ca70/comments", "parents": [{"sha": "6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "html_url": "https://github.com/datamill-co/target-postgres/commit/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T15:07:10.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: use column/field paths for row serialization", "tree": {"sha": "2040034f583d558fa3308b396334db691c9ba4a4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2040034f583d558fa3308b396334db691c9ba4a4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "html_url": "https://github.com/datamill-co/target-postgres/commit/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6c0a3169c8fc64646be07ebe0e7858bf0ff8272d/comments", "parents": [{"sha": "fe69d96663f2b797cbb43d43abf48db62f4ec398", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fe69d96663f2b797cbb43d43abf48db62f4ec398", "html_url": "https://github.com/datamill-co/target-postgres/commit/fe69d96663f2b797cbb43d43abf48db62f4ec398"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fe69d96663f2b797cbb43d43abf48db62f4ec398", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T03:15:31.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: Use tuples for column paths in record flatten", "tree": {"sha": "52bc5dc6600e3603b2f9176b6449199a0a584357", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/52bc5dc6600e3603b2f9176b6449199a0a584357"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fe69d96663f2b797cbb43d43abf48db62f4ec398", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fe69d96663f2b797cbb43d43abf48db62f4ec398", "html_url": "https://github.com/datamill-co/target-postgres/commit/fe69d96663f2b797cbb43d43abf48db62f4ec398", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fe69d96663f2b797cbb43d43abf48db62f4ec398/comments", "parents": [{"sha": "e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "html_url": "https://github.com/datamill-co/target-postgres/commit/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-13T03:07:44.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: Use tuples for column paths in schema flatten", "tree": {"sha": "8786acd2aed2a8c7a9dd7f964670e65c6c88160b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8786acd2aed2a8c7a9dd7f964670e65c6c88160b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "html_url": "https://github.com/datamill-co/target-postgres/commit/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e094ec27fd399fba3ce20caf65ca7cb11f3dd6b5/comments", "parents": [{"sha": "2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "html_url": "https://github.com/datamill-co/target-postgres/commit/2a70928e26ad25b5d4a319ea780a3e3da975ca0e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-11T03:22:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:33.000000Z"}, "message": "Refactor: json_schema.NULL, enforce single type for column schemas", "tree": {"sha": "155b8f9d56202a3c1a63aba083c73373f0659a58", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/155b8f9d56202a3c1a63aba083c73373f0659a58"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "html_url": "https://github.com/datamill-co/target-postgres/commit/2a70928e26ad25b5d4a319ea780a3e3da975ca0e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2a70928e26ad25b5d4a319ea780a3e3da975ca0e/comments", "parents": [{"sha": "6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "html_url": "https://github.com/datamill-co/target-postgres/commit/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:59:00.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T16:59:00.000000Z"}, "message": "Merge pull request #25 from datamill-co/master\n\nBump fork.", "tree": {"sha": "11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "html_url": "https://github.com/datamill-co/target-postgres/commit/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6b68c4846ca56ca0cde31ba5308fc0f1d8da2468/comments", "parents": [{"sha": "1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "html_url": "https://github.com/datamill-co/target-postgres/commit/1783ab32a9e940a442c6b37e5a8505ab258ef4f7"}, {"sha": "8992be14c2813e3919a13a164815b464a39d415e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8992be14c2813e3919a13a164815b464a39d415e", "html_url": "https://github.com/datamill-co/target-postgres/commit/8992be14c2813e3919a13a164815b464a39d415e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8992be14c2813e3919a13a164815b464a39d415e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-14T16:55:15.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T16:55:15.000000Z"}, "message": "Merge pull request #63 from AlexanderMann/fix/nested-tables\n\nFix/nested tables", "tree": {"sha": "11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8992be14c2813e3919a13a164815b464a39d415e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8992be14c2813e3919a13a164815b464a39d415e", "html_url": "https://github.com/datamill-co/target-postgres/commit/8992be14c2813e3919a13a164815b464a39d415e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8992be14c2813e3919a13a164815b464a39d415e/comments", "parents": [{"sha": "939a87bb3b518c733cbead100536d562cd28f137", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/939a87bb3b518c733cbead100536d562cd28f137", "html_url": "https://github.com/datamill-co/target-postgres/commit/939a87bb3b518c733cbead100536d562cd28f137"}, {"sha": "37f38150fc9a7008b77e2da420420dea1187e235", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/37f38150fc9a7008b77e2da420420dea1187e235", "html_url": "https://github.com/datamill-co/target-postgres/commit/37f38150fc9a7008b77e2da420420dea1187e235"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "37f38150fc9a7008b77e2da420420dea1187e235", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-11T03:27:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T23:41:34.000000Z"}, "message": "Fix: Tests broken, move to feature", "tree": {"sha": "11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11d116f74c5eb2e1dea2ecb9571f5e2fb1b48e21"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/37f38150fc9a7008b77e2da420420dea1187e235", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/37f38150fc9a7008b77e2da420420dea1187e235", "html_url": "https://github.com/datamill-co/target-postgres/commit/37f38150fc9a7008b77e2da420420dea1187e235", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/37f38150fc9a7008b77e2da420420dea1187e235/comments", "parents": [{"sha": "da1623bee6412a814173b9e476f9cbe6382de30d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da1623bee6412a814173b9e476f9cbe6382de30d", "html_url": "https://github.com/datamill-co/target-postgres/commit/da1623bee6412a814173b9e476f9cbe6382de30d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "da1623bee6412a814173b9e476f9cbe6382de30d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-11T03:26:32.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T23:41:34.000000Z"}, "message": "Fix: Nested arrays, nested dictionaries", "tree": {"sha": "2a78d34661e22247e597a4db4cdea6cffe3df48f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2a78d34661e22247e597a4db4cdea6cffe3df48f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/da1623bee6412a814173b9e476f9cbe6382de30d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da1623bee6412a814173b9e476f9cbe6382de30d", "html_url": "https://github.com/datamill-co/target-postgres/commit/da1623bee6412a814173b9e476f9cbe6382de30d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/da1623bee6412a814173b9e476f9cbe6382de30d/comments", "parents": [{"sha": "54303947186db8530cf1baf23bfbea2fa5100489", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/54303947186db8530cf1baf23bfbea2fa5100489", "html_url": "https://github.com/datamill-co/target-postgres/commit/54303947186db8530cf1baf23bfbea2fa5100489"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "54303947186db8530cf1baf23bfbea2fa5100489", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-11T03:24:22.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T23:41:34.000000Z"}, "message": "Fix: null values underneath non_null object", "tree": {"sha": "927acd8d5d67aec45f1169ce42c0989c55638da0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/927acd8d5d67aec45f1169ce42c0989c55638da0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/54303947186db8530cf1baf23bfbea2fa5100489", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/54303947186db8530cf1baf23bfbea2fa5100489", "html_url": "https://github.com/datamill-co/target-postgres/commit/54303947186db8530cf1baf23bfbea2fa5100489", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/54303947186db8530cf1baf23bfbea2fa5100489/comments", "parents": [{"sha": "be2228c48d958b1103983fe69c3d93b5dbe255c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be2228c48d958b1103983fe69c3d93b5dbe255c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/be2228c48d958b1103983fe69c3d93b5dbe255c1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "be2228c48d958b1103983fe69c3d93b5dbe255c1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-10T17:18:11.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T23:41:34.000000Z"}, "message": "Fail: Sandbox Data: BigCommerce", "tree": {"sha": "239ffb5476905f55d6bd51e00dbdd938aaf01ebf", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/239ffb5476905f55d6bd51e00dbdd938aaf01ebf"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/be2228c48d958b1103983fe69c3d93b5dbe255c1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be2228c48d958b1103983fe69c3d93b5dbe255c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/be2228c48d958b1103983fe69c3d93b5dbe255c1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be2228c48d958b1103983fe69c3d93b5dbe255c1/comments", "parents": [{"sha": "c78235457afe7ccdc7ea474449de792d11504381", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78235457afe7ccdc7ea474449de792d11504381", "html_url": "https://github.com/datamill-co/target-postgres/commit/c78235457afe7ccdc7ea474449de792d11504381"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c78235457afe7ccdc7ea474449de792d11504381", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-08T00:51:24.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Fail: Nested arrays of arrays", "tree": {"sha": "da6e6f3cab680c444674efe07ad1e93862462e18", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/da6e6f3cab680c444674efe07ad1e93862462e18"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c78235457afe7ccdc7ea474449de792d11504381", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78235457afe7ccdc7ea474449de792d11504381", "html_url": "https://github.com/datamill-co/target-postgres/commit/c78235457afe7ccdc7ea474449de792d11504381", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c78235457afe7ccdc7ea474449de792d11504381/comments", "parents": [{"sha": "362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "html_url": "https://github.com/datamill-co/target-postgres/commit/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-08T00:40:30.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Fail: Weird null denesting", "tree": {"sha": "403649e9f1bd08d33f4a5002f1b05376ed679fbd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/403649e9f1bd08d33f4a5002f1b05376ed679fbd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "html_url": "https://github.com/datamill-co/target-postgres/commit/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/362fcfdd44c43776bc7d6e6b4205b0c83d3ec1db/comments", "parents": [{"sha": "d620712fbba83b87105b72edd26fa51fdff9f4c7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d620712fbba83b87105b72edd26fa51fdff9f4c7", "html_url": "https://github.com/datamill-co/target-postgres/commit/d620712fbba83b87105b72edd26fa51fdff9f4c7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d620712fbba83b87105b72edd26fa51fdff9f4c7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-08T00:33:39.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Fail: Nested dictionaries", "tree": {"sha": "b88e27b5221fae00b7b7a2f5add555b5df5c37c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b88e27b5221fae00b7b7a2f5add555b5df5c37c1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d620712fbba83b87105b72edd26fa51fdff9f4c7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d620712fbba83b87105b72edd26fa51fdff9f4c7", "html_url": "https://github.com/datamill-co/target-postgres/commit/d620712fbba83b87105b72edd26fa51fdff9f4c7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d620712fbba83b87105b72edd26fa51fdff9f4c7/comments", "parents": [{"sha": "def955899ddac49ab5b4e32b807f76ed42844a6c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/def955899ddac49ab5b4e32b807f76ed42844a6c", "html_url": "https://github.com/datamill-co/target-postgres/commit/def955899ddac49ab5b4e32b807f76ed42844a6c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "def955899ddac49ab5b4e32b807f76ed42844a6c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-08T00:06:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Fail: Nested literal arrays", "tree": {"sha": "c8ebc2308513366b891f93ddef1b6780d7cf0a24", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c8ebc2308513366b891f93ddef1b6780d7cf0a24"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/def955899ddac49ab5b4e32b807f76ed42844a6c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/def955899ddac49ab5b4e32b807f76ed42844a6c", "html_url": "https://github.com/datamill-co/target-postgres/commit/def955899ddac49ab5b4e32b807f76ed42844a6c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/def955899ddac49ab5b4e32b807f76ed42844a6c/comments", "parents": [{"sha": "2df882d8dbd31f188ae0c396ba5035ea6465339e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2df882d8dbd31f188ae0c396ba5035ea6465339e", "html_url": "https://github.com/datamill-co/target-postgres/commit/2df882d8dbd31f188ae0c396ba5035ea6465339e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2df882d8dbd31f188ae0c396ba5035ea6465339e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-08T00:01:46.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Fail: Default on complex types not handled", "tree": {"sha": "64e0a04039ac81638630c6990c2186e28cb7d386", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/64e0a04039ac81638630c6990c2186e28cb7d386"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2df882d8dbd31f188ae0c396ba5035ea6465339e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2df882d8dbd31f188ae0c396ba5035ea6465339e", "html_url": "https://github.com/datamill-co/target-postgres/commit/2df882d8dbd31f188ae0c396ba5035ea6465339e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2df882d8dbd31f188ae0c396ba5035ea6465339e/comments", "parents": [{"sha": "3cb3187a484b22b92648954395fe3c2a972e6c55", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3cb3187a484b22b92648954395fe3c2a972e6c55", "html_url": "https://github.com/datamill-co/target-postgres/commit/3cb3187a484b22b92648954395fe3c2a972e6c55"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3cb3187a484b22b92648954395fe3c2a972e6c55", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T23:54:46.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-12T22:43:15.000000Z"}, "message": "Housekeeping: Autoformat fixtures", "tree": {"sha": "bf30205ff0830d7a333f5b471ea3ef47e42a990e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/bf30205ff0830d7a333f5b471ea3ef47e42a990e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3cb3187a484b22b92648954395fe3c2a972e6c55", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3cb3187a484b22b92648954395fe3c2a972e6c55", "html_url": "https://github.com/datamill-co/target-postgres/commit/3cb3187a484b22b92648954395fe3c2a972e6c55", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3cb3187a484b22b92648954395fe3c2a972e6c55/comments", "parents": [{"sha": "1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "html_url": "https://github.com/datamill-co/target-postgres/commit/1783ab32a9e940a442c6b37e5a8505ab258ef4f7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-12T20:04:27.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-12T20:04:27.000000Z"}, "message": "Merge pull request #24 from datamill-co/master\n\nBump fork.", "tree": {"sha": "1c2b9e72b00f60f148d63f38b70ec6e04e8e87b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1c2b9e72b00f60f148d63f38b70ec6e04e8e87b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "html_url": "https://github.com/datamill-co/target-postgres/commit/1783ab32a9e940a442c6b37e5a8505ab258ef4f7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1783ab32a9e940a442c6b37e5a8505ab258ef4f7/comments", "parents": [{"sha": "791fefa16c065ab9487fcd02022492c3e3ffe61a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/791fefa16c065ab9487fcd02022492c3e3ffe61a", "html_url": "https://github.com/datamill-co/target-postgres/commit/791fefa16c065ab9487fcd02022492c3e3ffe61a"}, {"sha": "939a87bb3b518c733cbead100536d562cd28f137", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/939a87bb3b518c733cbead100536d562cd28f137", "html_url": "https://github.com/datamill-co/target-postgres/commit/939a87bb3b518c733cbead100536d562cd28f137"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "939a87bb3b518c733cbead100536d562cd28f137", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-12T20:03:10.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-12T20:03:10.000000Z"}, "message": "Merge pull request #60 from AlexanderMann/feature/table-name-normalization--conflicting\n\nFeature/table name normalization", "tree": {"sha": "1c2b9e72b00f60f148d63f38b70ec6e04e8e87b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1c2b9e72b00f60f148d63f38b70ec6e04e8e87b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/939a87bb3b518c733cbead100536d562cd28f137", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/939a87bb3b518c733cbead100536d562cd28f137", "html_url": "https://github.com/datamill-co/target-postgres/commit/939a87bb3b518c733cbead100536d562cd28f137", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/939a87bb3b518c733cbead100536d562cd28f137/comments", "parents": [{"sha": "0c4cee34fa53df3c228ea93443719e236e6b5a1d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c4cee34fa53df3c228ea93443719e236e6b5a1d", "html_url": "https://github.com/datamill-co/target-postgres/commit/0c4cee34fa53df3c228ea93443719e236e6b5a1d"}, {"sha": "0bc47903a5d76b0cc1488444efc699928a803685", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bc47903a5d76b0cc1488444efc699928a803685", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bc47903a5d76b0cc1488444efc699928a803685"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0bc47903a5d76b0cc1488444efc699928a803685", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T22:18:35.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T22:19:09.000000Z"}, "message": "Feature: Detect invalid generated root table names", "tree": {"sha": "1c5e2f271de19cb1c8010781f64979e8e9f140d7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1c5e2f271de19cb1c8010781f64979e8e9f140d7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0bc47903a5d76b0cc1488444efc699928a803685", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bc47903a5d76b0cc1488444efc699928a803685", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bc47903a5d76b0cc1488444efc699928a803685", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bc47903a5d76b0cc1488444efc699928a803685/comments", "parents": [{"sha": "cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T22:10:50.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T22:19:09.000000Z"}, "message": "Fail: Root stream name invalid after version", "tree": {"sha": "0396b23942d2468666b6900854fee4d4ed116f79", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/0396b23942d2468666b6900854fee4d4ed116f79"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "html_url": "https://github.com/datamill-co/target-postgres/commit/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cc6f54896ade8a24f1a7c9a6792c9b90790c6b4e/comments", "parents": [{"sha": "5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "html_url": "https://github.com/datamill-co/target-postgres/commit/5d987071e6641d4f5427fbdf29b80a0cb7b5d255"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:55:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:58:33.000000Z"}, "message": "Feature: Conflicting table names\n\nWhen a table is going to be created/persisted to, detects the collision and creates a table mapping instead.", "tree": {"sha": "aab133b7aa08785e7dd361ebbe5f508cd2cc042d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/aab133b7aa08785e7dd361ebbe5f508cd2cc042d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "html_url": "https://github.com/datamill-co/target-postgres/commit/5d987071e6641d4f5427fbdf29b80a0cb7b5d255", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5d987071e6641d4f5427fbdf29b80a0cb7b5d255/comments", "parents": [{"sha": "09fe58b34e18e9a841bf64d250ab99c1a7562850", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/09fe58b34e18e9a841bf64d250ab99c1a7562850", "html_url": "https://github.com/datamill-co/target-postgres/commit/09fe58b34e18e9a841bf64d250ab99c1a7562850"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "09fe58b34e18e9a841bf64d250ab99c1a7562850", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T18:01:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:58:33.000000Z"}, "message": "Fail: Colliding invalid names", "tree": {"sha": "cf4d70edeb72476b4df13b0a8e6ff6316b5d0cd5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cf4d70edeb72476b4df13b0a8e6ff6316b5d0cd5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/09fe58b34e18e9a841bf64d250ab99c1a7562850", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/09fe58b34e18e9a841bf64d250ab99c1a7562850", "html_url": "https://github.com/datamill-co/target-postgres/commit/09fe58b34e18e9a841bf64d250ab99c1a7562850", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/09fe58b34e18e9a841bf64d250ab99c1a7562850/comments", "parents": [{"sha": "d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "html_url": "https://github.com/datamill-co/target-postgres/commit/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.788919Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:52:10.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:58:33.000000Z"}, "message": "Feature: Detect table name mapping conflict", "tree": {"sha": "08b452338babe4872667c7a9a579db89abcfca71", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/08b452338babe4872667c7a9a579db89abcfca71"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "html_url": "https://github.com/datamill-co/target-postgres/commit/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d02f01a039937b7eb4fc5bb49e7ff2443f0036f9/comments", "parents": [{"sha": "c7c629ff364c20bed9145d59fccecf1362364e97", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c7c629ff364c20bed9145d59fccecf1362364e97", "html_url": "https://github.com/datamill-co/target-postgres/commit/c7c629ff364c20bed9145d59fccecf1362364e97"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c7c629ff364c20bed9145d59fccecf1362364e97", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:47:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T21:58:33.000000Z"}, "message": "Refactor: Redundant calls\n\nMakes call sites of small helper functions simpler. Sets up future work for using CRUD naming.", "tree": {"sha": "f4b91593d922b71afcc16fb02f9a04fece9e930f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f4b91593d922b71afcc16fb02f9a04fece9e930f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c7c629ff364c20bed9145d59fccecf1362364e97", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c7c629ff364c20bed9145d59fccecf1362364e97", "html_url": "https://github.com/datamill-co/target-postgres/commit/c7c629ff364c20bed9145d59fccecf1362364e97", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c7c629ff364c20bed9145d59fccecf1362364e97/comments", "parents": [{"sha": "507088deeb23edc70a3814a062c1a7d7f7351847", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/507088deeb23edc70a3814a062c1a7d7f7351847", "html_url": "https://github.com/datamill-co/target-postgres/commit/507088deeb23edc70a3814a062c1a7d7f7351847"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "507088deeb23edc70a3814a062c1a7d7f7351847", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T20:08:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T20:08:25.000000Z"}, "message": "Refactor: Use full table path and name to fetch schema", "tree": {"sha": "360c6035669c1a322f47a19e3049bb0c172886b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/360c6035669c1a322f47a19e3049bb0c172886b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/507088deeb23edc70a3814a062c1a7d7f7351847", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/507088deeb23edc70a3814a062c1a7d7f7351847", "html_url": "https://github.com/datamill-co/target-postgres/commit/507088deeb23edc70a3814a062c1a7d7f7351847", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/507088deeb23edc70a3814a062c1a7d7f7351847/comments", "parents": [{"sha": "99c813cf5feb160350a53a3fb23730cb40a48b9c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99c813cf5feb160350a53a3fb23730cb40a48b9c", "html_url": "https://github.com/datamill-co/target-postgres/commit/99c813cf5feb160350a53a3fb23730cb40a48b9c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "99c813cf5feb160350a53a3fb23730cb40a48b9c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T19:49:30.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T19:49:30.000000Z"}, "message": "Refactor: fewer external calls to get_table_schema", "tree": {"sha": "574e354de9228f6f2f952719bc94e79cf60c37a6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/574e354de9228f6f2f952719bc94e79cf60c37a6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/99c813cf5feb160350a53a3fb23730cb40a48b9c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99c813cf5feb160350a53a3fb23730cb40a48b9c", "html_url": "https://github.com/datamill-co/target-postgres/commit/99c813cf5feb160350a53a3fb23730cb40a48b9c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99c813cf5feb160350a53a3fb23730cb40a48b9c/comments", "parents": [{"sha": "919d51a89813e0d5bb1f86e513e8f478fb80075e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/919d51a89813e0d5bb1f86e513e8f478fb80075e", "html_url": "https://github.com/datamill-co/target-postgres/commit/919d51a89813e0d5bb1f86e513e8f478fb80075e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "919d51a89813e0d5bb1f86e513e8f478fb80075e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T17:50:40.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T18:04:22.000000Z"}, "message": "Refactor: continue pushing SEPARATOR down", "tree": {"sha": "439a35099f2690163f1d034837426c26dc8582d7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/439a35099f2690163f1d034837426c26dc8582d7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/919d51a89813e0d5bb1f86e513e8f478fb80075e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/919d51a89813e0d5bb1f86e513e8f478fb80075e", "html_url": "https://github.com/datamill-co/target-postgres/commit/919d51a89813e0d5bb1f86e513e8f478fb80075e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/919d51a89813e0d5bb1f86e513e8f478fb80075e/comments", "parents": [{"sha": "b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "html_url": "https://github.com/datamill-co/target-postgres/commit/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T17:56:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-07T18:04:22.000000Z"}, "message": "Fail: Detect table name mapping conflict", "tree": {"sha": "eeb12d6c52656957970d10d399ed1341876b422d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/eeb12d6c52656957970d10d399ed1341876b422d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "html_url": "https://github.com/datamill-co/target-postgres/commit/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b393bbe4bf663ec5fc31ab3e4673e5b547b4fe3a/comments", "parents": [{"sha": "0bb1f948bf7668969d401d5620f3f19f44ce3473", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bb1f948bf7668969d401d5620f3f19f44ce3473", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bb1f948bf7668969d401d5620f3f19f44ce3473"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0bb1f948bf7668969d401d5620f3f19f44ce3473", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T17:56:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Feature: Canonicalize non colliding invalid table name", "tree": {"sha": "1c77dfb3673b371c20f4332fdcd8d297c8f3783c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1c77dfb3673b371c20f4332fdcd8d297c8f3783c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0bb1f948bf7668969d401d5620f3f19f44ce3473", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bb1f948bf7668969d401d5620f3f19f44ce3473", "html_url": "https://github.com/datamill-co/target-postgres/commit/0bb1f948bf7668969d401d5620f3f19f44ce3473", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0bb1f948bf7668969d401d5620f3f19f44ce3473/comments", "parents": [{"sha": "1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T17:52:36.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Fix: clear_db cannot handle dynamic table names", "tree": {"sha": "1d0362683e08c8bec51eed9f76521611e9227c8c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1d0362683e08c8bec51eed9f76521611e9227c8c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d5c8a310ab5f1a64f34af41eaae9566d76e5ba4/comments", "parents": [{"sha": "be8d654ea38b5fd1211204954399f3b6942a82ec", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be8d654ea38b5fd1211204954399f3b6942a82ec", "html_url": "https://github.com/datamill-co/target-postgres/commit/be8d654ea38b5fd1211204954399f3b6942a82ec"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "be8d654ea38b5fd1211204954399f3b6942a82ec", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T16:02:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Fail: Nested: Non-colliding Invalid Table Names\n\nNested (sub) tables which have invalid names which _do not_ collide should be able to be canonicalized.", "tree": {"sha": "d688cabd0f5b71e1491fd83bd0a4650bef3344c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d688cabd0f5b71e1491fd83bd0a4650bef3344c1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/be8d654ea38b5fd1211204954399f3b6942a82ec", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be8d654ea38b5fd1211204954399f3b6942a82ec", "html_url": "https://github.com/datamill-co/target-postgres/commit/be8d654ea38b5fd1211204954399f3b6942a82ec", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/be8d654ea38b5fd1211204954399f3b6942a82ec/comments", "parents": [{"sha": "89d03666456f6f40b84e817b1f9a6b040ad9826a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89d03666456f6f40b84e817b1f9a6b040ad9826a", "html_url": "https://github.com/datamill-co/target-postgres/commit/89d03666456f6f40b84e817b1f9a6b040ad9826a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "89d03666456f6f40b84e817b1f9a6b040ad9826a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T16:01:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Fix: Table Name Validation", "tree": {"sha": "605f8df0d6affafc7a1d0da5c4b858068a088255", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/605f8df0d6affafc7a1d0da5c4b858068a088255"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/89d03666456f6f40b84e817b1f9a6b040ad9826a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89d03666456f6f40b84e817b1f9a6b040ad9826a", "html_url": "https://github.com/datamill-co/target-postgres/commit/89d03666456f6f40b84e817b1f9a6b040ad9826a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89d03666456f6f40b84e817b1f9a6b040ad9826a/comments", "parents": [{"sha": "c01586c6192697c21114de1d4eec84af6c2cd63f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c01586c6192697c21114de1d4eec84af6c2cd63f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c01586c6192697c21114de1d4eec84af6c2cd63f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c01586c6192697c21114de1d4eec84af6c2cd63f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T15:43:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Fail: Invalid Table names: stricter testing", "tree": {"sha": "3198571a5a83f78df17fffa0a6caceae3167a975", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3198571a5a83f78df17fffa0a6caceae3167a975"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c01586c6192697c21114de1d4eec84af6c2cd63f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c01586c6192697c21114de1d4eec84af6c2cd63f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c01586c6192697c21114de1d4eec84af6c2cd63f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c01586c6192697c21114de1d4eec84af6c2cd63f/comments", "parents": [{"sha": "ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "html_url": "https://github.com/datamill-co/target-postgres/commit/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-05T02:56:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:03:06.000000Z"}, "message": "Performance: redundant call to remote_schema", "tree": {"sha": "eed99fe752b57ae90d5e6515a331dd8bf0bad0e7", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/eed99fe752b57ae90d5e6515a331dd8bf0bad0e7"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "html_url": "https://github.com/datamill-co/target-postgres/commit/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ce1c56cddc1884d98ab1189b5fc3eeedf2ac8c50/comments", "parents": [{"sha": "bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "html_url": "https://github.com/datamill-co/target-postgres/commit/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T22:41:58.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-06T18:02:15.000000Z"}, "message": "Refactor: table_batches uses paths", "tree": {"sha": "5d270ed2013a92fcdac7dcf9d3129e0011cfc050", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5d270ed2013a92fcdac7dcf9d3129e0011cfc050"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "html_url": "https://github.com/datamill-co/target-postgres/commit/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bbea3f93b9ee8df3d38e873f66b6e2f1dd87ac79/comments", "parents": [{"sha": "df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "html_url": "https://github.com/datamill-co/target-postgres/commit/df8998501dcf5ce92d4db3b1ab941ce72b587cdb"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T22:38:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T22:38:57.000000Z"}, "message": "Refactor: denest_records uses table_path, not concatenation", "tree": {"sha": "3777a416e91dfb48480a3410d5f600b1c38c04e4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3777a416e91dfb48480a3410d5f600b1c38c04e4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "html_url": "https://github.com/datamill-co/target-postgres/commit/df8998501dcf5ce92d4db3b1ab941ce72b587cdb", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df8998501dcf5ce92d4db3b1ab941ce72b587cdb/comments", "parents": [{"sha": "6a4fc6092d4b15e1e2450f6699b4960592defb52", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6a4fc6092d4b15e1e2450f6699b4960592defb52", "html_url": "https://github.com/datamill-co/target-postgres/commit/6a4fc6092d4b15e1e2450f6699b4960592defb52"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6a4fc6092d4b15e1e2450f6699b4960592defb52", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T22:03:45.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T22:03:45.000000Z"}, "message": "Refactor: Schema denesting uses table path, not name concatenation", "tree": {"sha": "7a3cdac8c769e80efd1ebcd37885e49b99a0b120", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7a3cdac8c769e80efd1ebcd37885e49b99a0b120"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6a4fc6092d4b15e1e2450f6699b4960592defb52", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6a4fc6092d4b15e1e2450f6699b4960592defb52", "html_url": "https://github.com/datamill-co/target-postgres/commit/6a4fc6092d4b15e1e2450f6699b4960592defb52", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6a4fc6092d4b15e1e2450f6699b4960592defb52/comments", "parents": [{"sha": "791fefa16c065ab9487fcd02022492c3e3ffe61a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/791fefa16c065ab9487fcd02022492c3e3ffe61a", "html_url": "https://github.com/datamill-co/target-postgres/commit/791fefa16c065ab9487fcd02022492c3e3ffe61a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0c4cee34fa53df3c228ea93443719e236e6b5a1d", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-04T21:17:16.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T21:17:16.000000Z"}, "message": "Merge pull request #55 from AlexanderMann/docs/rationalizations\n\nFeature: init DECISIONS.md", "tree": {"sha": "ae7e8f5a43b15a8f220d51dfab6fc0a4e02866a2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ae7e8f5a43b15a8f220d51dfab6fc0a4e02866a2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0c4cee34fa53df3c228ea93443719e236e6b5a1d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c4cee34fa53df3c228ea93443719e236e6b5a1d", "html_url": "https://github.com/datamill-co/target-postgres/commit/0c4cee34fa53df3c228ea93443719e236e6b5a1d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c4cee34fa53df3c228ea93443719e236e6b5a1d/comments", "parents": [{"sha": "a5750d9d9e932d19950d7e5f8330ba86e81a5369", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a5750d9d9e932d19950d7e5f8330ba86e81a5369", "html_url": "https://github.com/datamill-co/target-postgres/commit/a5750d9d9e932d19950d7e5f8330ba86e81a5369"}, {"sha": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01713ca48fd3a25f5185cb880dc6883f4a46e830", "html_url": "https://github.com/datamill-co/target-postgres/commit/01713ca48fd3a25f5185cb880dc6883f4a46e830"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "791fefa16c065ab9487fcd02022492c3e3ffe61a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-04T20:36:40.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T20:36:40.000000Z"}, "message": "Merge pull request #23 from datamill-co/master\n\nBump fork.", "tree": {"sha": "9b24d56fd92fc242f34d2d68bd06e06944fda8a9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9b24d56fd92fc242f34d2d68bd06e06944fda8a9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/791fefa16c065ab9487fcd02022492c3e3ffe61a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/791fefa16c065ab9487fcd02022492c3e3ffe61a", "html_url": "https://github.com/datamill-co/target-postgres/commit/791fefa16c065ab9487fcd02022492c3e3ffe61a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/791fefa16c065ab9487fcd02022492c3e3ffe61a/comments", "parents": [{"sha": "0d229178752e5d2c1f5b36c44678b904e95986fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0d229178752e5d2c1f5b36c44678b904e95986fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/0d229178752e5d2c1f5b36c44678b904e95986fa"}, {"sha": "a5750d9d9e932d19950d7e5f8330ba86e81a5369", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a5750d9d9e932d19950d7e5f8330ba86e81a5369", "html_url": "https://github.com/datamill-co/target-postgres/commit/a5750d9d9e932d19950d7e5f8330ba86e81a5369"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "01713ca48fd3a25f5185cb880dc6883f4a46e830", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T20:28:30.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T20:28:30.000000Z"}, "message": "CR", "tree": {"sha": "64035bac17a4ee071a8ab3e8ad1d03063713442d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/64035bac17a4ee071a8ab3e8ad1d03063713442d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/01713ca48fd3a25f5185cb880dc6883f4a46e830", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01713ca48fd3a25f5185cb880dc6883f4a46e830", "html_url": "https://github.com/datamill-co/target-postgres/commit/01713ca48fd3a25f5185cb880dc6883f4a46e830", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01713ca48fd3a25f5185cb880dc6883f4a46e830/comments", "parents": [{"sha": "3ab353962e5fcdf0fc85adec733273367b36c307", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ab353962e5fcdf0fc85adec733273367b36c307", "html_url": "https://github.com/datamill-co/target-postgres/commit/3ab353962e5fcdf0fc85adec733273367b36c307"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a5750d9d9e932d19950d7e5f8330ba86e81a5369", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:39:55.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T19:39:55.000000Z"}, "message": "Merge pull request #56 from AlexanderMann/feature/column-name-normalization--collision\n\nFeature/column name normalization  collision", "tree": {"sha": "9b24d56fd92fc242f34d2d68bd06e06944fda8a9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9b24d56fd92fc242f34d2d68bd06e06944fda8a9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a5750d9d9e932d19950d7e5f8330ba86e81a5369", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a5750d9d9e932d19950d7e5f8330ba86e81a5369", "html_url": "https://github.com/datamill-co/target-postgres/commit/a5750d9d9e932d19950d7e5f8330ba86e81a5369", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a5750d9d9e932d19950d7e5f8330ba86e81a5369/comments", "parents": [{"sha": "5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b9004b706bcf0c71f8bf23d273ff3b70069ae72"}, {"sha": "ccbd56c3332f211247c613ba45d4e62610069aa7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ccbd56c3332f211247c613ba45d4e62610069aa7", "html_url": "https://github.com/datamill-co/target-postgres/commit/ccbd56c3332f211247c613ba45d4e62610069aa7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ccbd56c3332f211247c613ba45d4e62610069aa7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:11:21.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:17:08.000000Z"}, "message": "Feature: Handle duplicate column name", "tree": {"sha": "9b24d56fd92fc242f34d2d68bd06e06944fda8a9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9b24d56fd92fc242f34d2d68bd06e06944fda8a9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ccbd56c3332f211247c613ba45d4e62610069aa7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ccbd56c3332f211247c613ba45d4e62610069aa7", "html_url": "https://github.com/datamill-co/target-postgres/commit/ccbd56c3332f211247c613ba45d4e62610069aa7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ccbd56c3332f211247c613ba45d4e62610069aa7/comments", "parents": [{"sha": "b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "html_url": "https://github.com/datamill-co/target-postgres/commit/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:11:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:17:08.000000Z"}, "message": "Fail: Duplicate column name", "tree": {"sha": "b34f4024c61c27f89363fb86cbb53342145143fd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b34f4024c61c27f89363fb86cbb53342145143fd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "html_url": "https://github.com/datamill-co/target-postgres/commit/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b4a8642d5a99ff25b2ffaa810d55e71ad6ab9dfc/comments", "parents": [{"sha": "76ceb278e53971ba527756c6685ea6e1a556129b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76ceb278e53971ba527756c6685ea6e1a556129b", "html_url": "https://github.com/datamill-co/target-postgres/commit/76ceb278e53971ba527756c6685ea6e1a556129b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "76ceb278e53971ba527756c6685ea6e1a556129b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T03:37:06.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:17:08.000000Z"}, "message": "Refactor: _get_mapping, use inversion of dict", "tree": {"sha": "463af337b352a16fbaa45596aa5ba129b4d15ec2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/463af337b352a16fbaa45596aa5ba129b4d15ec2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/76ceb278e53971ba527756c6685ea6e1a556129b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76ceb278e53971ba527756c6685ea6e1a556129b", "html_url": "https://github.com/datamill-co/target-postgres/commit/76ceb278e53971ba527756c6685ea6e1a556129b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/76ceb278e53971ba527756c6685ea6e1a556129b/comments", "parents": [{"sha": "ff7efb16127a62dd9cec6136bf5282151d73463f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff7efb16127a62dd9cec6136bf5282151d73463f", "html_url": "https://github.com/datamill-co/target-postgres/commit/ff7efb16127a62dd9cec6136bf5282151d73463f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3ab353962e5fcdf0fc85adec733273367b36c307", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T17:59:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:10:45.000000Z"}, "message": "Feature: init DECISIONS.md", "tree": {"sha": "087731183ad8d6b43f3ec76a236d49519fb09c73", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/087731183ad8d6b43f3ec76a236d49519fb09c73"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3ab353962e5fcdf0fc85adec733273367b36c307", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ab353962e5fcdf0fc85adec733273367b36c307", "html_url": "https://github.com/datamill-co/target-postgres/commit/3ab353962e5fcdf0fc85adec733273367b36c307", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ab353962e5fcdf0fc85adec733273367b36c307/comments", "parents": [{"sha": "0d229178752e5d2c1f5b36c44678b904e95986fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0d229178752e5d2c1f5b36c44678b904e95986fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/0d229178752e5d2c1f5b36c44678b904e95986fa"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:04:23.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T19:04:23.000000Z"}, "message": "Merge pull request #53 from AlexanderMann/feature/column-name-normalization--length\n\nFeature/column name normalization  length", "tree": {"sha": "aa44f65bb5e7c6a5ce15e2772e3929420a9d1a74", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/aa44f65bb5e7c6a5ce15e2772e3929420a9d1a74"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b9004b706bcf0c71f8bf23d273ff3b70069ae72", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b9004b706bcf0c71f8bf23d273ff3b70069ae72/comments", "parents": [{"sha": "75620e0034e9c4abe4474f7673573df33cfb74b9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75620e0034e9c4abe4474f7673573df33cfb74b9", "html_url": "https://github.com/datamill-co/target-postgres/commit/75620e0034e9c4abe4474f7673573df33cfb74b9"}, {"sha": "5735a66be7a389c4eaf71ab9431f6087862fb80e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5735a66be7a389c4eaf71ab9431f6087862fb80e", "html_url": "https://github.com/datamill-co/target-postgres/commit/5735a66be7a389c4eaf71ab9431f6087862fb80e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "75620e0034e9c4abe4474f7673573df33cfb74b9", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-12-04T19:04:03.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T19:04:03.000000Z"}, "message": "Merge pull request #48 from AlexanderMann/refactor/sql-base-merge-schemas\n\nRefactor/sql base merge schemas", "tree": {"sha": "75687ebf9de3ab37d9f2d49098205a38e82dfeb5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/75687ebf9de3ab37d9f2d49098205a38e82dfeb5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/75620e0034e9c4abe4474f7673573df33cfb74b9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75620e0034e9c4abe4474f7673573df33cfb74b9", "html_url": "https://github.com/datamill-co/target-postgres/commit/75620e0034e9c4abe4474f7673573df33cfb74b9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/75620e0034e9c4abe4474f7673573df33cfb74b9/comments", "parents": [{"sha": "480f027a5edd64d133471ec20891546cc54b576a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480f027a5edd64d133471ec20891546cc54b576a", "html_url": "https://github.com/datamill-co/target-postgres/commit/480f027a5edd64d133471ec20891546cc54b576a"}, {"sha": "c4166199111158bc1cce75da4c6256b6183ccf2c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4166199111158bc1cce75da4c6256b6183ccf2c", "html_url": "https://github.com/datamill-co/target-postgres/commit/c4166199111158bc1cce75da4c6256b6183ccf2c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ff7efb16127a62dd9cec6136bf5282151d73463f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T00:11:17.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:08:04.000000Z"}, "message": "Housekeeping: stricter column canonicalization test", "tree": {"sha": "6e70552b88e4d89389aa687879dd5535721a785f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6e70552b88e4d89389aa687879dd5535721a785f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ff7efb16127a62dd9cec6136bf5282151d73463f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff7efb16127a62dd9cec6136bf5282151d73463f", "html_url": "https://github.com/datamill-co/target-postgres/commit/ff7efb16127a62dd9cec6136bf5282151d73463f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ff7efb16127a62dd9cec6136bf5282151d73463f/comments", "parents": [{"sha": "916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "html_url": "https://github.com/datamill-co/target-postgres/commit/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5735a66be7a389c4eaf71ab9431f6087862fb80e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-03T23:50:45.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:08:04.000000Z"}, "message": "Refactor: Auto-format postgres.py", "tree": {"sha": "aa44f65bb5e7c6a5ce15e2772e3929420a9d1a74", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/aa44f65bb5e7c6a5ce15e2772e3929420a9d1a74"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5735a66be7a389c4eaf71ab9431f6087862fb80e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5735a66be7a389c4eaf71ab9431f6087862fb80e", "html_url": "https://github.com/datamill-co/target-postgres/commit/5735a66be7a389c4eaf71ab9431f6087862fb80e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5735a66be7a389c4eaf71ab9431f6087862fb80e/comments", "parents": [{"sha": "f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "html_url": "https://github.com/datamill-co/target-postgres/commit/f5eb38641258b8e72c1f94f5cb44ac7319810b3b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T00:06:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:08:04.000000Z"}, "message": "Refactor: get_columns_sql to assert_columns_equal", "tree": {"sha": "7bb9e44e65c0c0e675c81def3401f76d769097f2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7bb9e44e65c0c0e675c81def3401f76d769097f2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "html_url": "https://github.com/datamill-co/target-postgres/commit/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/916bc7d82ddfc527c0e9f4f8810e0fd90b11b38b/comments", "parents": [{"sha": "5735a66be7a389c4eaf71ab9431f6087862fb80e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5735a66be7a389c4eaf71ab9431f6087862fb80e", "html_url": "https://github.com/datamill-co/target-postgres/commit/5735a66be7a389c4eaf71ab9431f6087862fb80e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-03T23:50:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:08:04.000000Z"}, "message": "Feature: Truncate first canonicalized identifier", "tree": {"sha": "10d33fe41d956dee31d21e5b863b3bc5c4830742", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/10d33fe41d956dee31d21e5b863b3bc5c4830742"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "html_url": "https://github.com/datamill-co/target-postgres/commit/f5eb38641258b8e72c1f94f5cb44ac7319810b3b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5eb38641258b8e72c1f94f5cb44ac7319810b3b/comments", "parents": [{"sha": "3b027fbda65ffacfca6276683ab74fc66da91d52", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b027fbda65ffacfca6276683ab74fc66da91d52", "html_url": "https://github.com/datamill-co/target-postgres/commit/3b027fbda65ffacfca6276683ab74fc66da91d52"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3b027fbda65ffacfca6276683ab74fc66da91d52", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-03T23:32:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-12-04T05:08:04.000000Z"}, "message": "Fail: Column name length", "tree": {"sha": "3ac19bb9419a5785492b6338a68243a24c33bb6a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3ac19bb9419a5785492b6338a68243a24c33bb6a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3b027fbda65ffacfca6276683ab74fc66da91d52", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b027fbda65ffacfca6276683ab74fc66da91d52", "html_url": "https://github.com/datamill-co/target-postgres/commit/3b027fbda65ffacfca6276683ab74fc66da91d52", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3b027fbda65ffacfca6276683ab74fc66da91d52/comments", "parents": [{"sha": "c4166199111158bc1cce75da4c6256b6183ccf2c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4166199111158bc1cce75da4c6256b6183ccf2c", "html_url": "https://github.com/datamill-co/target-postgres/commit/c4166199111158bc1cce75da4c6256b6183ccf2c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:12.950560Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "480f027a5edd64d133471ec20891546cc54b576a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:07:03.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-30T21:07:03.000000Z"}, "message": "Merge pull request #46 from AlexanderMann/feature/detect-invalid-identifier-names\n\nFeature/invalid identifier names", "tree": {"sha": "1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/480f027a5edd64d133471ec20891546cc54b576a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480f027a5edd64d133471ec20891546cc54b576a", "html_url": "https://github.com/datamill-co/target-postgres/commit/480f027a5edd64d133471ec20891546cc54b576a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480f027a5edd64d133471ec20891546cc54b576a/comments", "parents": [{"sha": "5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "html_url": "https://github.com/datamill-co/target-postgres/commit/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588"}, {"sha": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df01de5b604192c080d9d8d8b4a23a2ba1212359", "html_url": "https://github.com/datamill-co/target-postgres/commit/df01de5b604192c080d9d8d8b4a23a2ba1212359"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c4166199111158bc1cce75da4c6256b6183ccf2c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T20:01:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Docs: Naming and docstrings\n\nUpdate naming and docstrings.", "tree": {"sha": "75687ebf9de3ab37d9f2d49098205a38e82dfeb5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/75687ebf9de3ab37d9f2d49098205a38e82dfeb5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c4166199111158bc1cce75da4c6256b6183ccf2c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4166199111158bc1cce75da4c6256b6183ccf2c", "html_url": "https://github.com/datamill-co/target-postgres/commit/c4166199111158bc1cce75da4c6256b6183ccf2c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c4166199111158bc1cce75da4c6256b6183ccf2c/comments", "parents": [{"sha": "e700450406fba0197a1a13ff7cf49425ff02ee86", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e700450406fba0197a1a13ff7cf49425ff02ee86", "html_url": "https://github.com/datamill-co/target-postgres/commit/e700450406fba0197a1a13ff7cf49425ff02ee86"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e700450406fba0197a1a13ff7cf49425ff02ee86", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T19:43:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Refactor: `add_column`\n\nConsume complexity of logic in `add_column` into `upsert_table_helper` to make calling implementation simpler. Goal of \u201csql statement\u201d only logic.", "tree": {"sha": "1494604b1718fb1bc4184d57e1ed2b409825e9df", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1494604b1718fb1bc4184d57e1ed2b409825e9df"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e700450406fba0197a1a13ff7cf49425ff02ee86", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e700450406fba0197a1a13ff7cf49425ff02ee86", "html_url": "https://github.com/datamill-co/target-postgres/commit/e700450406fba0197a1a13ff7cf49425ff02ee86", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e700450406fba0197a1a13ff7cf49425ff02ee86/comments", "parents": [{"sha": "9774d5277b28baf322b67861611b6ca0d08b7605", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9774d5277b28baf322b67861611b6ca0d08b7605", "html_url": "https://github.com/datamill-co/target-postgres/commit/9774d5277b28baf322b67861611b6ca0d08b7605"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "9774d5277b28baf322b67861611b6ca0d08b7605", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T19:39:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Refactor: Remove args required for `upsert_table..\n\nSimplify api for using `upsert_table_helper`", "tree": {"sha": "594dd2f6317f12c7ef6a37026d19364741849823", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/594dd2f6317f12c7ef6a37026d19364741849823"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/9774d5277b28baf322b67861611b6ca0d08b7605", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9774d5277b28baf322b67861611b6ca0d08b7605", "html_url": "https://github.com/datamill-co/target-postgres/commit/9774d5277b28baf322b67861611b6ca0d08b7605", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9774d5277b28baf322b67861611b6ca0d08b7605/comments", "parents": [{"sha": "7de8eef2df2b515b2d0dcd190180602dd6737891", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7de8eef2df2b515b2d0dcd190180602dd6737891", "html_url": "https://github.com/datamill-co/target-postgres/commit/7de8eef2df2b515b2d0dcd190180602dd6737891"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7de8eef2df2b515b2d0dcd190180602dd6737891", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T19:33:39.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Refactor: remove `serialize_table_record_field_name`", "tree": {"sha": "224e9c766debb8407d8fdae652723098ad60001d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/224e9c766debb8407d8fdae652723098ad60001d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7de8eef2df2b515b2d0dcd190180602dd6737891", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7de8eef2df2b515b2d0dcd190180602dd6737891", "html_url": "https://github.com/datamill-co/target-postgres/commit/7de8eef2df2b515b2d0dcd190180602dd6737891", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7de8eef2df2b515b2d0dcd190180602dd6737891/comments", "parents": [{"sha": "fbc72663c910fa6bc13ddc0aab63642ffda4565f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fbc72663c910fa6bc13ddc0aab63642ffda4565f", "html_url": "https://github.com/datamill-co/target-postgres/commit/fbc72663c910fa6bc13ddc0aab63642ffda4565f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fbc72663c910fa6bc13ddc0aab63642ffda4565f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T19:23:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Refactor: rename functions in `postgres`\n\nRenamed functions in `postgres` to closer match format adopted in SQL Base. The goal here is to make it such that changes in `postgres` are cognitively simpler.", "tree": {"sha": "50d62891f09e80139cbfd6088fbf3a90d0c4d632", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/50d62891f09e80139cbfd6088fbf3a90d0c4d632"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fbc72663c910fa6bc13ddc0aab63642ffda4565f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fbc72663c910fa6bc13ddc0aab63642ffda4565f", "html_url": "https://github.com/datamill-co/target-postgres/commit/fbc72663c910fa6bc13ddc0aab63642ffda4565f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fbc72663c910fa6bc13ddc0aab63642ffda4565f/comments", "parents": [{"sha": "5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "html_url": "https://github.com/datamill-co/target-postgres/commit/5dcb80d354d363f2038b6d5847e3cb458bc2eadd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:30:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T21:06:27.000000Z"}, "message": "Refactor: Merge Schema Logic to SQL Base\n\nMove all complicated schema merging logic to SQL Base. Aim to make interface for implementing class as simple as a handful of SQL statements.", "tree": {"sha": "4ce3d9887513fa710fdbb1f8477fcf0caad15661", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4ce3d9887513fa710fdbb1f8477fcf0caad15661"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "html_url": "https://github.com/datamill-co/target-postgres/commit/5dcb80d354d363f2038b6d5847e3cb458bc2eadd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5dcb80d354d363f2038b6d5847e3cb458bc2eadd/comments", "parents": [{"sha": "a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "html_url": "https://github.com/datamill-co/target-postgres/commit/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "df01de5b604192c080d9d8d8b4a23a2ba1212359", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-30T20:13:56.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-30T20:13:56.000000Z"}, "message": "Merge pull request #22 from AlexanderMann/fix/table-name-validation-detection\n\nFix/table name validation detection", "tree": {"sha": "1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/df01de5b604192c080d9d8d8b4a23a2ba1212359", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df01de5b604192c080d9d8d8b4a23a2ba1212359", "html_url": "https://github.com/datamill-co/target-postgres/commit/df01de5b604192c080d9d8d8b4a23a2ba1212359", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/df01de5b604192c080d9d8d8b4a23a2ba1212359/comments", "parents": [{"sha": "afadfc535afd5a84f0801b69117c1dd8944f25f0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/afadfc535afd5a84f0801b69117c1dd8944f25f0", "html_url": "https://github.com/datamill-co/target-postgres/commit/afadfc535afd5a84f0801b69117c1dd8944f25f0"}, {"sha": "a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "html_url": "https://github.com/datamill-co/target-postgres/commit/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T18:10:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T18:10:08.000000Z"}, "message": "Fix: tmp table name length", "tree": {"sha": "1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1b1cb92337dfc7f7579bf6ce4d7c5a1076a21a8a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "html_url": "https://github.com/datamill-co/target-postgres/commit/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a0b9e1ad254ac3b1c56e5334908c9e9caeca552e/comments", "parents": [{"sha": "9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "html_url": "https://github.com/datamill-co/target-postgres/commit/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:52:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:52:38.000000Z"}, "message": "Fail: Column name length invalid for generated tables", "tree": {"sha": "1cb87e239e798773dd0834f5886e99c3e2c31e6a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1cb87e239e798773dd0834f5886e99c3e2c31e6a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "html_url": "https://github.com/datamill-co/target-postgres/commit/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9ac19ee83ca2c8449c1c9551bbf098db44ec4b73/comments", "parents": [{"sha": "afadfc535afd5a84f0801b69117c1dd8944f25f0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/afadfc535afd5a84f0801b69117c1dd8944f25f0", "html_url": "https://github.com/datamill-co/target-postgres/commit/afadfc535afd5a84f0801b69117c1dd8944f25f0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "afadfc535afd5a84f0801b69117c1dd8944f25f0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:03:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:03:47.000000Z"}, "message": "Feature: Column add exception chaining", "tree": {"sha": "e245ed25f0839ef4654d311fdae4c001a22e22ed", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e245ed25f0839ef4654d311fdae4c001a22e22ed"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/afadfc535afd5a84f0801b69117c1dd8944f25f0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/afadfc535afd5a84f0801b69117c1dd8944f25f0", "html_url": "https://github.com/datamill-co/target-postgres/commit/afadfc535afd5a84f0801b69117c1dd8944f25f0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/afadfc535afd5a84f0801b69117c1dd8944f25f0/comments", "parents": [{"sha": "4151ebb1e6c02178971646e2897ea2654575a15d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4151ebb1e6c02178971646e2897ea2654575a15d", "html_url": "https://github.com/datamill-co/target-postgres/commit/4151ebb1e6c02178971646e2897ea2654575a15d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4151ebb1e6c02178971646e2897ea2654575a15d", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:01:20.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-30T17:01:20.000000Z"}, "message": "README: identifiers -> names", "tree": {"sha": "b61d0ab2a945c7a6ced5f9ca24d7888b7e3349cb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b61d0ab2a945c7a6ced5f9ca24d7888b7e3349cb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4151ebb1e6c02178971646e2897ea2654575a15d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4151ebb1e6c02178971646e2897ea2654575a15d", "html_url": "https://github.com/datamill-co/target-postgres/commit/4151ebb1e6c02178971646e2897ea2654575a15d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4151ebb1e6c02178971646e2897ea2654575a15d/comments", "parents": [{"sha": "49de4ecf01e443153ed7b32bac0a5df5277baa0d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49de4ecf01e443153ed7b32bac0a5df5277baa0d", "html_url": "https://github.com/datamill-co/target-postgres/commit/49de4ecf01e443153ed7b32bac0a5df5277baa0d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "49de4ecf01e443153ed7b32bac0a5df5277baa0d", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-30T16:52:28.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-30T16:52:28.000000Z"}, "message": "Merge pull request #21 from AlexanderMann/fix/split-columns-over-more-than-two-types\n\nFail: More than two types for a column", "tree": {"sha": "0c2728b83708191b6141797e6da2d02c03136c67", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/0c2728b83708191b6141797e6da2d02c03136c67"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/49de4ecf01e443153ed7b32bac0a5df5277baa0d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49de4ecf01e443153ed7b32bac0a5df5277baa0d", "html_url": "https://github.com/datamill-co/target-postgres/commit/49de4ecf01e443153ed7b32bac0a5df5277baa0d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49de4ecf01e443153ed7b32bac0a5df5277baa0d/comments", "parents": [{"sha": "bfe4c2341b231ac942050342d6852d46425fe3e0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bfe4c2341b231ac942050342d6852d46425fe3e0", "html_url": "https://github.com/datamill-co/target-postgres/commit/bfe4c2341b231ac942050342d6852d46425fe3e0"}, {"sha": "6e237fc15f406d6da40b3a2f0750637792023964", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e237fc15f406d6da40b3a2f0750637792023964", "html_url": "https://github.com/datamill-co/target-postgres/commit/6e237fc15f406d6da40b3a2f0750637792023964"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6e237fc15f406d6da40b3a2f0750637792023964", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T23:29:10.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T23:31:32.000000Z"}, "message": "Fix: Canonicalized Columns, Multi Types", "tree": {"sha": "0c2728b83708191b6141797e6da2d02c03136c67", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/0c2728b83708191b6141797e6da2d02c03136c67"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6e237fc15f406d6da40b3a2f0750637792023964", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e237fc15f406d6da40b3a2f0750637792023964", "html_url": "https://github.com/datamill-co/target-postgres/commit/6e237fc15f406d6da40b3a2f0750637792023964", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6e237fc15f406d6da40b3a2f0750637792023964/comments", "parents": [{"sha": "de8add029f5667e68f40c8d50601cf9811562549", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/de8add029f5667e68f40c8d50601cf9811562549", "html_url": "https://github.com/datamill-co/target-postgres/commit/de8add029f5667e68f40c8d50601cf9811562549"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "de8add029f5667e68f40c8d50601cf9811562549", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T21:53:44.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T23:31:32.000000Z"}, "message": "Fix: Valid name, multi type split", "tree": {"sha": "aa6687152efbe48e218beca2b2cda38b6a7262b3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/aa6687152efbe48e218beca2b2cda38b6a7262b3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/de8add029f5667e68f40c8d50601cf9811562549", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/de8add029f5667e68f40c8d50601cf9811562549", "html_url": "https://github.com/datamill-co/target-postgres/commit/de8add029f5667e68f40c8d50601cf9811562549", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/de8add029f5667e68f40c8d50601cf9811562549/comments", "parents": [{"sha": "0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "html_url": "https://github.com/datamill-co/target-postgres/commit/0f35bd2bf7ef43d790dd1621c95133cd678dcd40"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T21:25:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T23:31:32.000000Z"}, "message": "Refactor: Consolidate column adding logic", "tree": {"sha": "c682931814b155f1b51a088c3f733d3d61046753", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c682931814b155f1b51a088c3f733d3d61046753"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "html_url": "https://github.com/datamill-co/target-postgres/commit/0f35bd2bf7ef43d790dd1621c95133cd678dcd40", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f35bd2bf7ef43d790dd1621c95133cd678dcd40/comments", "parents": [{"sha": "b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "html_url": "https://github.com/datamill-co/target-postgres/commit/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T15:12:47.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-28T23:31:32.000000Z"}, "message": "Fail: More than two types for a column", "tree": {"sha": "a6763b2414f34b6c7c5e5684cdf9b4cdb6bbe5dc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a6763b2414f34b6c7c5e5684cdf9b4cdb6bbe5dc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "html_url": "https://github.com/datamill-co/target-postgres/commit/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b3a34c94f8e0f5dfb5130ecc8f95814f46407fdc/comments", "parents": [{"sha": "bfe4c2341b231ac942050342d6852d46425fe3e0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bfe4c2341b231ac942050342d6852d46425fe3e0", "html_url": "https://github.com/datamill-co/target-postgres/commit/bfe4c2341b231ac942050342d6852d46425fe3e0"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bfe4c2341b231ac942050342d6852d46425fe3e0", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:24:05.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:24:05.000000Z"}, "message": "README: Update identifier resatrictions", "tree": {"sha": "6609e2feb26156d855b9dd4597197cefd39495ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6609e2feb26156d855b9dd4597197cefd39495ea"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bfe4c2341b231ac942050342d6852d46425fe3e0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bfe4c2341b231ac942050342d6852d46425fe3e0", "html_url": "https://github.com/datamill-co/target-postgres/commit/bfe4c2341b231ac942050342d6852d46425fe3e0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bfe4c2341b231ac942050342d6852d46425fe3e0/comments", "parents": [{"sha": "dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "html_url": "https://github.com/datamill-co/target-postgres/commit/dc5f756b7ea333c234ec106121a5ee3ed1c97b35"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:12:39.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:22:21.000000Z"}, "message": "Feature: Invalid names: Split types", "tree": {"sha": "73840529ae7902638568be8158e5011e3a861b7a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/73840529ae7902638568be8158e5011e3a861b7a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "html_url": "https://github.com/datamill-co/target-postgres/commit/dc5f756b7ea333c234ec106121a5ee3ed1c97b35", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/dc5f756b7ea333c234ec106121a5ee3ed1c97b35/comments", "parents": [{"sha": "2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:12:21.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:22:21.000000Z"}, "message": "Fail: Invalid names: Split types", "tree": {"sha": "7e3ca454488469b2aab6efcb34567b9391b8988c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7e3ca454488469b2aab6efcb34567b9391b8988c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e3c04c159dd800d7e0635dd6ee3afce1a474ae3/comments", "parents": [{"sha": "5abe9d5e40c01685300e4af05b89f5024bd74b2c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5abe9d5e40c01685300e4af05b89f5024bd74b2c", "html_url": "https://github.com/datamill-co/target-postgres/commit/5abe9d5e40c01685300e4af05b89f5024bd74b2c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5abe9d5e40c01685300e4af05b89f5024bd74b2c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T22:07:09.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:22:21.000000Z"}, "message": "Feature: Canonicalize invalid column names", "tree": {"sha": "9893b28deab648b89c7d1862deef736f0fd8302e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9893b28deab648b89c7d1862deef736f0fd8302e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5abe9d5e40c01685300e4af05b89f5024bd74b2c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5abe9d5e40c01685300e4af05b89f5024bd74b2c", "html_url": "https://github.com/datamill-co/target-postgres/commit/5abe9d5e40c01685300e4af05b89f5024bd74b2c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5abe9d5e40c01685300e4af05b89f5024bd74b2c/comments", "parents": [{"sha": "26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "html_url": "https://github.com/datamill-co/target-postgres/commit/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T22:06:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T23:22:21.000000Z"}, "message": "Fail: Invalid names: Canonicalization\n\nFail on invalid identifier names which _could_ be canonicalized.", "tree": {"sha": "5f71f4b17bbe824b027e54b0edf563c3159fd1f8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5f71f4b17bbe824b027e54b0edf563c3159fd1f8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "html_url": "https://github.com/datamill-co/target-postgres/commit/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/26b7a04af3613f4f230eed1bc4a8d1e6f897fb13/comments", "parents": [{"sha": "4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T21:09:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T21:09:25.000000Z"}, "message": "README: Update for latest known limitations", "tree": {"sha": "b1d89432801d1281d9adcce2c519907409232765", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b1d89432801d1281d9adcce2c519907409232765"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d9c55dcc1cbd3efb417cf8d8a28b312c5b2f44f/comments", "parents": [{"sha": "03e654445e9e4c96ab9ee8d50b00329184592440", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e654445e9e4c96ab9ee8d50b00329184592440", "html_url": "https://github.com/datamill-co/target-postgres/commit/03e654445e9e4c96ab9ee8d50b00329184592440"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "03e654445e9e4c96ab9ee8d50b00329184592440", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T20:23:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T20:23:43.000000Z"}, "message": "Feature: Identifier name validity detection", "tree": {"sha": "2d0cf9404b2a87f9e7203357024891900e6e1ba8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2d0cf9404b2a87f9e7203357024891900e6e1ba8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/03e654445e9e4c96ab9ee8d50b00329184592440", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e654445e9e4c96ab9ee8d50b00329184592440", "html_url": "https://github.com/datamill-co/target-postgres/commit/03e654445e9e4c96ab9ee8d50b00329184592440", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e654445e9e4c96ab9ee8d50b00329184592440/comments", "parents": [{"sha": "e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "html_url": "https://github.com/datamill-co/target-postgres/commit/e80d94ad7c2c69e8b7c8129aeda02f086c115e41"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T20:22:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T20:22:55.000000Z"}, "message": "Fail: Identifier name validity", "tree": {"sha": "3dbf2291129101a5f442dcdb35eaa998fd977cfb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3dbf2291129101a5f442dcdb35eaa998fd977cfb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "html_url": "https://github.com/datamill-co/target-postgres/commit/e80d94ad7c2c69e8b7c8129aeda02f086c115e41", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e80d94ad7c2c69e8b7c8129aeda02f086c115e41/comments", "parents": [{"sha": "0d229178752e5d2c1f5b36c44678b904e95986fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0d229178752e5d2c1f5b36c44678b904e95986fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/0d229178752e5d2c1f5b36c44678b904e95986fa"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0d229178752e5d2c1f5b36c44678b904e95986fa", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-27T19:15:24.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-27T19:15:24.000000Z"}, "message": "Merge pull request #20 from datamill-co/master\n\nBump fork.", "tree": {"sha": "62943246e944d1e07197c5c41db8e06363266e2a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/62943246e944d1e07197c5c41db8e06363266e2a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0d229178752e5d2c1f5b36c44678b904e95986fa", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0d229178752e5d2c1f5b36c44678b904e95986fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/0d229178752e5d2c1f5b36c44678b904e95986fa", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0d229178752e5d2c1f5b36c44678b904e95986fa/comments", "parents": [{"sha": "88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "html_url": "https://github.com/datamill-co/target-postgres/commit/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6"}, {"sha": "5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "html_url": "https://github.com/datamill-co/target-postgres/commit/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-27T19:14:37.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-27T19:14:37.000000Z"}, "message": "Merge pull request #43 from AlexanderMann/refactor/sql-persist\n\nRefactor/sql persist", "tree": {"sha": "62943246e944d1e07197c5c41db8e06363266e2a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/62943246e944d1e07197c5c41db8e06363266e2a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "html_url": "https://github.com/datamill-co/target-postgres/commit/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5f0e26c43144e8b0934dd94bc9a9b8aefacf0588/comments", "parents": [{"sha": "669b8be93fb274bb109381855e325ccd567a828f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/669b8be93fb274bb109381855e325ccd567a828f", "html_url": "https://github.com/datamill-co/target-postgres/commit/669b8be93fb274bb109381855e325ccd567a828f"}, {"sha": "7d5794beb399bd0da0e06e6849db2f440fc32558", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d5794beb399bd0da0e06e6849db2f440fc32558", "html_url": "https://github.com/datamill-co/target-postgres/commit/7d5794beb399bd0da0e06e6849db2f440fc32558"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7d5794beb399bd0da0e06e6849db2f440fc32558", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T17:12:58.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T17:16:26.000000Z"}, "message": "Refactor: SQLInterface - Private vs Helper\n\nReduce the number of necessary functions to be overwritten by implementing class.\n\nIntroduces the concept of:\n- private functions : `_\u2026` prefix\n  - to be left alone by implementing class\n- helper functions : `\u2026_helper` prefix\n  - to be used by implementing class inside of the non helper version of the function\n- overridable functions : All other functions", "tree": {"sha": "62943246e944d1e07197c5c41db8e06363266e2a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/62943246e944d1e07197c5c41db8e06363266e2a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7d5794beb399bd0da0e06e6849db2f440fc32558", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d5794beb399bd0da0e06e6849db2f440fc32558", "html_url": "https://github.com/datamill-co/target-postgres/commit/7d5794beb399bd0da0e06e6849db2f440fc32558", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d5794beb399bd0da0e06e6849db2f440fc32558/comments", "parents": [{"sha": "f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "html_url": "https://github.com/datamill-co/target-postgres/commit/f3f903b7ff8a3f319a0dd33a3c87895c09116d80"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T15:55:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T17:16:26.000000Z"}, "message": "Housekeeping: Spelling mistakes", "tree": {"sha": "8e3aa847fd76879f260e73886358dcc34d66031f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8e3aa847fd76879f260e73886358dcc34d66031f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "html_url": "https://github.com/datamill-co/target-postgres/commit/f3f903b7ff8a3f319a0dd33a3c87895c09116d80", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3f903b7ff8a3f319a0dd33a3c87895c09116d80/comments", "parents": [{"sha": "89bc9d20040feb54ba65339ea46d7849696bc247", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89bc9d20040feb54ba65339ea46d7849696bc247", "html_url": "https://github.com/datamill-co/target-postgres/commit/89bc9d20040feb54ba65339ea46d7849696bc247"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "89bc9d20040feb54ba65339ea46d7849696bc247", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T14:02:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-27T14:02:26.000000Z"}, "message": "Refactor: parse_table_records_serialize_for_remote", "tree": {"sha": "c9a4a8a1deb03638fdb45b94df95b98ff5996285", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c9a4a8a1deb03638fdb45b94df95b98ff5996285"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/89bc9d20040feb54ba65339ea46d7849696bc247", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89bc9d20040feb54ba65339ea46d7849696bc247", "html_url": "https://github.com/datamill-co/target-postgres/commit/89bc9d20040feb54ba65339ea46d7849696bc247", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89bc9d20040feb54ba65339ea46d7849696bc247/comments", "parents": [{"sha": "5467c1d3556d2f34a8a647c18dfb14d8c822006b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5467c1d3556d2f34a8a647c18dfb14d8c822006b", "html_url": "https://github.com/datamill-co/target-postgres/commit/5467c1d3556d2f34a8a647c18dfb14d8c822006b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.078857Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5467c1d3556d2f34a8a647c18dfb14d8c822006b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:06:29.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:38.000000Z"}, "message": "Refactor: `sql_base` static fns\n\nMoves `_flatten_schema` into `parse_table_schemas` so that all static fns present in the namespace can be `_denest_\u2026` prefixed, etc.", "tree": {"sha": "3a24cdb5411e2cbec4e5650adeed370689d8bcd5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3a24cdb5411e2cbec4e5650adeed370689d8bcd5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5467c1d3556d2f34a8a647c18dfb14d8c822006b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5467c1d3556d2f34a8a647c18dfb14d8c822006b", "html_url": "https://github.com/datamill-co/target-postgres/commit/5467c1d3556d2f34a8a647c18dfb14d8c822006b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5467c1d3556d2f34a8a647c18dfb14d8c822006b/comments", "parents": [{"sha": "4a07e19d0dce8e82b633b4177869e0563ce93061", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a07e19d0dce8e82b633b4177869e0563ce93061", "html_url": "https://github.com/datamill-co/target-postgres/commit/4a07e19d0dce8e82b633b4177869e0563ce93061"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4a07e19d0dce8e82b633b4177869e0563ce93061", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:00:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:38.000000Z"}, "message": "Docs: `sql_base`", "tree": {"sha": "f416e132355e4c3d779c39b0d7e40fd172b897e8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f416e132355e4c3d779c39b0d7e40fd172b897e8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4a07e19d0dce8e82b633b4177869e0563ce93061", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a07e19d0dce8e82b633b4177869e0563ce93061", "html_url": "https://github.com/datamill-co/target-postgres/commit/4a07e19d0dce8e82b633b4177869e0563ce93061", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a07e19d0dce8e82b633b4177869e0563ce93061/comments", "parents": [{"sha": "00c979627f74f661faef9533dcbbb277d480390f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/00c979627f74f661faef9533dcbbb277d480390f", "html_url": "https://github.com/datamill-co/target-postgres/commit/00c979627f74f661faef9533dcbbb277d480390f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "00c979627f74f661faef9533dcbbb277d480390f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T22:44:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Refactor: Persist CSV Rows\n\nSplit `postgres` persistence into:\n- csv prep\n- sql update statement\n\nSplitting this function makes it simpler for other targets to override only _some_ of `postgres`\u2019s implementations.", "tree": {"sha": "92d3d90e24bdb0c2c06d569eee8a2b08040c64d8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/92d3d90e24bdb0c2c06d569eee8a2b08040c64d8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/00c979627f74f661faef9533dcbbb277d480390f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/00c979627f74f661faef9533dcbbb277d480390f", "html_url": "https://github.com/datamill-co/target-postgres/commit/00c979627f74f661faef9533dcbbb277d480390f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/00c979627f74f661faef9533dcbbb277d480390f/comments", "parents": [{"sha": "ac2ebc740283de976652a0f89461133d214fd756", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ac2ebc740283de976652a0f89461133d214fd756", "html_url": "https://github.com/datamill-co/target-postgres/commit/ac2ebc740283de976652a0f89461133d214fd756"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ac2ebc740283de976652a0f89461133d214fd756", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T22:44:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Housekeeping: Unused values, spellings\n\nRemove unused values, update some minor misspellings.", "tree": {"sha": "4f057ef9920fe4a3d1b0ee1d5065ec70606eb3f9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4f057ef9920fe4a3d1b0ee1d5065ec70606eb3f9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ac2ebc740283de976652a0f89461133d214fd756", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ac2ebc740283de976652a0f89461133d214fd756", "html_url": "https://github.com/datamill-co/target-postgres/commit/ac2ebc740283de976652a0f89461133d214fd756", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ac2ebc740283de976652a0f89461133d214fd756/comments", "parents": [{"sha": "64054c188b740f34a886d03125880de4f01d3848", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/64054c188b740f34a886d03125880de4f01d3848", "html_url": "https://github.com/datamill-co/target-postgres/commit/64054c188b740f34a886d03125880de4f01d3848"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "64054c188b740f34a886d03125880de4f01d3848", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T22:25:42.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Refactor: Write Table Batches\n\nImplements `SQLInterface.write_table_batches` which does:\n- update remote table schema\n- prep records for persistence to remote\n\nRefactors `postgres` to overwrite implemented based functions while also calling on them.", "tree": {"sha": "7539187dc41ed3bb1c0aea360f213011d5bb643d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7539187dc41ed3bb1c0aea360f213011d5bb643d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/64054c188b740f34a886d03125880de4f01d3848", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/64054c188b740f34a886d03125880de4f01d3848", "html_url": "https://github.com/datamill-co/target-postgres/commit/64054c188b740f34a886d03125880de4f01d3848", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/64054c188b740f34a886d03125880de4f01d3848/comments", "parents": [{"sha": "94b7350d11ca0aea7357111f165d6d395b993f83", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94b7350d11ca0aea7357111f165d6d395b993f83", "html_url": "https://github.com/datamill-co/target-postgres/commit/94b7350d11ca0aea7357111f165d6d395b993f83"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "94b7350d11ca0aea7357111f165d6d395b993f83", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T19:15:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Refactor: Writeable Batches\n\nRefactors `postgres` and `sql_base` such that simple functionality for persisting rows is moved into `sql_base`.\n\nThis is preparation for a more dramatic move later and only aims to place schema denesting and records denesting under the same function.", "tree": {"sha": "85e4a146d5786865d463bdfec118b79cd5ff044d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/85e4a146d5786865d463bdfec118b79cd5ff044d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/94b7350d11ca0aea7357111f165d6d395b993f83", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94b7350d11ca0aea7357111f165d6d395b993f83", "html_url": "https://github.com/datamill-co/target-postgres/commit/94b7350d11ca0aea7357111f165d6d395b993f83", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94b7350d11ca0aea7357111f165d6d395b993f83/comments", "parents": [{"sha": "222ee9e6144b736d8e91682b8344143a6207391f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/222ee9e6144b736d8e91682b8344143a6207391f", "html_url": "https://github.com/datamill-co/target-postgres/commit/222ee9e6144b736d8e91682b8344143a6207391f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "222ee9e6144b736d8e91682b8344143a6207391f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T18:22:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Refactor: Postgres Record Processing\n\nRemove intermediate records processing to simplify changes SQL Base needs to take on.", "tree": {"sha": "7f5e7fa7055915356fcfc13b254b4f7d657ecb99", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7f5e7fa7055915356fcfc13b254b4f7d657ecb99"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/222ee9e6144b736d8e91682b8344143a6207391f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/222ee9e6144b736d8e91682b8344143a6207391f", "html_url": "https://github.com/datamill-co/target-postgres/commit/222ee9e6144b736d8e91682b8344143a6207391f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/222ee9e6144b736d8e91682b8344143a6207391f/comments", "parents": [{"sha": "0862219379a761143c45df454c34eefe6d9d3181", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0862219379a761143c45df454c34eefe6d9d3181", "html_url": "https://github.com/datamill-co/target-postgres/commit/0862219379a761143c45df454c34eefe6d9d3181"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0862219379a761143c45df454c34eefe6d9d3181", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:55:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T23:16:37.000000Z"}, "message": "Docs: `sql_base`", "tree": {"sha": "f5d7515501472987d7d1e7a2826ce506918dc3c5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f5d7515501472987d7d1e7a2826ce506918dc3c5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0862219379a761143c45df454c34eefe6d9d3181", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0862219379a761143c45df454c34eefe6d9d3181", "html_url": "https://github.com/datamill-co/target-postgres/commit/0862219379a761143c45df454c34eefe6d9d3181", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0862219379a761143c45df454c34eefe6d9d3181/comments", "parents": [{"sha": "88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "html_url": "https://github.com/datamill-co/target-postgres/commit/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:31:38.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-26T15:31:38.000000Z"}, "message": "Merge pull request #19 from datamill-co/master\n\nBump fork.", "tree": {"sha": "54191614769bc4954af834c8a07e60c28e358bb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/54191614769bc4954af834c8a07e60c28e358bb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "html_url": "https://github.com/datamill-co/target-postgres/commit/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/88d7c7ee4ab6ce214ec66116a3e9ba9c1002cbc6/comments", "parents": [{"sha": "6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b"}, {"sha": "669b8be93fb274bb109381855e325ccd567a828f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/669b8be93fb274bb109381855e325ccd567a828f", "html_url": "https://github.com/datamill-co/target-postgres/commit/669b8be93fb274bb109381855e325ccd567a828f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "669b8be93fb274bb109381855e325ccd567a828f", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:28:43.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-26T15:28:43.000000Z"}, "message": "Merge pull request #41 from AlexanderMann/refactor/rbdms-base\n\nRefactor/rbdms base", "tree": {"sha": "54191614769bc4954af834c8a07e60c28e358bb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/54191614769bc4954af834c8a07e60c28e358bb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/669b8be93fb274bb109381855e325ccd567a828f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/669b8be93fb274bb109381855e325ccd567a828f", "html_url": "https://github.com/datamill-co/target-postgres/commit/669b8be93fb274bb109381855e325ccd567a828f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/669b8be93fb274bb109381855e325ccd567a828f/comments", "parents": [{"sha": "c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "html_url": "https://github.com/datamill-co/target-postgres/commit/c68a52008b7f32cf5510e4cdb42c0a35d04e393b"}, {"sha": "79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "html_url": "https://github.com/datamill-co/target-postgres/commit/79612e6fe9a4c5c7b299bae26c2eded32e4b3216"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:18:52.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:26:28.000000Z"}, "message": "Refactor: rename RDBMS -> SQL", "tree": {"sha": "54191614769bc4954af834c8a07e60c28e358bb2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/54191614769bc4954af834c8a07e60c28e358bb2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "html_url": "https://github.com/datamill-co/target-postgres/commit/79612e6fe9a4c5c7b299bae26c2eded32e4b3216", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79612e6fe9a4c5c7b299bae26c2eded32e4b3216/comments", "parents": [{"sha": "d10a92bb573868770bf91f8d9b26f81fab14460f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d10a92bb573868770bf91f8d9b26f81fab14460f", "html_url": "https://github.com/datamill-co/target-postgres/commit/d10a92bb573868770bf91f8d9b26f81fab14460f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d10a92bb573868770bf91f8d9b26f81fab14460f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:15:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-26T15:15:37.000000Z"}, "message": "Refactor: remove RDBMSNotImplementedError", "tree": {"sha": "c4c2d51e41656e54644f8b696c82af68f648b5d9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c4c2d51e41656e54644f8b696c82af68f648b5d9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d10a92bb573868770bf91f8d9b26f81fab14460f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d10a92bb573868770bf91f8d9b26f81fab14460f", "html_url": "https://github.com/datamill-co/target-postgres/commit/d10a92bb573868770bf91f8d9b26f81fab14460f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d10a92bb573868770bf91f8d9b26f81fab14460f/comments", "parents": [{"sha": "1819b549b87a8fd9de533a366fb1fea0b43b577b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1819b549b87a8fd9de533a366fb1fea0b43b577b", "html_url": "https://github.com/datamill-co/target-postgres/commit/1819b549b87a8fd9de533a366fb1fea0b43b577b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1819b549b87a8fd9de533a366fb1fea0b43b577b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T14:56:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: default separator in RDBMS base", "tree": {"sha": "451da0effa71b1c3ccba7a6d5cc4f1191f7b90dc", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/451da0effa71b1c3ccba7a6d5cc4f1191f7b90dc"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1819b549b87a8fd9de533a366fb1fea0b43b577b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1819b549b87a8fd9de533a366fb1fea0b43b577b", "html_url": "https://github.com/datamill-co/target-postgres/commit/1819b549b87a8fd9de533a366fb1fea0b43b577b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1819b549b87a8fd9de533a366fb1fea0b43b577b/comments", "parents": [{"sha": "0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "html_url": "https://github.com/datamill-co/target-postgres/commit/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T14:53:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Docs: Improve RDBMS base", "tree": {"sha": "dc75898a051ff15106f224bdcc12610300ff171e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/dc75898a051ff15106f224bdcc12610300ff171e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "html_url": "https://github.com/datamill-co/target-postgres/commit/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0f630ba2378e1bd51a58d4ef5842fccfa2bdd88c/comments", "parents": [{"sha": "f3ebab6e3c062b35a79834765fdf624b18b94ab1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3ebab6e3c062b35a79834765fdf624b18b94ab1", "html_url": "https://github.com/datamill-co/target-postgres/commit/f3ebab6e3c062b35a79834765fdf624b18b94ab1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f3ebab6e3c062b35a79834765fdf624b18b94ab1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T14:34:18.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: Use RDBMS update_schema\n\nImplement `update_schema` from RDBMSInterface in Postgres. Utilize the results.", "tree": {"sha": "fb85292f722436a1aaa6d56787b00104f373ed06", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/fb85292f722436a1aaa6d56787b00104f373ed06"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f3ebab6e3c062b35a79834765fdf624b18b94ab1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3ebab6e3c062b35a79834765fdf624b18b94ab1", "html_url": "https://github.com/datamill-co/target-postgres/commit/f3ebab6e3c062b35a79834765fdf624b18b94ab1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f3ebab6e3c062b35a79834765fdf624b18b94ab1/comments", "parents": [{"sha": "01bf6c7a12495a4798b9d75094a3af4fcc561911", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01bf6c7a12495a4798b9d75094a3af4fcc561911", "html_url": "https://github.com/datamill-co/target-postgres/commit/01bf6c7a12495a4798b9d75094a3af4fcc561911"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "01bf6c7a12495a4798b9d75094a3af4fcc561911", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T18:01:32.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: persist rows to all tables unambiguously", "tree": {"sha": "a7108808d234e4998c60ef30c9f5fee9e31083d9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a7108808d234e4998c60ef30c9f5fee9e31083d9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/01bf6c7a12495a4798b9d75094a3af4fcc561911", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01bf6c7a12495a4798b9d75094a3af4fcc561911", "html_url": "https://github.com/datamill-co/target-postgres/commit/01bf6c7a12495a4798b9d75094a3af4fcc561911", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/01bf6c7a12495a4798b9d75094a3af4fcc561911/comments", "parents": [{"sha": "d626061d7a0e785f06b19589e1951637f2748262", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d626061d7a0e785f06b19589e1951637f2748262", "html_url": "https://github.com/datamill-co/target-postgres/commit/d626061d7a0e785f06b19589e1951637f2748262"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d626061d7a0e785f06b19589e1951637f2748262", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T19:09:40.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Fix: JSON Schema make_nullable modifying values\n\nJSON Schema had a bug in `make_nullable` which was modifying the values passed into it. Since this module aims to be quite functional in nature (due to the static nature of it\u2019s transformations, and the low overhead of operations passed through it) this bug makes building on top of it difficult.", "tree": {"sha": "d419b2de446941c2741db40615b74715d40632f4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d419b2de446941c2741db40615b74715d40632f4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d626061d7a0e785f06b19589e1951637f2748262", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d626061d7a0e785f06b19589e1951637f2748262", "html_url": "https://github.com/datamill-co/target-postgres/commit/d626061d7a0e785f06b19589e1951637f2748262", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d626061d7a0e785f06b19589e1951637f2748262/comments", "parents": [{"sha": "05f13b2249e4302f18c6817a287042bee10175fe", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/05f13b2249e4302f18c6817a287042bee10175fe", "html_url": "https://github.com/datamill-co/target-postgres/commit/05f13b2249e4302f18c6817a287042bee10175fe"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "05f13b2249e4302f18c6817a287042bee10175fe", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T19:11:54.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: Use self.postgres_schema\n\n`table_schema` litters Postgres. This makes disambiguating just _which_ kind of schema not to mention _which_ schema one is talking about at any given time quite difficult.\n\nSince the _PSQL.schema_ cannot change per instantiation of `postgres_target`, remove all variable calls and instead rely upon the class\u2019s value.", "tree": {"sha": "971a0c43075532dff9ae1fb33db014442e730e07", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/971a0c43075532dff9ae1fb33db014442e730e07"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/05f13b2249e4302f18c6817a287042bee10175fe", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/05f13b2249e4302f18c6817a287042bee10175fe", "html_url": "https://github.com/datamill-co/target-postgres/commit/05f13b2249e4302f18c6817a287042bee10175fe", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/05f13b2249e4302f18c6817a287042bee10175fe/comments", "parents": [{"sha": "0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "html_url": "https://github.com/datamill-co/target-postgres/commit/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T17:53:58.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: use RDBMS parse_table_schemas\n\nTransforming the Streamed Schema into a sequence of TABLE_SCHEMAs is something which is quite static. Hence, we can start here for refactoring Postgres onto/into RDBMSInterface.\n\nThis commit starts moving the functionality present in Postgres for this transformation over to RDBMSInterface.", "tree": {"sha": "60708dc9a6fcbe21a55be0a129064e12d79dfcee", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/60708dc9a6fcbe21a55be0a129064e12d79dfcee"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "html_url": "https://github.com/datamill-co/target-postgres/commit/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/0c7997b9d9de799ebf6cdf0eb53b129120ce2d22/comments", "parents": [{"sha": "8c9d9ecdc25761689b6c929b48761e500611fb19", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8c9d9ecdc25761689b6c929b48761e500611fb19", "html_url": "https://github.com/datamill-co/target-postgres/commit/8c9d9ecdc25761689b6c929b48761e500611fb19"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8c9d9ecdc25761689b6c929b48761e500611fb19", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T17:22:09.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "Refactor: Hookup RDBMSInterface to Postgres\n\nMake Postgres inherit from RDBMSInterface and perform basic schema parsing without using any of the results.\n\nThis commit sets up future refactoring and feature work so that we can iterate on the base interface/class while pulling functionality over piecemeal.", "tree": {"sha": "2928e9b7d4d062afce2c6fbdaa0d13cc93ddfafb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2928e9b7d4d062afce2c6fbdaa0d13cc93ddfafb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8c9d9ecdc25761689b6c929b48761e500611fb19", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8c9d9ecdc25761689b6c929b48761e500611fb19", "html_url": "https://github.com/datamill-co/target-postgres/commit/8c9d9ecdc25761689b6c929b48761e500611fb19", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8c9d9ecdc25761689b6c929b48761e500611fb19/comments", "parents": [{"sha": "480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "html_url": "https://github.com/datamill-co/target-postgres/commit/480edd85673747e0b8ad7336cc452e1fe2fe9ec5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-20T14:11:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:39.000000Z"}, "message": "RDBMSInterface: init", "tree": {"sha": "363e709b3187c311cb31156801a361cc8197679b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/363e709b3187c311cb31156801a361cc8197679b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "html_url": "https://github.com/datamill-co/target-postgres/commit/480edd85673747e0b8ad7336cc452e1fe2fe9ec5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/480edd85673747e0b8ad7336cc452e1fe2fe9ec5/comments", "parents": [{"sha": "6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:45:14.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-21T16:45:14.000000Z"}, "message": "Merge pull request #18 from datamill-co/master\n\nBump fork.", "tree": {"sha": "a9292ce366ee79d66cf40c1477b4e942f91e3e0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a9292ce366ee79d66cf40c1477b4e942f91e3e0c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6457bd4a30451f1dc2d8bd1ebcdbca22ff4fa57b/comments", "parents": [{"sha": "1535cf72181f6450b33d6e6e142018a83784914b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1535cf72181f6450b33d6e6e142018a83784914b", "html_url": "https://github.com/datamill-co/target-postgres/commit/1535cf72181f6450b33d6e6e142018a83784914b"}, {"sha": "c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "html_url": "https://github.com/datamill-co/target-postgres/commit/c68a52008b7f32cf5510e4cdb42c0a35d04e393b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:43:52.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-21T16:43:52.000000Z"}, "message": "Merge pull request #40 from AlexanderMann/feature/pk-type-change-detection\n\nFeature/pk type change detection", "tree": {"sha": "a9292ce366ee79d66cf40c1477b4e942f91e3e0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a9292ce366ee79d66cf40c1477b4e942f91e3e0c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "html_url": "https://github.com/datamill-co/target-postgres/commit/c68a52008b7f32cf5510e4cdb42c0a35d04e393b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c68a52008b7f32cf5510e4cdb42c0a35d04e393b/comments", "parents": [{"sha": "79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "html_url": "https://github.com/datamill-co/target-postgres/commit/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da"}, {"sha": "89825a7f7314850f65e801b73e5c411ba6924981", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89825a7f7314850f65e801b73e5c411ba6924981", "html_url": "https://github.com/datamill-co/target-postgres/commit/89825a7f7314850f65e801b73e5c411ba6924981"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "89825a7f7314850f65e801b73e5c411ba6924981", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T20:28:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:36:19.000000Z"}, "message": "Feature: Detect PK Type changes", "tree": {"sha": "a9292ce366ee79d66cf40c1477b4e942f91e3e0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a9292ce366ee79d66cf40c1477b4e942f91e3e0c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/89825a7f7314850f65e801b73e5c411ba6924981", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89825a7f7314850f65e801b73e5c411ba6924981", "html_url": "https://github.com/datamill-co/target-postgres/commit/89825a7f7314850f65e801b73e5c411ba6924981", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/89825a7f7314850f65e801b73e5c411ba6924981/comments", "parents": [{"sha": "f733e6b573c3bc1d6fad1de24ab978a746230b14", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f733e6b573c3bc1d6fad1de24ab978a746230b14", "html_url": "https://github.com/datamill-co/target-postgres/commit/f733e6b573c3bc1d6fad1de24ab978a746230b14"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f733e6b573c3bc1d6fad1de24ab978a746230b14", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:52:32.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:36:19.000000Z"}, "message": "Fail: PK Type change does not raise correct error", "tree": {"sha": "cb8917592c3f000bbaedf5fa16eba7b596cd8616", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cb8917592c3f000bbaedf5fa16eba7b596cd8616"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f733e6b573c3bc1d6fad1de24ab978a746230b14", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f733e6b573c3bc1d6fad1de24ab978a746230b14", "html_url": "https://github.com/datamill-co/target-postgres/commit/f733e6b573c3bc1d6fad1de24ab978a746230b14", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f733e6b573c3bc1d6fad1de24ab978a746230b14/comments", "parents": [{"sha": "1535cf72181f6450b33d6e6e142018a83784914b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1535cf72181f6450b33d6e6e142018a83784914b", "html_url": "https://github.com/datamill-co/target-postgres/commit/1535cf72181f6450b33d6e6e142018a83784914b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1535cf72181f6450b33d6e6e142018a83784914b", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:35:34.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-21T16:35:34.000000Z"}, "message": "Merge pull request #17 from datamill-co/master\n\nBump fork.", "tree": {"sha": "74e24a6773ccc8cdf93bbb51f6a61e7acf756f76", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/74e24a6773ccc8cdf93bbb51f6a61e7acf756f76"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1535cf72181f6450b33d6e6e142018a83784914b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1535cf72181f6450b33d6e6e142018a83784914b", "html_url": "https://github.com/datamill-co/target-postgres/commit/1535cf72181f6450b33d6e6e142018a83784914b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1535cf72181f6450b33d6e6e142018a83784914b/comments", "parents": [{"sha": "7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "html_url": "https://github.com/datamill-co/target-postgres/commit/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc"}, {"sha": "79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "html_url": "https://github.com/datamill-co/target-postgres/commit/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-21T16:34:47.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-21T16:34:47.000000Z"}, "message": "Merge pull request #39 from AlexanderMann/feature/nullable-column-handling\n\nFeature/nullable column handling", "tree": {"sha": "74e24a6773ccc8cdf93bbb51f6a61e7acf756f76", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/74e24a6773ccc8cdf93bbb51f6a61e7acf756f76"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "html_url": "https://github.com/datamill-co/target-postgres/commit/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/79d52f6e08ab73c13405ac1e6ba68b0ba70ad7da/comments", "parents": [{"sha": "49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "html_url": "https://github.com/datamill-co/target-postgres/commit/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f"}, {"sha": "43665229d6b0d582a970e476b28ab9c4d48b6847", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43665229d6b0d582a970e476b28ab9c4d48b6847", "html_url": "https://github.com/datamill-co/target-postgres/commit/43665229d6b0d582a970e476b28ab9c4d48b6847"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "43665229d6b0d582a970e476b28ab9c4d48b6847", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:34:52.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T22:14:54.000000Z"}, "message": "Feature: Nullable columns", "tree": {"sha": "74e24a6773ccc8cdf93bbb51f6a61e7acf756f76", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/74e24a6773ccc8cdf93bbb51f6a61e7acf756f76"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/43665229d6b0d582a970e476b28ab9c4d48b6847", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43665229d6b0d582a970e476b28ab9c4d48b6847", "html_url": "https://github.com/datamill-co/target-postgres/commit/43665229d6b0d582a970e476b28ab9c4d48b6847", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/43665229d6b0d582a970e476b28ab9c4d48b6847/comments", "parents": [{"sha": "51b4b9c356c4ce77e87a333a36904533c7dfc623", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51b4b9c356c4ce77e87a333a36904533c7dfc623", "html_url": "https://github.com/datamill-co/target-postgres/commit/51b4b9c356c4ce77e87a333a36904533c7dfc623"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "51b4b9c356c4ce77e87a333a36904533c7dfc623", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:07:14.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T22:14:54.000000Z"}, "message": "Fail: Expound on nullable constraint test", "tree": {"sha": "4d293375fae97dac66e475fb7f6c3be5c6c27428", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4d293375fae97dac66e475fb7f6c3be5c6c27428"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/51b4b9c356c4ce77e87a333a36904533c7dfc623", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51b4b9c356c4ce77e87a333a36904533c7dfc623", "html_url": "https://github.com/datamill-co/target-postgres/commit/51b4b9c356c4ce77e87a333a36904533c7dfc623", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51b4b9c356c4ce77e87a333a36904533c7dfc623/comments", "parents": [{"sha": "7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "html_url": "https://github.com/datamill-co/target-postgres/commit/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-19T22:14:15.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T22:14:15.000000Z"}, "message": "Merge pull request #16 from datamill-co/master\n\nBump fork.", "tree": {"sha": "6f790b0b1add681bda6a88858d58f7a7d4ccd018", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6f790b0b1add681bda6a88858d58f7a7d4ccd018"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "html_url": "https://github.com/datamill-co/target-postgres/commit/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7d40f44a6df2a909e856ba0b651a1d1a3b52eafc/comments", "parents": [{"sha": "fc1dad98652e7adda15238c5b1836348e2700942", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc1dad98652e7adda15238c5b1836348e2700942", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc1dad98652e7adda15238c5b1836348e2700942"}, {"sha": "49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "html_url": "https://github.com/datamill-co/target-postgres/commit/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.222154Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-19T22:12:49.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T22:12:49.000000Z"}, "message": "Merge pull request #38 from AlexanderMann/feature/column-type-splitting\n\nFeature/column type splitting", "tree": {"sha": "6f790b0b1add681bda6a88858d58f7a7d4ccd018", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6f790b0b1add681bda6a88858d58f7a7d4ccd018"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "html_url": "https://github.com/datamill-co/target-postgres/commit/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/49511128e01418246fa6ab8fe5b9f0ce80cd1c2f/comments", "parents": [{"sha": "8f610ec9b0b3de83dd85d96634443dc921d77670", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f610ec9b0b3de83dd85d96634443dc921d77670", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f610ec9b0b3de83dd85d96634443dc921d77670"}, {"sha": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba732f2fb76318e9bca772b3b8494fa5eb66ff37"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T21:55:11.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T22:07:34.000000Z"}, "message": "Refactor: Consolidate row serialization", "tree": {"sha": "6f790b0b1add681bda6a88858d58f7a7d4ccd018", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6f790b0b1add681bda6a88858d58f7a7d4ccd018"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "html_url": "https://github.com/datamill-co/target-postgres/commit/ba732f2fb76318e9bca772b3b8494fa5eb66ff37", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ba732f2fb76318e9bca772b3b8494fa5eb66ff37/comments", "parents": [{"sha": "eec7238f4b130139b8652d39fcff106c9ed9002a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eec7238f4b130139b8652d39fcff106c9ed9002a", "html_url": "https://github.com/datamill-co/target-postgres/commit/eec7238f4b130139b8652d39fcff106c9ed9002a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "eec7238f4b130139b8652d39fcff106c9ed9002a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:35:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:00:17.000000Z"}, "message": "Refactor: Helper function for split_column", "tree": {"sha": "2e4526f6d31d7f4147e629508f27aff423b129fd", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2e4526f6d31d7f4147e629508f27aff423b129fd"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/eec7238f4b130139b8652d39fcff106c9ed9002a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eec7238f4b130139b8652d39fcff106c9ed9002a", "html_url": "https://github.com/datamill-co/target-postgres/commit/eec7238f4b130139b8652d39fcff106c9ed9002a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eec7238f4b130139b8652d39fcff106c9ed9002a/comments", "parents": [{"sha": "92a75b6a642d6352e8a1418231d3592f5e970fc3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92a75b6a642d6352e8a1418231d3592f5e970fc3", "html_url": "https://github.com/datamill-co/target-postgres/commit/92a75b6a642d6352e8a1418231d3592f5e970fc3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "92a75b6a642d6352e8a1418231d3592f5e970fc3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:12:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:00:17.000000Z"}, "message": "Feature: Migrate existing column data to new split column", "tree": {"sha": "8b463d0731fd4837b4e46d31bb52e94e296b0491", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8b463d0731fd4837b4e46d31bb52e94e296b0491"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/92a75b6a642d6352e8a1418231d3592f5e970fc3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92a75b6a642d6352e8a1418231d3592f5e970fc3", "html_url": "https://github.com/datamill-co/target-postgres/commit/92a75b6a642d6352e8a1418231d3592f5e970fc3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92a75b6a642d6352e8a1418231d3592f5e970fc3/comments", "parents": [{"sha": "9325cac22eeaf159374fdd02084a69c225adff3f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9325cac22eeaf159374fdd02084a69c225adff3f", "html_url": "https://github.com/datamill-co/target-postgres/commit/9325cac22eeaf159374fdd02084a69c225adff3f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "9325cac22eeaf159374fdd02084a69c225adff3f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T22:17:23.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:00:17.000000Z"}, "message": "Fail: Column type change, values not migrated", "tree": {"sha": "b239396ea544b18dace1a6052672e1f1fc7ad412", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b239396ea544b18dace1a6052672e1f1fc7ad412"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/9325cac22eeaf159374fdd02084a69c225adff3f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9325cac22eeaf159374fdd02084a69c225adff3f", "html_url": "https://github.com/datamill-co/target-postgres/commit/9325cac22eeaf159374fdd02084a69c225adff3f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9325cac22eeaf159374fdd02084a69c225adff3f/comments", "parents": [{"sha": "a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "html_url": "https://github.com/datamill-co/target-postgres/commit/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T22:04:59.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T19:00:17.000000Z"}, "message": "Feature: Handle column deletion", "tree": {"sha": "260259c8b401f506a2b0cad7e213ed73b89b8e16", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/260259c8b401f506a2b0cad7e213ed73b89b8e16"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "html_url": "https://github.com/datamill-co/target-postgres/commit/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a9e7b753801c8e1ca4e8d3bc2bd037192cab5ca5/comments", "parents": [{"sha": "d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "html_url": "https://github.com/datamill-co/target-postgres/commit/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T22:04:25.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:59:41.000000Z"}, "message": "Refactor: Upsert table fetches schema fresh", "tree": {"sha": "170b5800594bfa7090a997adcb7fb703531286d4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/170b5800594bfa7090a997adcb7fb703531286d4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "html_url": "https://github.com/datamill-co/target-postgres/commit/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d0109c55b5d4a182d9b8b6c51e62b21ca1e3a848/comments", "parents": [{"sha": "c3cbe88920f05bf363ca071271fcd3ec33d64380", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c3cbe88920f05bf363ca071271fcd3ec33d64380", "html_url": "https://github.com/datamill-co/target-postgres/commit/c3cbe88920f05bf363ca071271fcd3ec33d64380"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c3cbe88920f05bf363ca071271fcd3ec33d64380", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T22:03:36.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:59:41.000000Z"}, "message": "Fail: Column not being dropped in type change", "tree": {"sha": "20efb65183360114dcc49e5d055012d6570b2e2b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/20efb65183360114dcc49e5d055012d6570b2e2b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c3cbe88920f05bf363ca071271fcd3ec33d64380", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c3cbe88920f05bf363ca071271fcd3ec33d64380", "html_url": "https://github.com/datamill-co/target-postgres/commit/c3cbe88920f05bf363ca071271fcd3ec33d64380", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c3cbe88920f05bf363ca071271fcd3ec33d64380/comments", "parents": [{"sha": "41f4e7bb25258f524e7c334d45441ef131d0beb4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/41f4e7bb25258f524e7c334d45441ef131d0beb4", "html_url": "https://github.com/datamill-co/target-postgres/commit/41f4e7bb25258f524e7c334d45441ef131d0beb4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "41f4e7bb25258f524e7c334d45441ef131d0beb4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T20:34:28.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:59:41.000000Z"}, "message": "Feature: Column type change handling", "tree": {"sha": "2bd0998180dee4f1bf3d733515f430c504e14bc1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2bd0998180dee4f1bf3d733515f430c504e14bc1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/41f4e7bb25258f524e7c334d45441ef131d0beb4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/41f4e7bb25258f524e7c334d45441ef131d0beb4", "html_url": "https://github.com/datamill-co/target-postgres/commit/41f4e7bb25258f524e7c334d45441ef131d0beb4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/41f4e7bb25258f524e7c334d45441ef131d0beb4/comments", "parents": [{"sha": "2e6953ca265e7221747658743bf1d11f3c260619", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e6953ca265e7221747658743bf1d11f3c260619", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e6953ca265e7221747658743bf1d11f3c260619"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2e6953ca265e7221747658743bf1d11f3c260619", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T15:28:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T18:59:41.000000Z"}, "message": "Make JSON Schema SQL Name shorthand: Function", "tree": {"sha": "e3b7394790f42de894743c42ccc50f5d741f68e0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e3b7394790f42de894743c42ccc50f5d741f68e0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2e6953ca265e7221747658743bf1d11f3c260619", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e6953ca265e7221747658743bf1d11f3c260619", "html_url": "https://github.com/datamill-co/target-postgres/commit/2e6953ca265e7221747658743bf1d11f3c260619", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2e6953ca265e7221747658743bf1d11f3c260619/comments", "parents": [{"sha": "e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T20:32:31.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T17:37:50.000000Z"}, "message": "Refactor: NESTED_SEPARATOR to generic SEPARATOR", "tree": {"sha": "375f9bef359cd518b7fac296b21e9cdde190300d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/375f9bef359cd518b7fac296b21e9cdde190300d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "html_url": "https://github.com/datamill-co/target-postgres/commit/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e56317c8e6e50bcdf181e6a4a5e97a076d97b6b7/comments", "parents": [{"sha": "59035b6d8fdb056e4689d7f832f52a4c772647fd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59035b6d8fdb056e4689d7f832f52a4c772647fd", "html_url": "https://github.com/datamill-co/target-postgres/commit/59035b6d8fdb056e4689d7f832f52a4c772647fd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "59035b6d8fdb056e4689d7f832f52a4c772647fd", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T15:28:33.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T17:37:50.000000Z"}, "message": "Refactor: get_schema returns TABLE_SCHEMA\n\n- get_schema returns a TABLE_SCHEMA\n- allow for setting table metadata", "tree": {"sha": "57fff6ffd77cbf0818959576466ac6dbed01f59f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/57fff6ffd77cbf0818959576466ac6dbed01f59f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/59035b6d8fdb056e4689d7f832f52a4c772647fd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59035b6d8fdb056e4689d7f832f52a4c772647fd", "html_url": "https://github.com/datamill-co/target-postgres/commit/59035b6d8fdb056e4689d7f832f52a4c772647fd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/59035b6d8fdb056e4689d7f832f52a4c772647fd/comments", "parents": [{"sha": "e185ff4ebffd298827e27a2014e2c7df82bcc432", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e185ff4ebffd298827e27a2014e2c7df82bcc432", "html_url": "https://github.com/datamill-co/target-postgres/commit/e185ff4ebffd298827e27a2014e2c7df82bcc432"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e185ff4ebffd298827e27a2014e2c7df82bcc432", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T20:31:14.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T17:33:32.000000Z"}, "message": "Fail: Break tests on column type change", "tree": {"sha": "052ab974f5e760ecdd1e3429110fd56a93553259", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/052ab974f5e760ecdd1e3429110fd56a93553259"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e185ff4ebffd298827e27a2014e2c7df82bcc432", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e185ff4ebffd298827e27a2014e2c7df82bcc432", "html_url": "https://github.com/datamill-co/target-postgres/commit/e185ff4ebffd298827e27a2014e2c7df82bcc432", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e185ff4ebffd298827e27a2014e2c7df82bcc432/comments", "parents": [{"sha": "fc1dad98652e7adda15238c5b1836348e2700942", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc1dad98652e7adda15238c5b1836348e2700942", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc1dad98652e7adda15238c5b1836348e2700942"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fc1dad98652e7adda15238c5b1836348e2700942", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-19T17:28:00.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T17:28:00.000000Z"}, "message": "Merge pull request #15 from datamill-co/master\n\nBump fork.", "tree": {"sha": "94d8d21d651444ff5722d74308e0d236e336649e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/94d8d21d651444ff5722d74308e0d236e336649e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fc1dad98652e7adda15238c5b1836348e2700942", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc1dad98652e7adda15238c5b1836348e2700942", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc1dad98652e7adda15238c5b1836348e2700942", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc1dad98652e7adda15238c5b1836348e2700942/comments", "parents": [{"sha": "f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "html_url": "https://github.com/datamill-co/target-postgres/commit/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2"}, {"sha": "8f610ec9b0b3de83dd85d96634443dc921d77670", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f610ec9b0b3de83dd85d96634443dc921d77670", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f610ec9b0b3de83dd85d96634443dc921d77670"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8f610ec9b0b3de83dd85d96634443dc921d77670", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-19T17:26:29.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T17:26:29.000000Z"}, "message": "Merge pull request #37 from AlexanderMann/refactor/no-more-sql-column-defaults\n\nRefactor/no more sql column defaults", "tree": {"sha": "94d8d21d651444ff5722d74308e0d236e336649e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/94d8d21d651444ff5722d74308e0d236e336649e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8f610ec9b0b3de83dd85d96634443dc921d77670", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f610ec9b0b3de83dd85d96634443dc921d77670", "html_url": "https://github.com/datamill-co/target-postgres/commit/8f610ec9b0b3de83dd85d96634443dc921d77670", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8f610ec9b0b3de83dd85d96634443dc921d77670/comments", "parents": [{"sha": "57eba3fb2389ecc0419a90ca0206786515c4248f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/57eba3fb2389ecc0419a90ca0206786515c4248f", "html_url": "https://github.com/datamill-co/target-postgres/commit/57eba3fb2389ecc0419a90ca0206786515c4248f"}, {"sha": "a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "html_url": "https://github.com/datamill-co/target-postgres/commit/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-17T04:53:03.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T15:15:40.000000Z"}, "message": "Feature: No SQL Column defaults\n\nNew columns which are non nullable will be forced to nullable, will use JSON Schema `default`.", "tree": {"sha": "94d8d21d651444ff5722d74308e0d236e336649e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/94d8d21d651444ff5722d74308e0d236e336649e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "html_url": "https://github.com/datamill-co/target-postgres/commit/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a76c2bef124059b6ef1cfb4e9d3bc99defdbee59/comments", "parents": [{"sha": "eb87cffeb342a22d5fd43cbd59023d396576db6f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb87cffeb342a22d5fd43cbd59023d396576db6f", "html_url": "https://github.com/datamill-co/target-postgres/commit/eb87cffeb342a22d5fd43cbd59023d396576db6f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "eb87cffeb342a22d5fd43cbd59023d396576db6f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-17T04:52:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T14:23:40.000000Z"}, "message": "Refactor: SQL Column default not necessary", "tree": {"sha": "a88d598ede3e325c300c76bc8bd4148e74d358ca", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a88d598ede3e325c300c76bc8bd4148e74d358ca"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/eb87cffeb342a22d5fd43cbd59023d396576db6f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb87cffeb342a22d5fd43cbd59023d396576db6f", "html_url": "https://github.com/datamill-co/target-postgres/commit/eb87cffeb342a22d5fd43cbd59023d396576db6f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb87cffeb342a22d5fd43cbd59023d396576db6f/comments", "parents": [{"sha": "a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-17T04:51:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-19T14:23:40.000000Z"}, "message": "Make JSON Schema Nullable: Function", "tree": {"sha": "a678f0ddb2237e2b81dca27fa5372f47d06c58bb", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a678f0ddb2237e2b81dca27fa5372f47d06c58bb"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a024d53c6b14b4e51a864c1a877c9d1693c2d1ea/comments", "parents": [{"sha": "4dfcd2b105979d0748276a5ed32676c18ab9132f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4dfcd2b105979d0748276a5ed32676c18ab9132f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4dfcd2b105979d0748276a5ed32676c18ab9132f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4dfcd2b105979d0748276a5ed32676c18ab9132f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-17T04:50:52.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-17T04:54:29.000000Z"}, "message": "Fail: New non-nullable columns\n\nNew columns can be non nullable, however this changes past data.\n\nAdd failing specification.", "tree": {"sha": "1c2023ada7a1ab6f6e70fc8b7fba429f0b42087e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1c2023ada7a1ab6f6e70fc8b7fba429f0b42087e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4dfcd2b105979d0748276a5ed32676c18ab9132f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4dfcd2b105979d0748276a5ed32676c18ab9132f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4dfcd2b105979d0748276a5ed32676c18ab9132f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4dfcd2b105979d0748276a5ed32676c18ab9132f/comments", "parents": [{"sha": "f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "html_url": "https://github.com/datamill-co/target-postgres/commit/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:45:08.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T16:45:08.000000Z"}, "message": "Merge pull request #14 from datamill-co/master\n\nBump fork.", "tree": {"sha": "a6f7c7060bf3d68da5bc5642397bbf0a058bacd4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a6f7c7060bf3d68da5bc5642397bbf0a058bacd4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "html_url": "https://github.com/datamill-co/target-postgres/commit/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9950bd6ae6ca01439e4b6b010aff51fdeb35df2/comments", "parents": [{"sha": "30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "html_url": "https://github.com/datamill-co/target-postgres/commit/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0"}, {"sha": "57eba3fb2389ecc0419a90ca0206786515c4248f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/57eba3fb2389ecc0419a90ca0206786515c4248f", "html_url": "https://github.com/datamill-co/target-postgres/commit/57eba3fb2389ecc0419a90ca0206786515c4248f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "57eba3fb2389ecc0419a90ca0206786515c4248f", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:33:42.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T16:33:42.000000Z"}, "message": "Merge pull request #36 from AlexanderMann/housekeeping/pylint--object-useless\n\nHousekeeping/pylint  object useless", "tree": {"sha": "a6f7c7060bf3d68da5bc5642397bbf0a058bacd4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a6f7c7060bf3d68da5bc5642397bbf0a058bacd4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/57eba3fb2389ecc0419a90ca0206786515c4248f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/57eba3fb2389ecc0419a90ca0206786515c4248f", "html_url": "https://github.com/datamill-co/target-postgres/commit/57eba3fb2389ecc0419a90ca0206786515c4248f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/57eba3fb2389ecc0419a90ca0206786515c4248f/comments", "parents": [{"sha": "746d6b607098262323dd64929092e62fb3b45da4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/746d6b607098262323dd64929092e62fb3b45da4", "html_url": "https://github.com/datamill-co/target-postgres/commit/746d6b607098262323dd64929092e62fb3b45da4"}, {"sha": "572dfdbd3173f8c1304557ff70437245bec71bf4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/572dfdbd3173f8c1304557ff70437245bec71bf4", "html_url": "https://github.com/datamill-co/target-postgres/commit/572dfdbd3173f8c1304557ff70437245bec71bf4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:31:13.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T16:31:13.000000Z"}, "message": "Merge pull request #13 from datamill-co/master\n\nBump fork.", "tree": {"sha": "b75cd10dc81976fe446687d603c9f809866dbcf6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b75cd10dc81976fe446687d603c9f809866dbcf6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "html_url": "https://github.com/datamill-co/target-postgres/commit/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/30137cf0fcd88c37bb1dd3c4cdf4e435d0ca5da0/comments", "parents": [{"sha": "b65949a95aa50b90cc7500404530a789f461a4e4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "html_url": "https://github.com/datamill-co/target-postgres/commit/b65949a95aa50b90cc7500404530a789f461a4e4"}, {"sha": "746d6b607098262323dd64929092e62fb3b45da4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/746d6b607098262323dd64929092e62fb3b45da4", "html_url": "https://github.com/datamill-co/target-postgres/commit/746d6b607098262323dd64929092e62fb3b45da4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "746d6b607098262323dd64929092e62fb3b45da4", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:30:14.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T16:30:14.000000Z"}, "message": "Merge pull request #35 from AlexanderMann/housekeeping/development-improvements-docker\n\nHousekeeping/development improvements docker", "tree": {"sha": "b75cd10dc81976fe446687d603c9f809866dbcf6", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b75cd10dc81976fe446687d603c9f809866dbcf6"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/746d6b607098262323dd64929092e62fb3b45da4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/746d6b607098262323dd64929092e62fb3b45da4", "html_url": "https://github.com/datamill-co/target-postgres/commit/746d6b607098262323dd64929092e62fb3b45da4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/746d6b607098262323dd64929092e62fb3b45da4/comments", "parents": [{"sha": "f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "html_url": "https://github.com/datamill-co/target-postgres/commit/f0fce9d18a33d382d637d88f4d9f01f63349b9c8"}, {"sha": "67b9c948a710d9a5c39b204a4ed455a55f8e7744", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/67b9c948a710d9a5c39b204a4ed455a55f8e7744", "html_url": "https://github.com/datamill-co/target-postgres/commit/67b9c948a710d9a5c39b204a4ed455a55f8e7744"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:29:49.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T16:29:49.000000Z"}, "message": "Merge pull request #34 from AlexanderMann/housekeeping/logger-warn-is-deprecated\n\nHousekeeping/logger warn is deprecated", "tree": {"sha": "020758f137f5230fccaf93238b15a1162eb0c986", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/020758f137f5230fccaf93238b15a1162eb0c986"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "html_url": "https://github.com/datamill-co/target-postgres/commit/f0fce9d18a33d382d637d88f4d9f01f63349b9c8", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f0fce9d18a33d382d637d88f4d9f01f63349b9c8/comments", "parents": [{"sha": "d228f0a32c5fcbe9dc002336db8221058182b57b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d228f0a32c5fcbe9dc002336db8221058182b57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/d228f0a32c5fcbe9dc002336db8221058182b57b"}, {"sha": "5b338f224e5cf8ebe228629757b9b759d209d165", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b338f224e5cf8ebe228629757b9b759d209d165", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b338f224e5cf8ebe228629757b9b759d209d165"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "572dfdbd3173f8c1304557ff70437245bec71bf4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:25:35.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:25:35.000000Z"}, "message": "Refactor: Remove pylint tagged 'useless'", "tree": {"sha": "caf2b2a8431f255058bd2c37be39adde4458d81d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/caf2b2a8431f255058bd2c37be39adde4458d81d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/572dfdbd3173f8c1304557ff70437245bec71bf4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/572dfdbd3173f8c1304557ff70437245bec71bf4", "html_url": "https://github.com/datamill-co/target-postgres/commit/572dfdbd3173f8c1304557ff70437245bec71bf4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/572dfdbd3173f8c1304557ff70437245bec71bf4/comments", "parents": [{"sha": "b65949a95aa50b90cc7500404530a789f461a4e4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "html_url": "https://github.com/datamill-co/target-postgres/commit/b65949a95aa50b90cc7500404530a789f461a4e4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "67b9c948a710d9a5c39b204a4ed455a55f8e7744", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:15:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T16:15:19.000000Z"}, "message": "Feature: Simplify running pytest, reduce fetching cached dependencies", "tree": {"sha": "50ec96497b4590a8f534d4854afbb52b9a43ca21", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/50ec96497b4590a8f534d4854afbb52b9a43ca21"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/67b9c948a710d9a5c39b204a4ed455a55f8e7744", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/67b9c948a710d9a5c39b204a4ed455a55f8e7744", "html_url": "https://github.com/datamill-co/target-postgres/commit/67b9c948a710d9a5c39b204a4ed455a55f8e7744", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/67b9c948a710d9a5c39b204a4ed455a55f8e7744/comments", "parents": [{"sha": "b65949a95aa50b90cc7500404530a789f461a4e4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "html_url": "https://github.com/datamill-co/target-postgres/commit/b65949a95aa50b90cc7500404530a789f461a4e4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5b338f224e5cf8ebe228629757b9b759d209d165", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:39:52.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:40:13.000000Z"}, "message": "Fix: Resolve all user DeprecationWarnings", "tree": {"sha": "020758f137f5230fccaf93238b15a1162eb0c986", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/020758f137f5230fccaf93238b15a1162eb0c986"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5b338f224e5cf8ebe228629757b9b759d209d165", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b338f224e5cf8ebe228629757b9b759d209d165", "html_url": "https://github.com/datamill-co/target-postgres/commit/5b338f224e5cf8ebe228629757b9b759d209d165", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5b338f224e5cf8ebe228629757b9b759d209d165/comments", "parents": [{"sha": "608e5f980060760f0e4121aba350d029ef06f615", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/608e5f980060760f0e4121aba350d029ef06f615", "html_url": "https://github.com/datamill-co/target-postgres/commit/608e5f980060760f0e4121aba350d029ef06f615"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "608e5f980060760f0e4121aba350d029ef06f615", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:31:41.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:40:13.000000Z"}, "message": "Fail: Non User Warnings hard fail", "tree": {"sha": "b93e05d5f1ae1735f3e3fe6cdd170887eb366933", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b93e05d5f1ae1735f3e3fe6cdd170887eb366933"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/608e5f980060760f0e4121aba350d029ef06f615", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/608e5f980060760f0e4121aba350d029ef06f615", "html_url": "https://github.com/datamill-co/target-postgres/commit/608e5f980060760f0e4121aba350d029ef06f615", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/608e5f980060760f0e4121aba350d029ef06f615/comments", "parents": [{"sha": "b65949a95aa50b90cc7500404530a789f461a4e4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "html_url": "https://github.com/datamill-co/target-postgres/commit/b65949a95aa50b90cc7500404530a789f461a4e4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b65949a95aa50b90cc7500404530a789f461a4e4", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:29:04.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T14:29:04.000000Z"}, "message": "Merge pull request #12 from datamill-co/master\n\nBump fork.", "tree": {"sha": "e1ef39fb8ad252f1eb7745557524e1e173e1ba23", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e1ef39fb8ad252f1eb7745557524e1e173e1ba23"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4", "html_url": "https://github.com/datamill-co/target-postgres/commit/b65949a95aa50b90cc7500404530a789f461a4e4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b65949a95aa50b90cc7500404530a789f461a4e4/comments", "parents": [{"sha": "2254e12c89bf380783c587747370d4bbb3ee5edf", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2254e12c89bf380783c587747370d4bbb3ee5edf", "html_url": "https://github.com/datamill-co/target-postgres/commit/2254e12c89bf380783c587747370d4bbb3ee5edf"}, {"sha": "d228f0a32c5fcbe9dc002336db8221058182b57b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d228f0a32c5fcbe9dc002336db8221058182b57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/d228f0a32c5fcbe9dc002336db8221058182b57b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d228f0a32c5fcbe9dc002336db8221058182b57b", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:28:16.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T14:28:16.000000Z"}, "message": "Merge pull request #32 from AlexanderMann/fix/empty-string\n\nFix/empty string", "tree": {"sha": "e1ef39fb8ad252f1eb7745557524e1e173e1ba23", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e1ef39fb8ad252f1eb7745557524e1e173e1ba23"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d228f0a32c5fcbe9dc002336db8221058182b57b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d228f0a32c5fcbe9dc002336db8221058182b57b", "html_url": "https://github.com/datamill-co/target-postgres/commit/d228f0a32c5fcbe9dc002336db8221058182b57b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d228f0a32c5fcbe9dc002336db8221058182b57b/comments", "parents": [{"sha": "2b80868ca17306e22760e3be18e8550b56d224a9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b80868ca17306e22760e3be18e8550b56d224a9", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b80868ca17306e22760e3be18e8550b56d224a9"}, {"sha": "925011b18bb63143d47b3e4c449e543b541d61ab", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/925011b18bb63143d47b3e4c449e543b541d61ab", "html_url": "https://github.com/datamill-co/target-postgres/commit/925011b18bb63143d47b3e4c449e543b541d61ab"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.370107Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "925011b18bb63143d47b3e4c449e543b541d61ab", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:21:15.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:26:21.000000Z"}, "message": "README: Warn about default null", "tree": {"sha": "e1ef39fb8ad252f1eb7745557524e1e173e1ba23", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e1ef39fb8ad252f1eb7745557524e1e173e1ba23"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/925011b18bb63143d47b3e4c449e543b541d61ab", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/925011b18bb63143d47b3e4c449e543b541d61ab", "html_url": "https://github.com/datamill-co/target-postgres/commit/925011b18bb63143d47b3e4c449e543b541d61ab", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/925011b18bb63143d47b3e4c449e543b541d61ab/comments", "parents": [{"sha": "c121a06ac1f28344969b90d0fbe2d80028b3189f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c121a06ac1f28344969b90d0fbe2d80028b3189f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c121a06ac1f28344969b90d0fbe2d80028b3189f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c121a06ac1f28344969b90d0fbe2d80028b3189f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:00:22.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T14:26:21.000000Z"}, "message": "Feature: No error on default NULL, warn instead", "tree": {"sha": "eb1fe4d980b07ddbaaf1135f167d98476f8e3411", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/eb1fe4d980b07ddbaaf1135f167d98476f8e3411"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c121a06ac1f28344969b90d0fbe2d80028b3189f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c121a06ac1f28344969b90d0fbe2d80028b3189f", "html_url": "https://github.com/datamill-co/target-postgres/commit/c121a06ac1f28344969b90d0fbe2d80028b3189f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c121a06ac1f28344969b90d0fbe2d80028b3189f/comments", "parents": [{"sha": "1f95a4610677fcc627ee93ce67a76da2de051385", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f95a4610677fcc627ee93ce67a76da2de051385", "html_url": "https://github.com/datamill-co/target-postgres/commit/1f95a4610677fcc627ee93ce67a76da2de051385"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1f95a4610677fcc627ee93ce67a76da2de051385", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T13:48:36.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T13:48:36.000000Z"}, "message": "Refactor: Global variable over magic constant", "tree": {"sha": "1eae79c08459b0973db6b400b489eb3485d7dd7b", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1eae79c08459b0973db6b400b489eb3485d7dd7b"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1f95a4610677fcc627ee93ce67a76da2de051385", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f95a4610677fcc627ee93ce67a76da2de051385", "html_url": "https://github.com/datamill-co/target-postgres/commit/1f95a4610677fcc627ee93ce67a76da2de051385", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1f95a4610677fcc627ee93ce67a76da2de051385/comments", "parents": [{"sha": "f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "html_url": "https://github.com/datamill-co/target-postgres/commit/f5786d2c2caee548c0802c623ae3e2433e3ed7dd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T13:44:04.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-15T13:44:04.000000Z"}, "message": "Fix: Handle empty string with NULL default", "tree": {"sha": "bee9b2f35c0afd23f9a36081addf1c4734e92911", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/bee9b2f35c0afd23f9a36081addf1c4734e92911"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "html_url": "https://github.com/datamill-co/target-postgres/commit/f5786d2c2caee548c0802c623ae3e2433e3ed7dd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f5786d2c2caee548c0802c623ae3e2433e3ed7dd/comments", "parents": [{"sha": "2254e12c89bf380783c587747370d4bbb3ee5edf", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2254e12c89bf380783c587747370d4bbb3ee5edf", "html_url": "https://github.com/datamill-co/target-postgres/commit/2254e12c89bf380783c587747370d4bbb3ee5edf"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2254e12c89bf380783c587747370d4bbb3ee5edf", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-14T23:05:58.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-14T23:05:58.000000Z"}, "message": "Merge pull request #11 from datamill-co/master\n\nBump fork.", "tree": {"sha": "cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2254e12c89bf380783c587747370d4bbb3ee5edf", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2254e12c89bf380783c587747370d4bbb3ee5edf", "html_url": "https://github.com/datamill-co/target-postgres/commit/2254e12c89bf380783c587747370d4bbb3ee5edf", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2254e12c89bf380783c587747370d4bbb3ee5edf/comments", "parents": [{"sha": "2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c"}, {"sha": "2b80868ca17306e22760e3be18e8550b56d224a9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b80868ca17306e22760e3be18e8550b56d224a9", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b80868ca17306e22760e3be18e8550b56d224a9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2b80868ca17306e22760e3be18e8550b56d224a9", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-14T23:03:59.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-14T23:03:59.000000Z"}, "message": "Merge pull request #31 from AlexanderMann/fix/null-default\n\nFix/null default", "tree": {"sha": "cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2b80868ca17306e22760e3be18e8550b56d224a9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b80868ca17306e22760e3be18e8550b56d224a9", "html_url": "https://github.com/datamill-co/target-postgres/commit/2b80868ca17306e22760e3be18e8550b56d224a9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2b80868ca17306e22760e3be18e8550b56d224a9/comments", "parents": [{"sha": "aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa3778f9576126d4bbe2d439b9250f4d3b4c2086"}, {"sha": "51c95459b5810ff2120f1c4f05c644efb3724296", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51c95459b5810ff2120f1c4f05c644efb3724296", "html_url": "https://github.com/datamill-co/target-postgres/commit/51c95459b5810ff2120f1c4f05c644efb3724296"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "51c95459b5810ff2120f1c4f05c644efb3724296", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-14T23:00:56.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-14T23:00:56.000000Z"}, "message": "Merge branch 'master' into fix/null-default", "tree": {"sha": "cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cba5616bb84d4deb6c5ef44e27319bb7aa1b77ab"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/51c95459b5810ff2120f1c4f05c644efb3724296", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51c95459b5810ff2120f1c4f05c644efb3724296", "html_url": "https://github.com/datamill-co/target-postgres/commit/51c95459b5810ff2120f1c4f05c644efb3724296", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/51c95459b5810ff2120f1c4f05c644efb3724296/comments", "parents": [{"sha": "bce3c6cc9d71cc2e21ceef12a199841301fdab97", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bce3c6cc9d71cc2e21ceef12a199841301fdab97", "html_url": "https://github.com/datamill-co/target-postgres/commit/bce3c6cc9d71cc2e21ceef12a199841301fdab97"}, {"sha": "aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa3778f9576126d4bbe2d439b9250f4d3b4c2086"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bce3c6cc9d71cc2e21ceef12a199841301fdab97", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T22:56:59.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T22:56:59.000000Z"}, "message": "Fix: Non Truthy default values", "tree": {"sha": "efc5e72120ef8d6cd6c7ad0f96e63fec3c3b16d1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/efc5e72120ef8d6cd6c7ad0f96e63fec3c3b16d1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bce3c6cc9d71cc2e21ceef12a199841301fdab97", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bce3c6cc9d71cc2e21ceef12a199841301fdab97", "html_url": "https://github.com/datamill-co/target-postgres/commit/bce3c6cc9d71cc2e21ceef12a199841301fdab97", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bce3c6cc9d71cc2e21ceef12a199841301fdab97/comments", "parents": [{"sha": "7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "html_url": "https://github.com/datamill-co/target-postgres/commit/7895dad20fe3864bc6c8a8c351d74df382fa5cb9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T22:54:37.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T22:54:37.000000Z"}, "message": "Refactor: if logic, simplify", "tree": {"sha": "1ccf805a9444917f6ff4ffa5861547c25bb48e61", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/1ccf805a9444917f6ff4ffa5861547c25bb48e61"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "html_url": "https://github.com/datamill-co/target-postgres/commit/7895dad20fe3864bc6c8a8c351d74df382fa5cb9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/7895dad20fe3864bc6c8a8c351d74df382fa5cb9/comments", "parents": [{"sha": "4298f5883ee387bab0fd3a72fa2120c85769554c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4298f5883ee387bab0fd3a72fa2120c85769554c", "html_url": "https://github.com/datamill-co/target-postgres/commit/4298f5883ee387bab0fd3a72fa2120c85769554c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-14T22:46:44.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-14T22:46:44.000000Z"}, "message": "Merge pull request #30 from AlexanderMann/feature/type-collision\n\nFeature/type collision", "tree": {"sha": "69280f4f5db0fa797d51ac683e629364ff1030fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/69280f4f5db0fa797d51ac683e629364ff1030fa"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa3778f9576126d4bbe2d439b9250f4d3b4c2086", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa3778f9576126d4bbe2d439b9250f4d3b4c2086/comments", "parents": [{"sha": "f40c0203a3da265e02226dcf143f5acc31bb629f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f40c0203a3da265e02226dcf143f5acc31bb629f", "html_url": "https://github.com/datamill-co/target-postgres/commit/f40c0203a3da265e02226dcf143f5acc31bb629f"}, {"sha": "8246694c4c47810ddf957300973ba29ed8971149", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8246694c4c47810ddf957300973ba29ed8971149", "html_url": "https://github.com/datamill-co/target-postgres/commit/8246694c4c47810ddf957300973ba29ed8971149"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4298f5883ee387bab0fd3a72fa2120c85769554c", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T21:16:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T21:17:54.000000Z"}, "message": "Fix: from_sql for JSON Schema takes default values", "tree": {"sha": "3e4cc68f78ffee79c7f2f731f3c97c34aabf3bca", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3e4cc68f78ffee79c7f2f731f3c97c34aabf3bca"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4298f5883ee387bab0fd3a72fa2120c85769554c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4298f5883ee387bab0fd3a72fa2120c85769554c", "html_url": "https://github.com/datamill-co/target-postgres/commit/4298f5883ee387bab0fd3a72fa2120c85769554c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4298f5883ee387bab0fd3a72fa2120c85769554c/comments", "parents": [{"sha": "fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "html_url": "https://github.com/datamill-co/target-postgres/commit/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T21:13:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T21:17:54.000000Z"}, "message": "Fix: Persist, JSONSchema defaults", "tree": {"sha": "f86f17accc9bbddbc192a8d60bdca1fb805b54c5", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f86f17accc9bbddbc192a8d60bdca1fb805b54c5"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "html_url": "https://github.com/datamill-co/target-postgres/commit/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fcaf8f0f45ad500dd7f9251ce7a72c87a7a96cbf/comments", "parents": [{"sha": "40c51eaaa6a56256e7700767f4d03e9bc0851f70", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/40c51eaaa6a56256e7700767f4d03e9bc0851f70", "html_url": "https://github.com/datamill-co/target-postgres/commit/40c51eaaa6a56256e7700767f4d03e9bc0851f70"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "40c51eaaa6a56256e7700767f4d03e9bc0851f70", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T20:50:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T21:17:54.000000Z"}, "message": "Fix: Schema, JSONSchema defaults", "tree": {"sha": "8c5332f576b8fdc69855e586dd56ce42f5323c48", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8c5332f576b8fdc69855e586dd56ce42f5323c48"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/40c51eaaa6a56256e7700767f4d03e9bc0851f70", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/40c51eaaa6a56256e7700767f4d03e9bc0851f70", "html_url": "https://github.com/datamill-co/target-postgres/commit/40c51eaaa6a56256e7700767f4d03e9bc0851f70", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/40c51eaaa6a56256e7700767f4d03e9bc0851f70/comments", "parents": [{"sha": "2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8246694c4c47810ddf957300973ba29ed8971149", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T19:42:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-14T19:42:16.000000Z"}, "message": "Feature: Detect column type change", "tree": {"sha": "69280f4f5db0fa797d51ac683e629364ff1030fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/69280f4f5db0fa797d51ac683e629364ff1030fa"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8246694c4c47810ddf957300973ba29ed8971149", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8246694c4c47810ddf957300973ba29ed8971149", "html_url": "https://github.com/datamill-co/target-postgres/commit/8246694c4c47810ddf957300973ba29ed8971149", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8246694c4c47810ddf957300973ba29ed8971149/comments", "parents": [{"sha": "2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T22:43:28.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T22:43:28.000000Z"}, "message": "Merge pull request #10 from datamill-co/master\n\nBump fork.", "tree": {"sha": "f0ca84e3ce4305fb363a4a325f745624972dd7c0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f0ca84e3ce4305fb363a4a325f745624972dd7c0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d2703b61afe8495e59472dcf5a69f8b0d0bba0c/comments", "parents": [{"sha": "96680df9b9781f3153c750cd531cd9f6d8a01aa6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/96680df9b9781f3153c750cd531cd9f6d8a01aa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/96680df9b9781f3153c750cd531cd9f6d8a01aa6"}, {"sha": "f40c0203a3da265e02226dcf143f5acc31bb629f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f40c0203a3da265e02226dcf143f5acc31bb629f", "html_url": "https://github.com/datamill-co/target-postgres/commit/f40c0203a3da265e02226dcf143f5acc31bb629f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f40c0203a3da265e02226dcf143f5acc31bb629f", "commit": {"author": {"name": "Tim Visher", "email": "tim.visher@gmail.com", "date": "2018-11-13T21:28:47.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-13T21:28:47.000000Z"}, "message": "Update README with best practices (#25)\n\nMotivation\r\n----------\r\n\r\nThe README had a small spelling error and also suggested running the\r\n`target` and `tap` in the same virtualenv. This updates it to be a bit\r\nmore in keeping with current best practices.", "tree": {"sha": "f0ca84e3ce4305fb363a4a325f745624972dd7c0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f0ca84e3ce4305fb363a4a325f745624972dd7c0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f40c0203a3da265e02226dcf143f5acc31bb629f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f40c0203a3da265e02226dcf143f5acc31bb629f", "html_url": "https://github.com/datamill-co/target-postgres/commit/f40c0203a3da265e02226dcf143f5acc31bb629f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f40c0203a3da265e02226dcf143f5acc31bb629f/comments", "parents": [{"sha": "ead087a4dfb694430dbf69a29cf897de344de308", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ead087a4dfb694430dbf69a29cf897de344de308", "html_url": "https://github.com/datamill-co/target-postgres/commit/ead087a4dfb694430dbf69a29cf897de344de308"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ead087a4dfb694430dbf69a29cf897de344de308", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T21:26:05.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T21:26:05.000000Z"}, "message": "Merge pull request #27 from AlexanderMann/housekeeping/supported-versions\n\nHousekeeping/supported versions", "tree": {"sha": "2dbc843e4bc9b1796b5be92cf8716d84266d8396", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2dbc843e4bc9b1796b5be92cf8716d84266d8396"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ead087a4dfb694430dbf69a29cf897de344de308", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ead087a4dfb694430dbf69a29cf897de344de308", "html_url": "https://github.com/datamill-co/target-postgres/commit/ead087a4dfb694430dbf69a29cf897de344de308", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ead087a4dfb694430dbf69a29cf897de344de308/comments", "parents": [{"sha": "eeec4e33318c2ebc4595361fccb97513364eca82", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eeec4e33318c2ebc4595361fccb97513364eca82", "html_url": "https://github.com/datamill-co/target-postgres/commit/eeec4e33318c2ebc4595361fccb97513364eca82"}, {"sha": "913c35e8b80346d949809eb6b135e45c08fcd6cd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/913c35e8b80346d949809eb6b135e45c08fcd6cd", "html_url": "https://github.com/datamill-co/target-postgres/commit/913c35e8b80346d949809eb6b135e45c08fcd6cd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "913c35e8b80346d949809eb6b135e45c08fcd6cd", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T20:07:24.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T20:14:04.000000Z"}, "message": "README: supported versions", "tree": {"sha": "2dbc843e4bc9b1796b5be92cf8716d84266d8396", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2dbc843e4bc9b1796b5be92cf8716d84266d8396"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/913c35e8b80346d949809eb6b135e45c08fcd6cd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/913c35e8b80346d949809eb6b135e45c08fcd6cd", "html_url": "https://github.com/datamill-co/target-postgres/commit/913c35e8b80346d949809eb6b135e45c08fcd6cd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/913c35e8b80346d949809eb6b135e45c08fcd6cd/comments", "parents": [{"sha": "2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "html_url": "https://github.com/datamill-co/target-postgres/commit/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T19:53:55.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T20:14:04.000000Z"}, "message": "Housekeeping: Match local dev env to CI, postgres:9.6.11", "tree": {"sha": "113605e5cf3485d0a7f76e4193e0296335626bc2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/113605e5cf3485d0a7f76e4193e0296335626bc2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "html_url": "https://github.com/datamill-co/target-postgres/commit/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2f6fb6eed8dd31df50af8a6abb05d5b4d3d59aed/comments", "parents": [{"sha": "9a132a081519ad511f42ce484b0ffbde639699a5", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9a132a081519ad511f42ce484b0ffbde639699a5", "html_url": "https://github.com/datamill-co/target-postgres/commit/9a132a081519ad511f42ce484b0ffbde639699a5"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "9a132a081519ad511f42ce484b0ffbde639699a5", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T19:45:02.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T20:14:04.000000Z"}, "message": "Housekeeping: All versions of Postgres in CI", "tree": {"sha": "2c916eacdf7ed84b21365c7ec066a35d86246cac", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2c916eacdf7ed84b21365c7ec066a35d86246cac"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/9a132a081519ad511f42ce484b0ffbde639699a5", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9a132a081519ad511f42ce484b0ffbde639699a5", "html_url": "https://github.com/datamill-co/target-postgres/commit/9a132a081519ad511f42ce484b0ffbde639699a5", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/9a132a081519ad511f42ce484b0ffbde639699a5/comments", "parents": [{"sha": "96680df9b9781f3153c750cd531cd9f6d8a01aa6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/96680df9b9781f3153c750cd531cd9f6d8a01aa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/96680df9b9781f3153c750cd531cd9f6d8a01aa6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "96680df9b9781f3153c750cd531cd9f6d8a01aa6", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T19:23:06.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T19:23:06.000000Z"}, "message": "Merge pull request #9 from datamill-co/master\n\nBump fork.", "tree": {"sha": "cfff4dd5a8cc6ea5aa853791fd7019d84346877a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cfff4dd5a8cc6ea5aa853791fd7019d84346877a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/96680df9b9781f3153c750cd531cd9f6d8a01aa6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/96680df9b9781f3153c750cd531cd9f6d8a01aa6", "html_url": "https://github.com/datamill-co/target-postgres/commit/96680df9b9781f3153c750cd531cd9f6d8a01aa6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/96680df9b9781f3153c750cd531cd9f6d8a01aa6/comments", "parents": [{"sha": "99de77c11b6008184fe1cde293a44e58e28ec9c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99de77c11b6008184fe1cde293a44e58e28ec9c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/99de77c11b6008184fe1cde293a44e58e28ec9c1"}, {"sha": "eeec4e33318c2ebc4595361fccb97513364eca82", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eeec4e33318c2ebc4595361fccb97513364eca82", "html_url": "https://github.com/datamill-co/target-postgres/commit/eeec4e33318c2ebc4595361fccb97513364eca82"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "eeec4e33318c2ebc4595361fccb97513364eca82", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:24:40.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T02:24:40.000000Z"}, "message": "Merge pull request #26 from AlexanderMann/feature/primary-key-changes-fail\n\nFeature/primary key changes fail", "tree": {"sha": "cfff4dd5a8cc6ea5aa853791fd7019d84346877a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cfff4dd5a8cc6ea5aa853791fd7019d84346877a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/eeec4e33318c2ebc4595361fccb97513364eca82", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eeec4e33318c2ebc4595361fccb97513364eca82", "html_url": "https://github.com/datamill-co/target-postgres/commit/eeec4e33318c2ebc4595361fccb97513364eca82", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eeec4e33318c2ebc4595361fccb97513364eca82/comments", "parents": [{"sha": "947da64970339692a5e5b42c8cc93e79abfb7d34", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/947da64970339692a5e5b42c8cc93e79abfb7d34", "html_url": "https://github.com/datamill-co/target-postgres/commit/947da64970339692a5e5b42c8cc93e79abfb7d34"}, {"sha": "cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "html_url": "https://github.com/datamill-co/target-postgres/commit/cbba7f95782a9464c9a81ffdb204cb4bab8e32db"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:13:43.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:21:21.000000Z"}, "message": "Refactor: Error to NamespacedError", "tree": {"sha": "cfff4dd5a8cc6ea5aa853791fd7019d84346877a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/cfff4dd5a8cc6ea5aa853791fd7019d84346877a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "html_url": "https://github.com/datamill-co/target-postgres/commit/cbba7f95782a9464c9a81ffdb204cb4bab8e32db", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cbba7f95782a9464c9a81ffdb204cb4bab8e32db/comments", "parents": [{"sha": "8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "html_url": "https://github.com/datamill-co/target-postgres/commit/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-09T16:14:59.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:10:24.000000Z"}, "message": "PK Change - Detection", "tree": {"sha": "7f57a9fca2004fe6056bcb39065c02b1948c378e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7f57a9fca2004fe6056bcb39065c02b1948c378e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "html_url": "https://github.com/datamill-co/target-postgres/commit/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8bf14c97efb9f23da0f5fee5d2b05a1f238b576b/comments", "parents": [{"sha": "53a74b9c43adf203d4cf618639db8e1732a96630", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/53a74b9c43adf203d4cf618639db8e1732a96630", "html_url": "https://github.com/datamill-co/target-postgres/commit/53a74b9c43adf203d4cf618639db8e1732a96630"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "53a74b9c43adf203d4cf618639db8e1732a96630", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-09T16:14:42.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:10:24.000000Z"}, "message": "PK Change - Detection: Specification", "tree": {"sha": "dafbb136a3a6c5e6117ca51a18e9be7349fa8829", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/dafbb136a3a6c5e6117ca51a18e9be7349fa8829"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/53a74b9c43adf203d4cf618639db8e1732a96630", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/53a74b9c43adf203d4cf618639db8e1732a96630", "html_url": "https://github.com/datamill-co/target-postgres/commit/53a74b9c43adf203d4cf618639db8e1732a96630", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/53a74b9c43adf203d4cf618639db8e1732a96630/comments", "parents": [{"sha": "c06d3dc5b9c63a2e250d7fb012015adc19a93531", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c06d3dc5b9c63a2e250d7fb012015adc19a93531", "html_url": "https://github.com/datamill-co/target-postgres/commit/c06d3dc5b9c63a2e250d7fb012015adc19a93531"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c06d3dc5b9c63a2e250d7fb012015adc19a93531", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-09T15:25:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:10:24.000000Z"}, "message": "Refactor: Error classes instead of Exceptions", "tree": {"sha": "9b21738d8e577339c860f3c5d0efd50c03bfacef", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9b21738d8e577339c860f3c5d0efd50c03bfacef"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c06d3dc5b9c63a2e250d7fb012015adc19a93531", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c06d3dc5b9c63a2e250d7fb012015adc19a93531", "html_url": "https://github.com/datamill-co/target-postgres/commit/c06d3dc5b9c63a2e250d7fb012015adc19a93531", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c06d3dc5b9c63a2e250d7fb012015adc19a93531/comments", "parents": [{"sha": "99de77c11b6008184fe1cde293a44e58e28ec9c1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99de77c11b6008184fe1cde293a44e58e28ec9c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/99de77c11b6008184fe1cde293a44e58e28ec9c1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "99de77c11b6008184fe1cde293a44e58e28ec9c1", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:05:57.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T02:05:57.000000Z"}, "message": "Merge pull request #8 from datamill-co/master\n\nBump fork.", "tree": {"sha": "927f1df083cf85e595c975270f56f5ac853b43a0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/927f1df083cf85e595c975270f56f5ac853b43a0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/99de77c11b6008184fe1cde293a44e58e28ec9c1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99de77c11b6008184fe1cde293a44e58e28ec9c1", "html_url": "https://github.com/datamill-co/target-postgres/commit/99de77c11b6008184fe1cde293a44e58e28ec9c1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/99de77c11b6008184fe1cde293a44e58e28ec9c1/comments", "parents": [{"sha": "93957f9ac977455303f493bbc96e84cc4616f185", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/93957f9ac977455303f493bbc96e84cc4616f185", "html_url": "https://github.com/datamill-co/target-postgres/commit/93957f9ac977455303f493bbc96e84cc4616f185"}, {"sha": "947da64970339692a5e5b42c8cc93e79abfb7d34", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/947da64970339692a5e5b42c8cc93e79abfb7d34", "html_url": "https://github.com/datamill-co/target-postgres/commit/947da64970339692a5e5b42c8cc93e79abfb7d34"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "947da64970339692a5e5b42c8cc93e79abfb7d34", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-13T02:05:17.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-13T02:05:17.000000Z"}, "message": "Merge pull request #24 from AlexanderMann/feature/validate-streamed-data-against-known-json-schema\n\nFeature/validate streamed data against known json schema", "tree": {"sha": "927f1df083cf85e595c975270f56f5ac853b43a0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/927f1df083cf85e595c975270f56f5ac853b43a0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/947da64970339692a5e5b42c8cc93e79abfb7d34", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/947da64970339692a5e5b42c8cc93e79abfb7d34", "html_url": "https://github.com/datamill-co/target-postgres/commit/947da64970339692a5e5b42c8cc93e79abfb7d34", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/947da64970339692a5e5b42c8cc93e79abfb7d34/comments", "parents": [{"sha": "eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "html_url": "https://github.com/datamill-co/target-postgres/commit/eb6c8b8ed35207cfd4115f46745ac6b417166ff2"}, {"sha": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "html_url": "https://github.com/datamill-co/target-postgres/commit/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T23:34:00.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-13T01:17:21.000000Z"}, "message": "README: Table with JSON Schema defining configuration file", "tree": {"sha": "927f1df083cf85e595c975270f56f5ac853b43a0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/927f1df083cf85e595c975270f56f5ac853b43a0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "html_url": "https://github.com/datamill-co/target-postgres/commit/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/63bf5b086c7c8b1dbb70b0dc2ad42569469eba62/comments", "parents": [{"sha": "42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "html_url": "https://github.com/datamill-co/target-postgres/commit/42c9472aeae5e605ef2fd14adde46bf6dc9d1824"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T23:19:51.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T23:19:51.000000Z"}, "message": "Refactor: WARN on _any_ invalid_records, not ERROR", "tree": {"sha": "c857ef13086dba88696abd76406e5a645e41b473", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c857ef13086dba88696abd76406e5a645e41b473"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "html_url": "https://github.com/datamill-co/target-postgres/commit/42c9472aeae5e605ef2fd14adde46bf6dc9d1824", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42c9472aeae5e605ef2fd14adde46bf6dc9d1824/comments", "parents": [{"sha": "c93830b831952bde55ef8591b812df9a5a573278", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c93830b831952bde55ef8591b812df9a5a573278", "html_url": "https://github.com/datamill-co/target-postgres/commit/c93830b831952bde55ef8591b812df9a5a573278"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.556648Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c93830b831952bde55ef8591b812df9a5a573278", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:55:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:55:13.000000Z"}, "message": "PR: Non generic Errors", "tree": {"sha": "257c22b6804dd9cdbbd2430cbf9da3340b8324a3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/257c22b6804dd9cdbbd2430cbf9da3340b8324a3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c93830b831952bde55ef8591b812df9a5a573278", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c93830b831952bde55ef8591b812df9a5a573278", "html_url": "https://github.com/datamill-co/target-postgres/commit/c93830b831952bde55ef8591b812df9a5a573278", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c93830b831952bde55ef8591b812df9a5a573278/comments", "parents": [{"sha": "5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "html_url": "https://github.com/datamill-co/target-postgres/commit/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-09T01:20:12.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "README: Update to include Invalid Records", "tree": {"sha": "ba678b13ac2cd14d1ed019c5e6c38bccce6e0bf0", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ba678b13ac2cd14d1ed019c5e6c38bccce6e0bf0"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "html_url": "https://github.com/datamill-co/target-postgres/commit/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/5fac7ac48fcffc82f22d33f257874f8aa35a9d4e/comments", "parents": [{"sha": "875d5b4fd26ff83fd634f529c57ccc7641c04b03", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/875d5b4fd26ff83fd634f529c57ccc7641c04b03", "html_url": "https://github.com/datamill-co/target-postgres/commit/875d5b4fd26ff83fd634f529c57ccc7641c04b03"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "875d5b4fd26ff83fd634f529c57ccc7641c04b03", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T21:52:09.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Add Record - Validation: Additional specification\n\nAdd in additional tests for `add_record`.", "tree": {"sha": "9501d5bbea4b45b4b42a455b38f1be6f0120867c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/9501d5bbea4b45b4b42a455b38f1be6f0120867c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/875d5b4fd26ff83fd634f529c57ccc7641c04b03", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/875d5b4fd26ff83fd634f529c57ccc7641c04b03", "html_url": "https://github.com/datamill-co/target-postgres/commit/875d5b4fd26ff83fd634f529c57ccc7641c04b03", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/875d5b4fd26ff83fd634f529c57ccc7641c04b03/comments", "parents": [{"sha": "1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "html_url": "https://github.com/datamill-co/target-postgres/commit/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T21:46:26.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Feature: Invalid Record Detection - Reporting\n\nReport on all invalid records found in streams.", "tree": {"sha": "80fd0e54b5f28bb2cccd11f2d21ff78fe3462a2c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/80fd0e54b5f28bb2cccd11f2d21ff78fe3462a2c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "html_url": "https://github.com/datamill-co/target-postgres/commit/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1e3e31df0e21331dd7c3f741f26efaac98dbe5d1/comments", "parents": [{"sha": "4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T21:32:58.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Refactor: Remove unused imports, alphabetize", "tree": {"sha": "7b1fcc0e4231060c6074970e1902b3f91ff59e3d", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7b1fcc0e4231060c6074970e1902b3f91ff59e3d"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "html_url": "https://github.com/datamill-co/target-postgres/commit/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4b25ebda8acaf5d7b1fe8811b0f8fcbe9b2e7f1f/comments", "parents": [{"sha": "03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "html_url": "https://github.com/datamill-co/target-postgres/commit/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T21:24:57.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Feature: Invalid Record Detection\n\nDetect invalid records on load in from `stdout`. Provide the following overrides (via cli, config, etc.):\n\n- `invalid_record_detect`: `Boolean` - allows for disabling detection of invalid records\n  - NOTE: This DOES NOT mean that `target-postgres` will attempt to persist those records, but rather that it will not halt due to encountering them\n- `invalid_record_threshold`: `int` - allows for setting a threshold that tells how many invalid records each stream is allowed to encounter before we halt.", "tree": {"sha": "946fefb9a86a0bbce4f6b0aef1715e0cff858797", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/946fefb9a86a0bbce4f6b0aef1715e0cff858797"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "html_url": "https://github.com/datamill-co/target-postgres/commit/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/03e549c9b5398d9cbf88a5aa16211ae5ebc5ceca/comments", "parents": [{"sha": "04dc259574135d6b538b4ac59db02c0c88d8e87f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/04dc259574135d6b538b4ac59db02c0c88d8e87f", "html_url": "https://github.com/datamill-co/target-postgres/commit/04dc259574135d6b538b4ac59db02c0c88d8e87f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "04dc259574135d6b538b4ac59db02c0c88d8e87f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T20:41:40.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Feature: Invalid Records Detection - Specification\n\nProvide specification via tests for what is expected to happen to modify invalid records detection.", "tree": {"sha": "042760d78fd88bd8479c91950a5b6433a971a476", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/042760d78fd88bd8479c91950a5b6433a971a476"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/04dc259574135d6b538b4ac59db02c0c88d8e87f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/04dc259574135d6b538b4ac59db02c0c88d8e87f", "html_url": "https://github.com/datamill-co/target-postgres/commit/04dc259574135d6b538b4ac59db02c0c88d8e87f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/04dc259574135d6b538b4ac59db02c0c88d8e87f/comments", "parents": [{"sha": "fc968670d5055d7782106135269b1555c8e0bec4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc968670d5055d7782106135269b1555c8e0bec4", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc968670d5055d7782106135269b1555c8e0bec4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fc968670d5055d7782106135269b1555c8e0bec4", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T20:12:32.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Add Record - Validation: Fix breaking tests\n\nMeet the specification setup.", "tree": {"sha": "b3e4a4fea323e2c862d5cbd864d98659fe58f575", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b3e4a4fea323e2c862d5cbd864d98659fe58f575"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fc968670d5055d7782106135269b1555c8e0bec4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc968670d5055d7782106135269b1555c8e0bec4", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc968670d5055d7782106135269b1555c8e0bec4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc968670d5055d7782106135269b1555c8e0bec4/comments", "parents": [{"sha": "662630e2b7df04c20012d87769abb340b2ab03e1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/662630e2b7df04c20012d87769abb340b2ab03e1", "html_url": "https://github.com/datamill-co/target-postgres/commit/662630e2b7df04c20012d87769abb340b2ab03e1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "662630e2b7df04c20012d87769abb340b2ab03e1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T20:04:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:53:48.000000Z"}, "message": "Add Record - Validation: Specification\n\nAdd in breaking tests which define the specification for a broken record detection.", "tree": {"sha": "f38c2e94b4d9ea4e354f7818633172e8c411be8c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f38c2e94b4d9ea4e354f7818633172e8c411be8c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/662630e2b7df04c20012d87769abb340b2ab03e1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/662630e2b7df04c20012d87769abb340b2ab03e1", "html_url": "https://github.com/datamill-co/target-postgres/commit/662630e2b7df04c20012d87769abb340b2ab03e1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/662630e2b7df04c20012d87769abb340b2ab03e1/comments", "parents": [{"sha": "93957f9ac977455303f493bbc96e84cc4616f185", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/93957f9ac977455303f493bbc96e84cc4616f185", "html_url": "https://github.com/datamill-co/target-postgres/commit/93957f9ac977455303f493bbc96e84cc4616f185"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "93957f9ac977455303f493bbc96e84cc4616f185", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:50:30.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-12T17:50:30.000000Z"}, "message": "Merge pull request #7 from datamill-co/master\n\nBump Fork", "tree": {"sha": "f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/93957f9ac977455303f493bbc96e84cc4616f185", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/93957f9ac977455303f493bbc96e84cc4616f185", "html_url": "https://github.com/datamill-co/target-postgres/commit/93957f9ac977455303f493bbc96e84cc4616f185", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/93957f9ac977455303f493bbc96e84cc4616f185/comments", "parents": [{"sha": "2d269f6f45e9146738825ccabc92b18d3f1b43ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d269f6f45e9146738825ccabc92b18d3f1b43ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d269f6f45e9146738825ccabc92b18d3f1b43ea"}, {"sha": "eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "html_url": "https://github.com/datamill-co/target-postgres/commit/eb6c8b8ed35207cfd4115f46745ac6b417166ff2"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:49:06.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-12T17:49:06.000000Z"}, "message": "Merge pull request #23 from AlexanderMann/feature/validate-json-schema\n\nFeature/validate json schema", "tree": {"sha": "f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "html_url": "https://github.com/datamill-co/target-postgres/commit/eb6c8b8ed35207cfd4115f46745ac6b417166ff2", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/eb6c8b8ed35207cfd4115f46745ac6b417166ff2/comments", "parents": [{"sha": "f443434a742ea09e7b69a016f2b327441ce1ee5e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f443434a742ea09e7b69a016f2b327441ce1ee5e", "html_url": "https://github.com/datamill-co/target-postgres/commit/f443434a742ea09e7b69a016f2b327441ce1ee5e"}, {"sha": "b6dc798353ad79a135a45bcd89f617b9541f593b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b6dc798353ad79a135a45bcd89f617b9541f593b", "html_url": "https://github.com/datamill-co/target-postgres/commit/b6dc798353ad79a135a45bcd89f617b9541f593b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b6dc798353ad79a135a45bcd89f617b9541f593b", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:35:17.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-12T17:35:17.000000Z"}, "message": "PR: Non generic Errors", "tree": {"sha": "f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f2313bd5ea4a464bbd47b04ad53ff92281e9a6b8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b6dc798353ad79a135a45bcd89f617b9541f593b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b6dc798353ad79a135a45bcd89f617b9541f593b", "html_url": "https://github.com/datamill-co/target-postgres/commit/b6dc798353ad79a135a45bcd89f617b9541f593b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b6dc798353ad79a135a45bcd89f617b9541f593b/comments", "parents": [{"sha": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a2db1d5de39bc0f3caaf17a13740ced15278c90", "html_url": "https://github.com/datamill-co/target-postgres/commit/4a2db1d5de39bc0f3caaf17a13740ced15278c90"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4a2db1d5de39bc0f3caaf17a13740ced15278c90", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T17:23:49.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T19:09:50.000000Z"}, "message": "JSON Schema - Validation: Detect invalid objects\n\nAllow our JSON Schema validation to detect objects which are not `dict`s and provide a usable error message.", "tree": {"sha": "8e869bdc89f65cb6c5fdcd614a6c312f745b0901", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8e869bdc89f65cb6c5fdcd614a6c312f745b0901"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4a2db1d5de39bc0f3caaf17a13740ced15278c90", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a2db1d5de39bc0f3caaf17a13740ced15278c90", "html_url": "https://github.com/datamill-co/target-postgres/commit/4a2db1d5de39bc0f3caaf17a13740ced15278c90", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4a2db1d5de39bc0f3caaf17a13740ced15278c90/comments", "parents": [{"sha": "f318e445b76853c929d80f47ea5bad2e60da1f41", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f318e445b76853c929d80f47ea5bad2e60da1f41", "html_url": "https://github.com/datamill-co/target-postgres/commit/f318e445b76853c929d80f47ea5bad2e60da1f41"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f318e445b76853c929d80f47ea5bad2e60da1f41", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T16:43:27.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T18:49:11.000000Z"}, "message": "Refactor: Improve legibility of test names\n\nTrying out double underscores for grouping similar terms in test names to improve legibility.\n\nIe, `test_some_function_invalid_names`, `test_some_function_invalid_places` can be transformed into:\n- `test_some_function__invalid__names`\n- `test_some_function__invalid__places`\n\nThe goal is to make function names obvious, and the goals of the test also clearer.", "tree": {"sha": "d7c5b07cd3ef03c0385bccd49a8131fc4d3a1b61", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d7c5b07cd3ef03c0385bccd49a8131fc4d3a1b61"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f318e445b76853c929d80f47ea5bad2e60da1f41", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f318e445b76853c929d80f47ea5bad2e60da1f41", "html_url": "https://github.com/datamill-co/target-postgres/commit/f318e445b76853c929d80f47ea5bad2e60da1f41", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f318e445b76853c929d80f47ea5bad2e60da1f41/comments", "parents": [{"sha": "a83f617807e75cab5cb9140c59f41d43af2a798f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a83f617807e75cab5cb9140c59f41d43af2a798f", "html_url": "https://github.com/datamill-co/target-postgres/commit/a83f617807e75cab5cb9140c59f41d43af2a798f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a83f617807e75cab5cb9140c59f41d43af2a798f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T16:42:58.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T18:49:10.000000Z"}, "message": "Feature: JSON Schema - Validation on Input\n\nValidate all input under it\u2019s JSON Schema. Any objects passed in which are determined to be JSON Schemas are now validated before running `target-postgres`.", "tree": {"sha": "2f36fd1d428bff17640e688033bc5a95009f48e3", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/2f36fd1d428bff17640e688033bc5a95009f48e3"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a83f617807e75cab5cb9140c59f41d43af2a798f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a83f617807e75cab5cb9140c59f41d43af2a798f", "html_url": "https://github.com/datamill-co/target-postgres/commit/a83f617807e75cab5cb9140c59f41d43af2a798f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a83f617807e75cab5cb9140c59f41d43af2a798f/comments", "parents": [{"sha": "3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "html_url": "https://github.com/datamill-co/target-postgres/commit/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T16:18:01.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T18:49:10.000000Z"}, "message": "JSON Schema - Validation\n\nFixing breaking tests with JSON Schema validation.", "tree": {"sha": "3825b9b5915bb894ad44977a3547cb28cbf04c66", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3825b9b5915bb894ad44977a3547cb28cbf04c66"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "html_url": "https://github.com/datamill-co/target-postgres/commit/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3d5d8037c1b32a819ffb05c6fe2eba6f639c6818/comments", "parents": [{"sha": "18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "html_url": "https://github.com/datamill-co/target-postgres/commit/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T16:17:34.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-08T18:49:10.000000Z"}, "message": "JSON Schema - Validation: Acceptance criteria\n\nAdding in failing tests to scope out the known acceptance criteria for our JSON Schema Validation feature.", "tree": {"sha": "6aacabeebc835b76d0b3ae721aba78ab703de789", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6aacabeebc835b76d0b3ae721aba78ab703de789"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "html_url": "https://github.com/datamill-co/target-postgres/commit/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/18aa5ddfcb963fa962c8c1e215b9c32606bb25f1/comments", "parents": [{"sha": "2d269f6f45e9146738825ccabc92b18d3f1b43ea", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d269f6f45e9146738825ccabc92b18d3f1b43ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d269f6f45e9146738825ccabc92b18d3f1b43ea"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "2d269f6f45e9146738825ccabc92b18d3f1b43ea", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-08T15:30:44.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-08T15:30:44.000000Z"}, "message": "Merge pull request #4 from datamill-co/master\n\nbump fork", "tree": {"sha": "6fc7bc38d3ce1d6a95c6151939d17fabcbb55b4f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6fc7bc38d3ce1d6a95c6151939d17fabcbb55b4f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/2d269f6f45e9146738825ccabc92b18d3f1b43ea", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d269f6f45e9146738825ccabc92b18d3f1b43ea", "html_url": "https://github.com/datamill-co/target-postgres/commit/2d269f6f45e9146738825ccabc92b18d3f1b43ea", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/2d269f6f45e9146738825ccabc92b18d3f1b43ea/comments", "parents": [{"sha": "e0574e46dcc7fe9e8465cd0476697a6e808885dd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e0574e46dcc7fe9e8465cd0476697a6e808885dd", "html_url": "https://github.com/datamill-co/target-postgres/commit/e0574e46dcc7fe9e8465cd0476697a6e808885dd"}, {"sha": "f443434a742ea09e7b69a016f2b327441ce1ee5e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f443434a742ea09e7b69a016f2b327441ce1ee5e", "html_url": "https://github.com/datamill-co/target-postgres/commit/f443434a742ea09e7b69a016f2b327441ce1ee5e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f443434a742ea09e7b69a016f2b327441ce1ee5e", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-06T23:36:02.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-06T23:36:02.000000Z"}, "message": "Merge pull request #17 from AlexanderMann/feature/json-schema-ref-support\n\nFeature/json schema ref support", "tree": {"sha": "6fc7bc38d3ce1d6a95c6151939d17fabcbb55b4f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/6fc7bc38d3ce1d6a95c6151939d17fabcbb55b4f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f443434a742ea09e7b69a016f2b327441ce1ee5e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f443434a742ea09e7b69a016f2b327441ce1ee5e", "html_url": "https://github.com/datamill-co/target-postgres/commit/f443434a742ea09e7b69a016f2b327441ce1ee5e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f443434a742ea09e7b69a016f2b327441ce1ee5e/comments", "parents": [{"sha": "6570617d4b918a9dc1103377cae819d1b59207ef", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6570617d4b918a9dc1103377cae819d1b59207ef", "html_url": "https://github.com/datamill-co/target-postgres/commit/6570617d4b918a9dc1103377cae819d1b59207ef"}, {"sha": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb536025bfc3f8db7b080f4e0dd70634d42026d6", "html_url": "https://github.com/datamill-co/target-postgres/commit/bb536025bfc3f8db7b080f4e0dd70634d42026d6"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6570617d4b918a9dc1103377cae819d1b59207ef", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T20:01:10.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-06T20:01:10.000000Z"}, "message": "Merge pull request #22 from datamill-co/singer-stats\n\nAdd Singer data collection and sponsorship info", "tree": {"sha": "606f1e7021788919c7daea5e73d1fd589440bf3c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/606f1e7021788919c7daea5e73d1fd589440bf3c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6570617d4b918a9dc1103377cae819d1b59207ef", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6570617d4b918a9dc1103377cae819d1b59207ef", "html_url": "https://github.com/datamill-co/target-postgres/commit/6570617d4b918a9dc1103377cae819d1b59207ef", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6570617d4b918a9dc1103377cae819d1b59207ef/comments", "parents": [{"sha": "d9b49603980942a1b92f025230d8765a3633faef", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9b49603980942a1b92f025230d8765a3633faef", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9b49603980942a1b92f025230d8765a3633faef"}, {"sha": "119e53007095425bb5ed3be70265dcb291b6b4b4", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/119e53007095425bb5ed3be70265dcb291b6b4b4", "html_url": "https://github.com/datamill-co/target-postgres/commit/119e53007095425bb5ed3be70265dcb291b6b4b4"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "119e53007095425bb5ed3be70265dcb291b6b4b4", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:59:31.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:59:31.000000Z"}, "message": "Fix CLI entrypoint", "tree": {"sha": "606f1e7021788919c7daea5e73d1fd589440bf3c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/606f1e7021788919c7daea5e73d1fd589440bf3c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/119e53007095425bb5ed3be70265dcb291b6b4b4", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/119e53007095425bb5ed3be70265dcb291b6b4b4", "html_url": "https://github.com/datamill-co/target-postgres/commit/119e53007095425bb5ed3be70265dcb291b6b4b4", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/119e53007095425bb5ed3be70265dcb291b6b4b4/comments", "parents": [{"sha": "66b078041f9a13db9bf3d6083a003f22934fd699", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66b078041f9a13db9bf3d6083a003f22934fd699", "html_url": "https://github.com/datamill-co/target-postgres/commit/66b078041f9a13db9bf3d6083a003f22934fd699"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "66b078041f9a13db9bf3d6083a003f22934fd699", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:59:16.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:59:16.000000Z"}, "message": "Fix data collection language", "tree": {"sha": "b1a3ec5d3293afc96ded98a784f880b9ffff7b04", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b1a3ec5d3293afc96ded98a784f880b9ffff7b04"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/66b078041f9a13db9bf3d6083a003f22934fd699", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66b078041f9a13db9bf3d6083a003f22934fd699", "html_url": "https://github.com/datamill-co/target-postgres/commit/66b078041f9a13db9bf3d6083a003f22934fd699", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/66b078041f9a13db9bf3d6083a003f22934fd699/comments", "parents": [{"sha": "fc51ebea0b23737ff1db2e29739b395e7d09460a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc51ebea0b23737ff1db2e29739b395e7d09460a", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc51ebea0b23737ff1db2e29739b395e7d09460a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fc51ebea0b23737ff1db2e29739b395e7d09460a", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:50:44.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-11-06T19:50:44.000000Z"}, "message": "Add Singer data collection and sponership info", "tree": {"sha": "f66e1eca0633a06ba9b128d2ba4e5acde1f9c4f8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f66e1eca0633a06ba9b128d2ba4e5acde1f9c4f8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fc51ebea0b23737ff1db2e29739b395e7d09460a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc51ebea0b23737ff1db2e29739b395e7d09460a", "html_url": "https://github.com/datamill-co/target-postgres/commit/fc51ebea0b23737ff1db2e29739b395e7d09460a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fc51ebea0b23737ff1db2e29739b395e7d09460a/comments", "parents": [{"sha": "d9b49603980942a1b92f025230d8765a3633faef", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9b49603980942a1b92f025230d8765a3633faef", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9b49603980942a1b92f025230d8765a3633faef"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "bb536025bfc3f8db7b080f4e0dd70634d42026d6", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T18:26:07.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T18:40:06.000000Z"}, "message": "Handle ref errors\n\nProvide better user experience for expected exceptions.", "tree": {"sha": "98d0f2c9c3396438eb460265917504744577ba42", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/98d0f2c9c3396438eb460265917504744577ba42"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/bb536025bfc3f8db7b080f4e0dd70634d42026d6", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb536025bfc3f8db7b080f4e0dd70634d42026d6", "html_url": "https://github.com/datamill-co/target-postgres/commit/bb536025bfc3f8db7b080f4e0dd70634d42026d6", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/bb536025bfc3f8db7b080f4e0dd70634d42026d6/comments", "parents": [{"sha": "cb1d67b01659eecac97343b358f3fa52adbe1779", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb1d67b01659eecac97343b358f3fa52adbe1779", "html_url": "https://github.com/datamill-co/target-postgres/commit/cb1d67b01659eecac97343b358f3fa52adbe1779"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "cb1d67b01659eecac97343b358f3fa52adbe1779", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T01:12:16.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T14:22:36.000000Z"}, "message": "Refactor: Move pure fns, and logic\n\nMoved related pure fns and logical checks over to `json_schema` file.\n\nThis refactor also puts us in a better place in the future to be able to modify these `to` and `from` `sql` fns and extend them for other dialect support.", "tree": {"sha": "f25edf2158c67c41bdf2b8020970d2f50e3e03f9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f25edf2158c67c41bdf2b8020970d2f50e3e03f9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/cb1d67b01659eecac97343b358f3fa52adbe1779", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb1d67b01659eecac97343b358f3fa52adbe1779", "html_url": "https://github.com/datamill-co/target-postgres/commit/cb1d67b01659eecac97343b358f3fa52adbe1779", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/cb1d67b01659eecac97343b358f3fa52adbe1779/comments", "parents": [{"sha": "16677204dc356229b21d62e061f1bb1dfad28e22", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16677204dc356229b21d62e061f1bb1dfad28e22", "html_url": "https://github.com/datamill-co/target-postgres/commit/16677204dc356229b21d62e061f1bb1dfad28e22"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "16677204dc356229b21d62e061f1bb1dfad28e22", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T00:46:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T14:22:36.000000Z"}, "message": "Remove sanitize_type (simplify_type)\n\n`sanitize_type` (renamed to `simplify_type`) is no longer necessary due to the pre-processing happening by leveraging `simplify`. Dead code deletion.", "tree": {"sha": "19f1155cfc958ce93d36edf8a72bb26bd0791dd8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/19f1155cfc958ce93d36edf8a72bb26bd0791dd8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/16677204dc356229b21d62e061f1bb1dfad28e22", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16677204dc356229b21d62e061f1bb1dfad28e22", "html_url": "https://github.com/datamill-co/target-postgres/commit/16677204dc356229b21d62e061f1bb1dfad28e22", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16677204dc356229b21d62e061f1bb1dfad28e22/comments", "parents": [{"sha": "ea5a880db7f1185baf37423cbd5b8ac5707e626f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ea5a880db7f1185baf37423cbd5b8ac5707e626f", "html_url": "https://github.com/datamill-co/target-postgres/commit/ea5a880db7f1185baf37423cbd5b8ac5707e626f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ea5a880db7f1185baf37423cbd5b8ac5707e626f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T23:25:14.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-06T14:22:36.000000Z"}, "message": "Support for JSON Schema refs\n\nAdded in simple support for JSON Schema `$ref`s.\n\nThis support does not include:\n- circular dependencies in any fashion (self included)\n- URI\u2019s or broken paths to the referenced schema. This _must_ be present in the single schema passed in", "tree": {"sha": "7c1a45b3c8c6024b3592bbb35e0214e06f715210", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/7c1a45b3c8c6024b3592bbb35e0214e06f715210"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ea5a880db7f1185baf37423cbd5b8ac5707e626f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ea5a880db7f1185baf37423cbd5b8ac5707e626f", "html_url": "https://github.com/datamill-co/target-postgres/commit/ea5a880db7f1185baf37423cbd5b8ac5707e626f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ea5a880db7f1185baf37423cbd5b8ac5707e626f/comments", "parents": [{"sha": "e0574e46dcc7fe9e8465cd0476697a6e808885dd", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e0574e46dcc7fe9e8465cd0476697a6e808885dd", "html_url": "https://github.com/datamill-co/target-postgres/commit/e0574e46dcc7fe9e8465cd0476697a6e808885dd"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e0574e46dcc7fe9e8465cd0476697a6e808885dd", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-06T14:11:36.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-06T14:11:36.000000Z"}, "message": "Merge pull request #3 from datamill-co/master\n\nBump fork", "tree": {"sha": "4031ed5e2212c89cded1610924b7cb9d2559e299", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4031ed5e2212c89cded1610924b7cb9d2559e299"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e0574e46dcc7fe9e8465cd0476697a6e808885dd", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e0574e46dcc7fe9e8465cd0476697a6e808885dd", "html_url": "https://github.com/datamill-co/target-postgres/commit/e0574e46dcc7fe9e8465cd0476697a6e808885dd", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e0574e46dcc7fe9e8465cd0476697a6e808885dd/comments", "parents": [{"sha": "94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "html_url": "https://github.com/datamill-co/target-postgres/commit/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a"}, {"sha": "d9b49603980942a1b92f025230d8765a3633faef", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9b49603980942a1b92f025230d8765a3633faef", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9b49603980942a1b92f025230d8765a3633faef"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d9b49603980942a1b92f025230d8765a3633faef", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-06T02:40:33.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-06T02:40:33.000000Z"}, "message": "Merge pull request #16 from AlexanderMann/feature/docker-compose-development-setup\n\nFeature/docker compose development setup", "tree": {"sha": "4031ed5e2212c89cded1610924b7cb9d2559e299", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4031ed5e2212c89cded1610924b7cb9d2559e299"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d9b49603980942a1b92f025230d8765a3633faef", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9b49603980942a1b92f025230d8765a3633faef", "html_url": "https://github.com/datamill-co/target-postgres/commit/d9b49603980942a1b92f025230d8765a3633faef", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d9b49603980942a1b92f025230d8765a3633faef/comments", "parents": [{"sha": "c954d2ef2852ed60e4962f95d56296d273ad0a57", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c954d2ef2852ed60e4962f95d56296d273ad0a57", "html_url": "https://github.com/datamill-co/target-postgres/commit/c954d2ef2852ed60e4962f95d56296d273ad0a57"}, {"sha": "1d7ea48d0d1d8a9d925028accffe493204fb2d54", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d7ea48d0d1d8a9d925028accffe493204fb2d54", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d7ea48d0d1d8a9d925028accffe493204fb2d54"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1d7ea48d0d1d8a9d925028accffe493204fb2d54", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T17:16:00.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T17:20:45.000000Z"}, "message": "Init docker dev setup\n\nGet local development setup to be as simple as:\n\n```\ndocker-compose up -d \u2014build\n```\n\nAdditional bonus: now matches CI setup.", "tree": {"sha": "4031ed5e2212c89cded1610924b7cb9d2559e299", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4031ed5e2212c89cded1610924b7cb9d2559e299"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1d7ea48d0d1d8a9d925028accffe493204fb2d54", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d7ea48d0d1d8a9d925028accffe493204fb2d54", "html_url": "https://github.com/datamill-co/target-postgres/commit/1d7ea48d0d1d8a9d925028accffe493204fb2d54", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1d7ea48d0d1d8a9d925028accffe493204fb2d54/comments", "parents": [{"sha": "94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "html_url": "https://github.com/datamill-co/target-postgres/commit/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.699149Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-05T16:29:16.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-05T16:29:16.000000Z"}, "message": "Merge pull request #2 from datamill-co/master\n\nUpdate Fork", "tree": {"sha": "11b5dfbe33d51ed4fba9f505308cc2b72686df4e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11b5dfbe33d51ed4fba9f505308cc2b72686df4e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "html_url": "https://github.com/datamill-co/target-postgres/commit/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/94ee7e25352ef7a52b19a6f7ae3058f6015cd95a/comments", "parents": [{"sha": "1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "html_url": "https://github.com/datamill-co/target-postgres/commit/1a2dc7666f0c3b975c8d19bab8d5581e6472e125"}, {"sha": "c954d2ef2852ed60e4962f95d56296d273ad0a57", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c954d2ef2852ed60e4962f95d56296d273ad0a57", "html_url": "https://github.com/datamill-co/target-postgres/commit/c954d2ef2852ed60e4962f95d56296d273ad0a57"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c954d2ef2852ed60e4962f95d56296d273ad0a57", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-05T16:27:38.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-05T16:27:38.000000Z"}, "message": "Merge pull request #10 from AlexanderMann/fix/json-schema-type-annotations-string-and-array\n\nFix/json schema type annotations string and array", "tree": {"sha": "11b5dfbe33d51ed4fba9f505308cc2b72686df4e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11b5dfbe33d51ed4fba9f505308cc2b72686df4e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c954d2ef2852ed60e4962f95d56296d273ad0a57", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c954d2ef2852ed60e4962f95d56296d273ad0a57", "html_url": "https://github.com/datamill-co/target-postgres/commit/c954d2ef2852ed60e4962f95d56296d273ad0a57", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c954d2ef2852ed60e4962f95d56296d273ad0a57/comments", "parents": [{"sha": "aa9cd77d7597f7d898549e893b2402495fe339aa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa9cd77d7597f7d898549e893b2402495fe339aa", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa9cd77d7597f7d898549e893b2402495fe339aa"}, {"sha": "78512db63e50782d869740fd29e860e30e78ac64", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/78512db63e50782d869740fd29e860e30e78ac64", "html_url": "https://github.com/datamill-co/target-postgres/commit/78512db63e50782d869740fd29e860e30e78ac64"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "78512db63e50782d869740fd29e860e30e78ac64", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T16:18:30.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T16:22:58.000000Z"}, "message": "Update README.md, known limitations\n\nKnown limitations no longer needs to include json schema types as arrays.", "tree": {"sha": "11b5dfbe33d51ed4fba9f505308cc2b72686df4e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/11b5dfbe33d51ed4fba9f505308cc2b72686df4e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/78512db63e50782d869740fd29e860e30e78ac64", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/78512db63e50782d869740fd29e860e30e78ac64", "html_url": "https://github.com/datamill-co/target-postgres/commit/78512db63e50782d869740fd29e860e30e78ac64", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/78512db63e50782d869740fd29e860e30e78ac64/comments", "parents": [{"sha": "b48c16700b3e2984f429a7922731b0335062107f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b48c16700b3e2984f429a7922731b0335062107f", "html_url": "https://github.com/datamill-co/target-postgres/commit/b48c16700b3e2984f429a7922731b0335062107f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b48c16700b3e2984f429a7922731b0335062107f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-03T01:21:13.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-05T16:22:57.000000Z"}, "message": "Refactor: naming, json_schema\n\nRefactor frequent usage of variable `json_schema` to better reflect context and allow for global `json_schema` reference.", "tree": {"sha": "be950b24d394682c13c1c718873c1d1b7f38f14a", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/be950b24d394682c13c1c718873c1d1b7f38f14a"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b48c16700b3e2984f429a7922731b0335062107f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b48c16700b3e2984f429a7922731b0335062107f", "html_url": "https://github.com/datamill-co/target-postgres/commit/b48c16700b3e2984f429a7922731b0335062107f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b48c16700b3e2984f429a7922731b0335062107f/comments", "parents": [{"sha": "543c461c9fc1df66316e3a690488422bd4b4a85a", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/543c461c9fc1df66316e3a690488422bd4b4a85a", "html_url": "https://github.com/datamill-co/target-postgres/commit/543c461c9fc1df66316e3a690488422bd4b4a85a"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "543c461c9fc1df66316e3a690488422bd4b4a85a", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T18:17:02.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T18:35:08.000000Z"}, "message": "Refactor json_schema_to_sql\n\njson_schema_to_sql no longer requires the top level `if` as the previous line will _always_ cause it to return True.", "tree": {"sha": "139380b1628cd63813056ebdd7da77de32151d53", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/139380b1628cd63813056ebdd7da77de32151d53"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/543c461c9fc1df66316e3a690488422bd4b4a85a", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/543c461c9fc1df66316e3a690488422bd4b4a85a", "html_url": "https://github.com/datamill-co/target-postgres/commit/543c461c9fc1df66316e3a690488422bd4b4a85a", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/543c461c9fc1df66316e3a690488422bd4b4a85a/comments", "parents": [{"sha": "c31cae9802870d0702314b6bd062b48474a48acc", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c31cae9802870d0702314b6bd062b48474a48acc", "html_url": "https://github.com/datamill-co/target-postgres/commit/c31cae9802870d0702314b6bd062b48474a48acc"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c31cae9802870d0702314b6bd062b48474a48acc", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T18:14:09.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T18:35:08.000000Z"}, "message": "Init json_schema helpers\n\nLeverage single helper to highlight all areas where `json_schema` `type` values are being munged.\n\nThis new file is intended to be the place where all JSON Schema related helpers and code should live", "tree": {"sha": "0c038cb80df6db86282197ee10e4df5f0fcd2203", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/0c038cb80df6db86282197ee10e4df5f0fcd2203"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c31cae9802870d0702314b6bd062b48474a48acc", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c31cae9802870d0702314b6bd062b48474a48acc", "html_url": "https://github.com/datamill-co/target-postgres/commit/c31cae9802870d0702314b6bd062b48474a48acc", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c31cae9802870d0702314b6bd062b48474a48acc/comments", "parents": [{"sha": "16e02ad2ce046dbc3474152c7709256224fae8d3", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16e02ad2ce046dbc3474152c7709256224fae8d3", "html_url": "https://github.com/datamill-co/target-postgres/commit/16e02ad2ce046dbc3474152c7709256224fae8d3"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "16e02ad2ce046dbc3474152c7709256224fae8d3", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T15:10:08.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T18:35:07.000000Z"}, "message": "JSON Schema - Scalar Types - TDD: break tests\n\nCreating falling tests which highlight issues around the `type` field being allowed to be an `array` or `string`", "tree": {"sha": "eaf917b85cdef9e59b1a12f7cadb4d5558938df8", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/eaf917b85cdef9e59b1a12f7cadb4d5558938df8"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/16e02ad2ce046dbc3474152c7709256224fae8d3", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16e02ad2ce046dbc3474152c7709256224fae8d3", "html_url": "https://github.com/datamill-co/target-postgres/commit/16e02ad2ce046dbc3474152c7709256224fae8d3", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/16e02ad2ce046dbc3474152c7709256224fae8d3/comments", "parents": [{"sha": "1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "html_url": "https://github.com/datamill-co/target-postgres/commit/1a2dc7666f0c3b975c8d19bab8d5581e6472e125"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-01T15:08:01.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-01T15:08:01.000000Z"}, "message": "Merge pull request #1 from datamill-co/master\n\nupdate fork", "tree": {"sha": "5e6bfe05b8c3d2d415c7f8a320df45604cf04d2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5e6bfe05b8c3d2d415c7f8a320df45604cf04d2e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "html_url": "https://github.com/datamill-co/target-postgres/commit/1a2dc7666f0c3b975c8d19bab8d5581e6472e125", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/1a2dc7666f0c3b975c8d19bab8d5581e6472e125/comments", "parents": [{"sha": "ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "html_url": "https://github.com/datamill-co/target-postgres/commit/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b"}, {"sha": "aa9cd77d7597f7d898549e893b2402495fe339aa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa9cd77d7597f7d898549e893b2402495fe339aa", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa9cd77d7597f7d898549e893b2402495fe339aa"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "aa9cd77d7597f7d898549e893b2402495fe339aa", "commit": {"author": {"name": "Alexander Mann", "email": "mannimal09@gmail.com", "date": "2018-11-01T14:46:09.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-01T14:46:09.000000Z"}, "message": "Merge pull request #9 from AlexanderMann/housekeeping/documentation-links\n\nImprove documentation", "tree": {"sha": "5e6bfe05b8c3d2d415c7f8a320df45604cf04d2e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5e6bfe05b8c3d2d415c7f8a320df45604cf04d2e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/aa9cd77d7597f7d898549e893b2402495fe339aa", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa9cd77d7597f7d898549e893b2402495fe339aa", "html_url": "https://github.com/datamill-co/target-postgres/commit/aa9cd77d7597f7d898549e893b2402495fe339aa", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/aa9cd77d7597f7d898549e893b2402495fe339aa/comments", "parents": [{"sha": "c09d91dedd722b16618bb7081c83a365f82275a7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c09d91dedd722b16618bb7081c83a365f82275a7", "html_url": "https://github.com/datamill-co/target-postgres/commit/c09d91dedd722b16618bb7081c83a365f82275a7"}, {"sha": "42baab385d8345af468da2d3c620992364df177f", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42baab385d8345af468da2d3c620992364df177f", "html_url": "https://github.com/datamill-co/target-postgres/commit/42baab385d8345af468da2d3c620992364df177f"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "42baab385d8345af468da2d3c620992364df177f", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-10-31T20:39:02.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-11-01T14:45:15.000000Z"}, "message": "Improve documentation\n\n- Add in links to various technologies\n- Start documentation about running locally", "tree": {"sha": "f088c2cfba7847a7664d29a5179580881de5c1d9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/f088c2cfba7847a7664d29a5179580881de5c1d9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/42baab385d8345af468da2d3c620992364df177f", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42baab385d8345af468da2d3c620992364df177f", "html_url": "https://github.com/datamill-co/target-postgres/commit/42baab385d8345af468da2d3c620992364df177f", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/42baab385d8345af468da2d3c620992364df177f/comments", "parents": [{"sha": "ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "html_url": "https://github.com/datamill-co/target-postgres/commit/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "c09d91dedd722b16618bb7081c83a365f82275a7", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-10-31T20:53:51.000000Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-31T20:53:51.000000Z"}, "message": "Merge pull request #8 from AlexanderMann/housekeeping/ci-setup\n\nHousekeeping/ci setup", "tree": {"sha": "4cc6d6b74b44b942bc41623fe6da8d618afe07a4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4cc6d6b74b44b942bc41623fe6da8d618afe07a4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/c09d91dedd722b16618bb7081c83a365f82275a7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c09d91dedd722b16618bb7081c83a365f82275a7", "html_url": "https://github.com/datamill-co/target-postgres/commit/c09d91dedd722b16618bb7081c83a365f82275a7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/c09d91dedd722b16618bb7081c83a365f82275a7/comments", "parents": [{"sha": "ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "html_url": "https://github.com/datamill-co/target-postgres/commit/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b"}, {"sha": "3ecfd30c94e57e5c5285dde726ae280d542ebc78", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ecfd30c94e57e5c5285dde726ae280d542ebc78", "html_url": "https://github.com/datamill-co/target-postgres/commit/3ecfd30c94e57e5c5285dde726ae280d542ebc78"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "3ecfd30c94e57e5c5285dde726ae280d542ebc78", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-10-31T18:45:38.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-10-31T20:19:17.000000Z"}, "message": "PostgreSQL DB support added in CI\n\nIn adding full PSQL DB support into CI, a bug was discovered in the testing.\n\nThe issue was around ordering of records from PSQL and Python. Since this was _not_ what the test was actually mainly focused on, I instead decided to leverage sets instead of lists.", "tree": {"sha": "4cc6d6b74b44b942bc41623fe6da8d618afe07a4", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4cc6d6b74b44b942bc41623fe6da8d618afe07a4"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/3ecfd30c94e57e5c5285dde726ae280d542ebc78", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ecfd30c94e57e5c5285dde726ae280d542ebc78", "html_url": "https://github.com/datamill-co/target-postgres/commit/3ecfd30c94e57e5c5285dde726ae280d542ebc78", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/3ecfd30c94e57e5c5285dde726ae280d542ebc78/comments", "parents": [{"sha": "b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "html_url": "https://github.com/datamill-co/target-postgres/commit/b22abab2895ec92d8b10d7da5d48bcbb4ed87365"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "commit": {"author": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-10-31T15:26:19.000000Z"}, "committer": {"name": "AlexanderMann", "email": "mannimal09@gmail.com", "date": "2018-10-31T20:19:17.000000Z"}, "message": "Initialize CI\n\nChose CircleCI due to familiarity. Ended up needing to flesh out the setup.py to have better testing support etc.", "tree": {"sha": "45a2559a3dc4ff7b145514aacd50e7d2a1b2a85e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/45a2559a3dc4ff7b145514aacd50e7d2a1b2a85e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "html_url": "https://github.com/datamill-co/target-postgres/commit/b22abab2895ec92d8b10d7da5d48bcbb4ed87365", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/b22abab2895ec92d8b10d7da5d48bcbb4ed87365/comments", "parents": [{"sha": "ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "html_url": "https://github.com/datamill-co/target-postgres/commit/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-04-02T01:47:48.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-04-02T01:47:48.000000Z"}, "message": "Cleanup", "tree": {"sha": "19bc3ceb9a251b27c9af555b0e0368d65dae277f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/19bc3ceb9a251b27c9af555b0e0368d65dae277f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "html_url": "https://github.com/datamill-co/target-postgres/commit/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/ddd77e123f1f6bc7dd79c28baaf9d9f4604f684b/comments", "parents": [{"sha": "effa8cefb7a3b558bd5636228884d0d11b6a39fa", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/effa8cefb7a3b558bd5636228884d0d11b6a39fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/effa8cefb7a3b558bd5636228884d0d11b6a39fa"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "effa8cefb7a3b558bd5636228884d0d11b6a39fa", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-26T00:56:54.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-26T00:56:54.000000Z"}, "message": "Test and fix batching", "tree": {"sha": "e78318bbdbd255cef234333422cf7b47c9f86ce1", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e78318bbdbd255cef234333422cf7b47c9f86ce1"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/effa8cefb7a3b558bd5636228884d0d11b6a39fa", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/effa8cefb7a3b558bd5636228884d0d11b6a39fa", "html_url": "https://github.com/datamill-co/target-postgres/commit/effa8cefb7a3b558bd5636228884d0d11b6a39fa", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/effa8cefb7a3b558bd5636228884d0d11b6a39fa/comments", "parents": [{"sha": "f9884d521b8906c143c9628c6f368ef51f4ee84e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9884d521b8906c143c9628c6f368ef51f4ee84e", "html_url": "https://github.com/datamill-co/target-postgres/commit/f9884d521b8906c143c9628c6f368ef51f4ee84e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "f9884d521b8906c143c9628c6f368ef51f4ee84e", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T20:55:59.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T20:55:59.000000Z"}, "message": "Test deduplication by sequence", "tree": {"sha": "5e2f9a6e1640f4aad3328ecb7a52022bc0f8ace9", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5e2f9a6e1640f4aad3328ecb7a52022bc0f8ace9"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/f9884d521b8906c143c9628c6f368ef51f4ee84e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9884d521b8906c143c9628c6f368ef51f4ee84e", "html_url": "https://github.com/datamill-co/target-postgres/commit/f9884d521b8906c143c9628c6f368ef51f4ee84e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/f9884d521b8906c143c9628c6f368ef51f4ee84e/comments", "parents": [{"sha": "20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "html_url": "https://github.com/datamill-co/target-postgres/commit/20d0e2b3c522f13ab26e2d622fa3b86ed801be52"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T19:13:52.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T19:13:52.000000Z"}, "message": "Fix json validation", "tree": {"sha": "26a310f3c239e54aaeadbb8076db7c9b1bd6017f", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/26a310f3c239e54aaeadbb8076db7c9b1bd6017f"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "html_url": "https://github.com/datamill-co/target-postgres/commit/20d0e2b3c522f13ab26e2d622fa3b86ed801be52", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/20d0e2b3c522f13ab26e2d622fa3b86ed801be52/comments", "parents": [{"sha": "38b9f3e2fa35f0b87b2e8108b66408e055501704", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/38b9f3e2fa35f0b87b2e8108b66408e055501704", "html_url": "https://github.com/datamill-co/target-postgres/commit/38b9f3e2fa35f0b87b2e8108b66408e055501704"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "38b9f3e2fa35f0b87b2e8108b66408e055501704", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T19:10:34.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-25T19:10:34.000000Z"}, "message": "Test row level data in tests", "tree": {"sha": "fa8f1858e6cd31a17e0d69021138cefd59547f19", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/fa8f1858e6cd31a17e0d69021138cefd59547f19"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/38b9f3e2fa35f0b87b2e8108b66408e055501704", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/38b9f3e2fa35f0b87b2e8108b66408e055501704", "html_url": "https://github.com/datamill-co/target-postgres/commit/38b9f3e2fa35f0b87b2e8108b66408e055501704", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/38b9f3e2fa35f0b87b2e8108b66408e055501704/comments", "parents": [{"sha": "af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "html_url": "https://github.com/datamill-co/target-postgres/commit/af8bbd9af4de9d3c508b4b38ad1900b381b00f08"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-21T19:45:10.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-21T19:45:10.000000Z"}, "message": "Clean up tests", "tree": {"sha": "e2d8d2fc22c7db2363f9efa555f731f8bce25578", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/e2d8d2fc22c7db2363f9efa555f731f8bce25578"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "html_url": "https://github.com/datamill-co/target-postgres/commit/af8bbd9af4de9d3c508b4b38ad1900b381b00f08", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/af8bbd9af4de9d3c508b4b38ad1900b381b00f08/comments", "parents": [{"sha": "967dc8db3b26fa69ae5a8a71a862970a71585082", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/967dc8db3b26fa69ae5a8a71a862970a71585082", "html_url": "https://github.com/datamill-co/target-postgres/commit/967dc8db3b26fa69ae5a8a71a862970a71585082"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "967dc8db3b26fa69ae5a8a71a862970a71585082", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-21T17:14:28.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-21T17:14:28.000000Z"}, "message": "Full stream/table replication support", "tree": {"sha": "5099f2e3c50f687e646e43ec58a641b0ca24090e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5099f2e3c50f687e646e43ec58a641b0ca24090e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/967dc8db3b26fa69ae5a8a71a862970a71585082", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/967dc8db3b26fa69ae5a8a71a862970a71585082", "html_url": "https://github.com/datamill-co/target-postgres/commit/967dc8db3b26fa69ae5a8a71a862970a71585082", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/967dc8db3b26fa69ae5a8a71a862970a71585082/comments", "parents": [{"sha": "fa3539a49d536c7cbd969180501f18d437a48de7", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa3539a49d536c7cbd969180501f18d437a48de7", "html_url": "https://github.com/datamill-co/target-postgres/commit/fa3539a49d536c7cbd969180501f18d437a48de7"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "fa3539a49d536c7cbd969180501f18d437a48de7", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-19T01:51:12.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-19T01:51:12.000000Z"}, "message": "Deduplicate by sequence column", "tree": {"sha": "a2a0d4223a7b8616af14bfa9a24e75cadff4cc5c", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/a2a0d4223a7b8616af14bfa9a24e75cadff4cc5c"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/fa3539a49d536c7cbd969180501f18d437a48de7", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa3539a49d536c7cbd969180501f18d437a48de7", "html_url": "https://github.com/datamill-co/target-postgres/commit/fa3539a49d536c7cbd969180501f18d437a48de7", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/fa3539a49d536c7cbd969180501f18d437a48de7/comments", "parents": [{"sha": "d7b068fb5e173b3d70fd470a1c74e037508c078e", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b068fb5e173b3d70fd470a1c74e037508c078e", "html_url": "https://github.com/datamill-co/target-postgres/commit/d7b068fb5e173b3d70fd470a1c74e037508c078e"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "d7b068fb5e173b3d70fd470a1c74e037508c078e", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-18T16:53:01.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-18T16:53:01.000000Z"}, "message": "Add docs to README", "tree": {"sha": "ac0b57f8cdf41887110b79840728d08db3cb3b24", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/ac0b57f8cdf41887110b79840728d08db3cb3b24"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/d7b068fb5e173b3d70fd470a1c74e037508c078e", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b068fb5e173b3d70fd470a1c74e037508c078e", "html_url": "https://github.com/datamill-co/target-postgres/commit/d7b068fb5e173b3d70fd470a1c74e037508c078e", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/d7b068fb5e173b3d70fd470a1c74e037508c078e/comments", "parents": [{"sha": "92108647ca8bcc73d6f293c7f784f8d71977b975", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92108647ca8bcc73d6f293c7f784f8d71977b975", "html_url": "https://github.com/datamill-co/target-postgres/commit/92108647ca8bcc73d6f293c7f784f8d71977b975"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "92108647ca8bcc73d6f293c7f784f8d71977b975", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-15T23:59:55.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-15T23:59:55.000000Z"}, "message": "Nested arrays and tests", "tree": {"sha": "b6d793ac9fee56d3f005b8853eee21fe52136846", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/b6d793ac9fee56d3f005b8853eee21fe52136846"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/92108647ca8bcc73d6f293c7f784f8d71977b975", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92108647ca8bcc73d6f293c7f784f8d71977b975", "html_url": "https://github.com/datamill-co/target-postgres/commit/92108647ca8bcc73d6f293c7f784f8d71977b975", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/92108647ca8bcc73d6f293c7f784f8d71977b975/comments", "parents": [{"sha": "571990dcf93820af7a1ea917a23e80883bf83c13", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/571990dcf93820af7a1ea917a23e80883bf83c13", "html_url": "https://github.com/datamill-co/target-postgres/commit/571990dcf93820af7a1ea917a23e80883bf83c13"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "571990dcf93820af7a1ea917a23e80883bf83c13", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-12T02:16:07.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-12T02:16:07.000000Z"}, "message": "Fix nested object null", "tree": {"sha": "3cbf37d95ee73f078cc23bfcaa61df912a467462", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/3cbf37d95ee73f078cc23bfcaa61df912a467462"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/571990dcf93820af7a1ea917a23e80883bf83c13", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/571990dcf93820af7a1ea917a23e80883bf83c13", "html_url": "https://github.com/datamill-co/target-postgres/commit/571990dcf93820af7a1ea917a23e80883bf83c13", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/571990dcf93820af7a1ea917a23e80883bf83c13/comments", "parents": [{"sha": "90182072b7540de7f134f98486f91f4daa09d7c9", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/90182072b7540de7f134f98486f91f4daa09d7c9", "html_url": "https://github.com/datamill-co/target-postgres/commit/90182072b7540de7f134f98486f91f4daa09d7c9"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "90182072b7540de7f134f98486f91f4daa09d7c9", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-12T00:59:57.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-12T00:59:57.000000Z"}, "message": "Populate singer columns on root table", "tree": {"sha": "269ee49bed9921d2d50ece55650e014411824014", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/269ee49bed9921d2d50ece55650e014411824014"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/90182072b7540de7f134f98486f91f4daa09d7c9", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/90182072b7540de7f134f98486f91f4daa09d7c9", "html_url": "https://github.com/datamill-co/target-postgres/commit/90182072b7540de7f134f98486f91f4daa09d7c9", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/90182072b7540de7f134f98486f91f4daa09d7c9/comments", "parents": [{"sha": "e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "html_url": "https://github.com/datamill-co/target-postgres/commit/e52152edc82ee1fb9943a70f4c125ecbfef0ce47"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-11T22:48:08.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-11T22:48:08.000000Z"}, "message": "Delete nested rows based only on parent pk", "tree": {"sha": "4d7b95f205805975e055db516ca7f64707e25029", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/4d7b95f205805975e055db516ca7f64707e25029"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "html_url": "https://github.com/datamill-co/target-postgres/commit/e52152edc82ee1fb9943a70f4c125ecbfef0ce47", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/e52152edc82ee1fb9943a70f4c125ecbfef0ce47/comments", "parents": [{"sha": "a512ea2ed1f130d056aa8b7becaa122a45e25eea", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a512ea2ed1f130d056aa8b7becaa122a45e25eea", "html_url": "https://github.com/datamill-co/target-postgres/commit/a512ea2ed1f130d056aa8b7becaa122a45e25eea"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a512ea2ed1f130d056aa8b7becaa122a45e25eea", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-11T22:34:42.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-11T22:34:42.000000Z"}, "message": "Nested basic tables working", "tree": {"sha": "639705ba4906977964d2dadb9ee0c5ddd79d0c31", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/639705ba4906977964d2dadb9ee0c5ddd79d0c31"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a512ea2ed1f130d056aa8b7becaa122a45e25eea", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a512ea2ed1f130d056aa8b7becaa122a45e25eea", "html_url": "https://github.com/datamill-co/target-postgres/commit/a512ea2ed1f130d056aa8b7becaa122a45e25eea", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a512ea2ed1f130d056aa8b7becaa122a45e25eea/comments", "parents": [{"sha": "077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "html_url": "https://github.com/datamill-co/target-postgres/commit/077defc1c40775e04e07ada9e2d80ecacfbf4fc1"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T19:25:10.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T19:25:10.000000Z"}, "message": "Add top level singer columns", "tree": {"sha": "42bac0ed6db72b8b99fec8b225734b368daaab81", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/42bac0ed6db72b8b99fec8b225734b368daaab81"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "html_url": "https://github.com/datamill-co/target-postgres/commit/077defc1c40775e04e07ada9e2d80ecacfbf4fc1", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/077defc1c40775e04e07ada9e2d80ecacfbf4fc1/comments", "parents": [{"sha": "8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "html_url": "https://github.com/datamill-co/target-postgres/commit/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T18:43:48.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T18:43:48.000000Z"}, "message": "Support nested objects", "tree": {"sha": "8fc1afd8ff9c943e664bee961f23f2577c2b43ab", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/8fc1afd8ff9c943e664bee961f23f2577c2b43ab"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "html_url": "https://github.com/datamill-co/target-postgres/commit/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/8474fb50aff56d7aa9442cf356d4a0f8fa73ab8d/comments", "parents": [{"sha": "a8f043f76a6c916b03bb7dee22c54549304e4c50", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a8f043f76a6c916b03bb7dee22c54549304e4c50", "html_url": "https://github.com/datamill-co/target-postgres/commit/a8f043f76a6c916b03bb7dee22c54549304e4c50"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "a8f043f76a6c916b03bb7dee22c54549304e4c50", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T01:24:30.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-10T01:24:30.000000Z"}, "message": "Refactored. Support composite keys. Dedupe temp table", "tree": {"sha": "5c55937d098b9d73b2fa44ae723dd73914eaf7c2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/5c55937d098b9d73b2fa44ae723dd73914eaf7c2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/a8f043f76a6c916b03bb7dee22c54549304e4c50", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a8f043f76a6c916b03bb7dee22c54549304e4c50", "html_url": "https://github.com/datamill-co/target-postgres/commit/a8f043f76a6c916b03bb7dee22c54549304e4c50", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/a8f043f76a6c916b03bb7dee22c54549304e4c50/comments", "parents": [{"sha": "6ac1b93a8c041e79bbfd77358fb49b9149b14548", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6ac1b93a8c041e79bbfd77358fb49b9149b14548", "html_url": "https://github.com/datamill-co/target-postgres/commit/6ac1b93a8c041e79bbfd77358fb49b9149b14548"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.839122Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "6ac1b93a8c041e79bbfd77358fb49b9149b14548", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:54:24.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:54:24.000000Z"}, "message": "Cleanup types", "tree": {"sha": "d0fbf8e0bf06d16e917ff41a2a21cb1e1ee62135", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d0fbf8e0bf06d16e917ff41a2a21cb1e1ee62135"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/6ac1b93a8c041e79bbfd77358fb49b9149b14548", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6ac1b93a8c041e79bbfd77358fb49b9149b14548", "html_url": "https://github.com/datamill-co/target-postgres/commit/6ac1b93a8c041e79bbfd77358fb49b9149b14548", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/6ac1b93a8c041e79bbfd77358fb49b9149b14548/comments", "parents": [{"sha": "4d06a9e854ddfc2fb62197a81c652d018008a20d", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d06a9e854ddfc2fb62197a81c652d018008a20d", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d06a9e854ddfc2fb62197a81c652d018008a20d"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.958615Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "4d06a9e854ddfc2fb62197a81c652d018008a20d", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:41:59.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:41:59.000000Z"}, "message": "Add license", "tree": {"sha": "d6583859095b7193d12f460c6c0b61f25dec944e", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/d6583859095b7193d12f460c6c0b61f25dec944e"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/4d06a9e854ddfc2fb62197a81c652d018008a20d", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d06a9e854ddfc2fb62197a81c652d018008a20d", "html_url": "https://github.com/datamill-co/target-postgres/commit/4d06a9e854ddfc2fb62197a81c652d018008a20d", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/4d06a9e854ddfc2fb62197a81c652d018008a20d/comments", "parents": [{"sha": "11853ba86d548f4928c54bf9abb9a23f00cd0c49", "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11853ba86d548f4928c54bf9abb9a23f00cd0c49", "html_url": "https://github.com/datamill-co/target-postgres/commit/11853ba86d548f4928c54bf9abb9a23f00cd0c49"}], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.958615Z"}
{"type": "RECORD", "stream": "commits", "record": {"sha": "11853ba86d548f4928c54bf9abb9a23f00cd0c49", "commit": {"author": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:39:35.000000Z"}, "committer": {"name": "Andrew Madonna", "email": "andrew.w.madonna@gmail.com", "date": "2018-03-09T03:39:35.000000Z"}, "message": "first commit", "tree": {"sha": "c12e57ab06ce2f97edf3e75cb050ede43e4c04c2", "url": "https://api.github.com/repos/datamill-co/target-postgres/git/trees/c12e57ab06ce2f97edf3e75cb050ede43e4c04c2"}, "url": "https://api.github.com/repos/datamill-co/target-postgres/git/commits/11853ba86d548f4928c54bf9abb9a23f00cd0c49", "comment_count": 0}, "url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11853ba86d548f4928c54bf9abb9a23f00cd0c49", "html_url": "https://github.com/datamill-co/target-postgres/commit/11853ba86d548f4928c54bf9abb9a23f00cd0c49", "comments_url": "https://api.github.com/repos/datamill-co/target-postgres/commits/11853ba86d548f4928c54bf9abb9a23f00cd0c49/comments", "parents": [], "_sdc_repository": "datamill-co/target-postgres"}, "time_extracted": "2019-08-12T18:13:13.958615Z"}
{"type": "STATE", "value": {"bookmarks": {"datamill-co/target-postgres": {"stargazers": {"since": "2019-08-12T18:12:33.567936Z"}, "assignees": {"since": "2019-08-12T18:12:33.661657Z"}, "issues": {"since": "2019-08-12T18:12:35.765459Z"}, "comments": {"since": "2019-08-12T18:12:38.519017Z"}, "pull_requests": {"since": "2019-08-12T18:13:10.452134Z"}, "reviews": {"since": "2019-08-12T18:13:10.452134Z"}, "review_comments": {"since": "2019-08-12T18:13:10.452134Z"}, "commits": {"since": "2019-08-12T18:13:13.958615Z"}}}}}
